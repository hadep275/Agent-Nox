{"version":3,"file":"115.extension.js","mappings":"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","sources":["webpack://nox-vscode/./node_modules/fetch-blob/from.js","webpack://nox-vscode/./node_modules/web-streams-polyfill/dist/ponyfill.es2018.js","webpack://nox-vscode/./node_modules/node-domexception/index.js","webpack://nox-vscode/./node_modules/fetch-blob/file.js","webpack://nox-vscode/./node_modules/data-uri-to-buffer/dist/index.js","webpack://nox-vscode/./node_modules/node-fetch/src/errors/base.js","webpack://nox-vscode/./node_modules/node-fetch/src/errors/fetch-error.js","webpack://nox-vscode/./node_modules/node-fetch/src/utils/is.js","webpack://nox-vscode/./node_modules/node-fetch/src/body.js","webpack://nox-vscode/./node_modules/node-fetch/src/headers.js","webpack://nox-vscode/./node_modules/node-fetch/src/utils/is-redirect.js","webpack://nox-vscode/./node_modules/node-fetch/src/response.js","webpack://nox-vscode/./node_modules/node-fetch/src/utils/referrer.js","webpack://nox-vscode/./node_modules/node-fetch/src/request.js","webpack://nox-vscode/./node_modules/node-fetch/src/utils/get-search.js","webpack://nox-vscode/./node_modules/node-fetch/src/errors/abort-error.js","webpack://nox-vscode/./node_modules/node-fetch/src/index.js","webpack://nox-vscode/./node_modules/fetch-blob/index.js","webpack://nox-vscode/./node_modules/fetch-blob/streams.cjs","webpack://nox-vscode/./node_modules/formdata-polyfill/esm.min.js"],"sourcesContent":["import { statSync, createReadStream, promises as fs } from 'node:fs'\nimport { basename } from 'node:path'\nimport DOMException from 'node-domexception'\n\nimport File from './file.js'\nimport Blob from './index.js'\n\nconst { stat } = fs\n\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n */\nconst blobFromSync = (path, type) => fromBlob(statSync(path), path, type)\n\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n * @returns {Promise<Blob>}\n */\nconst blobFrom = (path, type) => stat(path).then(stat => fromBlob(stat, path, type))\n\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n * @returns {Promise<File>}\n */\nconst fileFrom = (path, type) => stat(path).then(stat => fromFile(stat, path, type))\n\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n */\nconst fileFromSync = (path, type) => fromFile(statSync(path), path, type)\n\n// @ts-ignore\nconst fromBlob = (stat, path, type = '') => new Blob([new BlobDataItem({\n  path,\n  size: stat.size,\n  lastModified: stat.mtimeMs,\n  start: 0\n})], { type })\n\n// @ts-ignore\nconst fromFile = (stat, path, type = '') => new File([new BlobDataItem({\n  path,\n  size: stat.size,\n  lastModified: stat.mtimeMs,\n  start: 0\n})], basename(path), { type, lastModified: stat.mtimeMs })\n\n/**\n * This is a blob backed up by a file on the disk\n * with minium requirement. Its wrapped around a Blob as a blobPart\n * so you have no direct access to this.\n *\n * @private\n */\nclass BlobDataItem {\n  #path\n  #start\n\n  constructor (options) {\n    this.#path = options.path\n    this.#start = options.start\n    this.size = options.size\n    this.lastModified = options.lastModified\n  }\n\n  /**\n   * Slicing arguments is first validated and formatted\n   * to not be out of range by Blob.prototype.slice\n   */\n  slice (start, end) {\n    return new BlobDataItem({\n      path: this.#path,\n      lastModified: this.lastModified,\n      size: end - start,\n      start: this.#start + start\n    })\n  }\n\n  async * stream () {\n    const { mtimeMs } = await stat(this.#path)\n    if (mtimeMs > this.lastModified) {\n      throw new DOMException('The requested file could not be read, typically due to permission problems that have occurred after a reference to a file was acquired.', 'NotReadableError')\n    }\n    yield * createReadStream(this.#path, {\n      start: this.#start,\n      end: this.#start + this.size - 1\n    })\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'Blob'\n  }\n}\n\nexport default blobFromSync\nexport { File, Blob, blobFrom, blobFromSync, fileFrom, fileFromSync }\n","/**\n * @license\n * web-streams-polyfill v3.3.3\n * Copyright 2024 Mattias Buelens, Diwank Singh Tomer and other contributors.\n * This code is released under the MIT license.\n * SPDX-License-Identifier: MIT\n */\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n    typeof define === 'function' && define.amd ? define(['exports'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.WebStreamsPolyfill = {}));\n})(this, (function (exports) { 'use strict';\n\n    function noop() {\n        return undefined;\n    }\n\n    function typeIsObject(x) {\n        return (typeof x === 'object' && x !== null) || typeof x === 'function';\n    }\n    const rethrowAssertionErrorRejection = noop;\n    function setFunctionName(fn, name) {\n        try {\n            Object.defineProperty(fn, 'name', {\n                value: name,\n                configurable: true\n            });\n        }\n        catch (_a) {\n            // This property is non-configurable in older browsers, so ignore if this throws.\n            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name#browser_compatibility\n        }\n    }\n\n    const originalPromise = Promise;\n    const originalPromiseThen = Promise.prototype.then;\n    const originalPromiseReject = Promise.reject.bind(originalPromise);\n    // https://webidl.spec.whatwg.org/#a-new-promise\n    function newPromise(executor) {\n        return new originalPromise(executor);\n    }\n    // https://webidl.spec.whatwg.org/#a-promise-resolved-with\n    function promiseResolvedWith(value) {\n        return newPromise(resolve => resolve(value));\n    }\n    // https://webidl.spec.whatwg.org/#a-promise-rejected-with\n    function promiseRejectedWith(reason) {\n        return originalPromiseReject(reason);\n    }\n    function PerformPromiseThen(promise, onFulfilled, onRejected) {\n        // There doesn't appear to be any way to correctly emulate the behaviour from JavaScript, so this is just an\n        // approximation.\n        return originalPromiseThen.call(promise, onFulfilled, onRejected);\n    }\n    // Bluebird logs a warning when a promise is created within a fulfillment handler, but then isn't returned\n    // from that handler. To prevent this, return null instead of void from all handlers.\n    // http://bluebirdjs.com/docs/warning-explanations.html#warning-a-promise-was-created-in-a-handler-but-was-not-returned-from-it\n    function uponPromise(promise, onFulfilled, onRejected) {\n        PerformPromiseThen(PerformPromiseThen(promise, onFulfilled, onRejected), undefined, rethrowAssertionErrorRejection);\n    }\n    function uponFulfillment(promise, onFulfilled) {\n        uponPromise(promise, onFulfilled);\n    }\n    function uponRejection(promise, onRejected) {\n        uponPromise(promise, undefined, onRejected);\n    }\n    function transformPromiseWith(promise, fulfillmentHandler, rejectionHandler) {\n        return PerformPromiseThen(promise, fulfillmentHandler, rejectionHandler);\n    }\n    function setPromiseIsHandledToTrue(promise) {\n        PerformPromiseThen(promise, undefined, rethrowAssertionErrorRejection);\n    }\n    let _queueMicrotask = callback => {\n        if (typeof queueMicrotask === 'function') {\n            _queueMicrotask = queueMicrotask;\n        }\n        else {\n            const resolvedPromise = promiseResolvedWith(undefined);\n            _queueMicrotask = cb => PerformPromiseThen(resolvedPromise, cb);\n        }\n        return _queueMicrotask(callback);\n    };\n    function reflectCall(F, V, args) {\n        if (typeof F !== 'function') {\n            throw new TypeError('Argument is not a function');\n        }\n        return Function.prototype.apply.call(F, V, args);\n    }\n    function promiseCall(F, V, args) {\n        try {\n            return promiseResolvedWith(reflectCall(F, V, args));\n        }\n        catch (value) {\n            return promiseRejectedWith(value);\n        }\n    }\n\n    // Original from Chromium\n    // https://chromium.googlesource.com/chromium/src/+/0aee4434a4dba42a42abaea9bfbc0cd196a63bc1/third_party/blink/renderer/core/streams/SimpleQueue.js\n    const QUEUE_MAX_ARRAY_SIZE = 16384;\n    /**\n     * Simple queue structure.\n     *\n     * Avoids scalability issues with using a packed array directly by using\n     * multiple arrays in a linked list and keeping the array size bounded.\n     */\n    class SimpleQueue {\n        constructor() {\n            this._cursor = 0;\n            this._size = 0;\n            // _front and _back are always defined.\n            this._front = {\n                _elements: [],\n                _next: undefined\n            };\n            this._back = this._front;\n            // The cursor is used to avoid calling Array.shift().\n            // It contains the index of the front element of the array inside the\n            // front-most node. It is always in the range [0, QUEUE_MAX_ARRAY_SIZE).\n            this._cursor = 0;\n            // When there is only one node, size === elements.length - cursor.\n            this._size = 0;\n        }\n        get length() {\n            return this._size;\n        }\n        // For exception safety, this method is structured in order:\n        // 1. Read state\n        // 2. Calculate required state mutations\n        // 3. Perform state mutations\n        push(element) {\n            const oldBack = this._back;\n            let newBack = oldBack;\n            if (oldBack._elements.length === QUEUE_MAX_ARRAY_SIZE - 1) {\n                newBack = {\n                    _elements: [],\n                    _next: undefined\n                };\n            }\n            // push() is the mutation most likely to throw an exception, so it\n            // goes first.\n            oldBack._elements.push(element);\n            if (newBack !== oldBack) {\n                this._back = newBack;\n                oldBack._next = newBack;\n            }\n            ++this._size;\n        }\n        // Like push(), shift() follows the read -> calculate -> mutate pattern for\n        // exception safety.\n        shift() { // must not be called on an empty queue\n            const oldFront = this._front;\n            let newFront = oldFront;\n            const oldCursor = this._cursor;\n            let newCursor = oldCursor + 1;\n            const elements = oldFront._elements;\n            const element = elements[oldCursor];\n            if (newCursor === QUEUE_MAX_ARRAY_SIZE) {\n                newFront = oldFront._next;\n                newCursor = 0;\n            }\n            // No mutations before this point.\n            --this._size;\n            this._cursor = newCursor;\n            if (oldFront !== newFront) {\n                this._front = newFront;\n            }\n            // Permit shifted element to be garbage collected.\n            elements[oldCursor] = undefined;\n            return element;\n        }\n        // The tricky thing about forEach() is that it can be called\n        // re-entrantly. The queue may be mutated inside the callback. It is easy to\n        // see that push() within the callback has no negative effects since the end\n        // of the queue is checked for on every iteration. If shift() is called\n        // repeatedly within the callback then the next iteration may return an\n        // element that has been removed. In this case the callback will be called\n        // with undefined values until we either \"catch up\" with elements that still\n        // exist or reach the back of the queue.\n        forEach(callback) {\n            let i = this._cursor;\n            let node = this._front;\n            let elements = node._elements;\n            while (i !== elements.length || node._next !== undefined) {\n                if (i === elements.length) {\n                    node = node._next;\n                    elements = node._elements;\n                    i = 0;\n                    if (elements.length === 0) {\n                        break;\n                    }\n                }\n                callback(elements[i]);\n                ++i;\n            }\n        }\n        // Return the element that would be returned if shift() was called now,\n        // without modifying the queue.\n        peek() { // must not be called on an empty queue\n            const front = this._front;\n            const cursor = this._cursor;\n            return front._elements[cursor];\n        }\n    }\n\n    const AbortSteps = Symbol('[[AbortSteps]]');\n    const ErrorSteps = Symbol('[[ErrorSteps]]');\n    const CancelSteps = Symbol('[[CancelSteps]]');\n    const PullSteps = Symbol('[[PullSteps]]');\n    const ReleaseSteps = Symbol('[[ReleaseSteps]]');\n\n    function ReadableStreamReaderGenericInitialize(reader, stream) {\n        reader._ownerReadableStream = stream;\n        stream._reader = reader;\n        if (stream._state === 'readable') {\n            defaultReaderClosedPromiseInitialize(reader);\n        }\n        else if (stream._state === 'closed') {\n            defaultReaderClosedPromiseInitializeAsResolved(reader);\n        }\n        else {\n            defaultReaderClosedPromiseInitializeAsRejected(reader, stream._storedError);\n        }\n    }\n    // A client of ReadableStreamDefaultReader and ReadableStreamBYOBReader may use these functions directly to bypass state\n    // check.\n    function ReadableStreamReaderGenericCancel(reader, reason) {\n        const stream = reader._ownerReadableStream;\n        return ReadableStreamCancel(stream, reason);\n    }\n    function ReadableStreamReaderGenericRelease(reader) {\n        const stream = reader._ownerReadableStream;\n        if (stream._state === 'readable') {\n            defaultReaderClosedPromiseReject(reader, new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));\n        }\n        else {\n            defaultReaderClosedPromiseResetToRejected(reader, new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));\n        }\n        stream._readableStreamController[ReleaseSteps]();\n        stream._reader = undefined;\n        reader._ownerReadableStream = undefined;\n    }\n    // Helper functions for the readers.\n    function readerLockException(name) {\n        return new TypeError('Cannot ' + name + ' a stream using a released reader');\n    }\n    // Helper functions for the ReadableStreamDefaultReader.\n    function defaultReaderClosedPromiseInitialize(reader) {\n        reader._closedPromise = newPromise((resolve, reject) => {\n            reader._closedPromise_resolve = resolve;\n            reader._closedPromise_reject = reject;\n        });\n    }\n    function defaultReaderClosedPromiseInitializeAsRejected(reader, reason) {\n        defaultReaderClosedPromiseInitialize(reader);\n        defaultReaderClosedPromiseReject(reader, reason);\n    }\n    function defaultReaderClosedPromiseInitializeAsResolved(reader) {\n        defaultReaderClosedPromiseInitialize(reader);\n        defaultReaderClosedPromiseResolve(reader);\n    }\n    function defaultReaderClosedPromiseReject(reader, reason) {\n        if (reader._closedPromise_reject === undefined) {\n            return;\n        }\n        setPromiseIsHandledToTrue(reader._closedPromise);\n        reader._closedPromise_reject(reason);\n        reader._closedPromise_resolve = undefined;\n        reader._closedPromise_reject = undefined;\n    }\n    function defaultReaderClosedPromiseResetToRejected(reader, reason) {\n        defaultReaderClosedPromiseInitializeAsRejected(reader, reason);\n    }\n    function defaultReaderClosedPromiseResolve(reader) {\n        if (reader._closedPromise_resolve === undefined) {\n            return;\n        }\n        reader._closedPromise_resolve(undefined);\n        reader._closedPromise_resolve = undefined;\n        reader._closedPromise_reject = undefined;\n    }\n\n    /// <reference lib=\"es2015.core\" />\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite#Polyfill\n    const NumberIsFinite = Number.isFinite || function (x) {\n        return typeof x === 'number' && isFinite(x);\n    };\n\n    /// <reference lib=\"es2015.core\" />\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc#Polyfill\n    const MathTrunc = Math.trunc || function (v) {\n        return v < 0 ? Math.ceil(v) : Math.floor(v);\n    };\n\n    // https://heycam.github.io/webidl/#idl-dictionaries\n    function isDictionary(x) {\n        return typeof x === 'object' || typeof x === 'function';\n    }\n    function assertDictionary(obj, context) {\n        if (obj !== undefined && !isDictionary(obj)) {\n            throw new TypeError(`${context} is not an object.`);\n        }\n    }\n    // https://heycam.github.io/webidl/#idl-callback-functions\n    function assertFunction(x, context) {\n        if (typeof x !== 'function') {\n            throw new TypeError(`${context} is not a function.`);\n        }\n    }\n    // https://heycam.github.io/webidl/#idl-object\n    function isObject(x) {\n        return (typeof x === 'object' && x !== null) || typeof x === 'function';\n    }\n    function assertObject(x, context) {\n        if (!isObject(x)) {\n            throw new TypeError(`${context} is not an object.`);\n        }\n    }\n    function assertRequiredArgument(x, position, context) {\n        if (x === undefined) {\n            throw new TypeError(`Parameter ${position} is required in '${context}'.`);\n        }\n    }\n    function assertRequiredField(x, field, context) {\n        if (x === undefined) {\n            throw new TypeError(`${field} is required in '${context}'.`);\n        }\n    }\n    // https://heycam.github.io/webidl/#idl-unrestricted-double\n    function convertUnrestrictedDouble(value) {\n        return Number(value);\n    }\n    function censorNegativeZero(x) {\n        return x === 0 ? 0 : x;\n    }\n    function integerPart(x) {\n        return censorNegativeZero(MathTrunc(x));\n    }\n    // https://heycam.github.io/webidl/#idl-unsigned-long-long\n    function convertUnsignedLongLongWithEnforceRange(value, context) {\n        const lowerBound = 0;\n        const upperBound = Number.MAX_SAFE_INTEGER;\n        let x = Number(value);\n        x = censorNegativeZero(x);\n        if (!NumberIsFinite(x)) {\n            throw new TypeError(`${context} is not a finite number`);\n        }\n        x = integerPart(x);\n        if (x < lowerBound || x > upperBound) {\n            throw new TypeError(`${context} is outside the accepted range of ${lowerBound} to ${upperBound}, inclusive`);\n        }\n        if (!NumberIsFinite(x) || x === 0) {\n            return 0;\n        }\n        // TODO Use BigInt if supported?\n        // let xBigInt = BigInt(integerPart(x));\n        // xBigInt = BigInt.asUintN(64, xBigInt);\n        // return Number(xBigInt);\n        return x;\n    }\n\n    function assertReadableStream(x, context) {\n        if (!IsReadableStream(x)) {\n            throw new TypeError(`${context} is not a ReadableStream.`);\n        }\n    }\n\n    // Abstract operations for the ReadableStream.\n    function AcquireReadableStreamDefaultReader(stream) {\n        return new ReadableStreamDefaultReader(stream);\n    }\n    // ReadableStream API exposed for controllers.\n    function ReadableStreamAddReadRequest(stream, readRequest) {\n        stream._reader._readRequests.push(readRequest);\n    }\n    function ReadableStreamFulfillReadRequest(stream, chunk, done) {\n        const reader = stream._reader;\n        const readRequest = reader._readRequests.shift();\n        if (done) {\n            readRequest._closeSteps();\n        }\n        else {\n            readRequest._chunkSteps(chunk);\n        }\n    }\n    function ReadableStreamGetNumReadRequests(stream) {\n        return stream._reader._readRequests.length;\n    }\n    function ReadableStreamHasDefaultReader(stream) {\n        const reader = stream._reader;\n        if (reader === undefined) {\n            return false;\n        }\n        if (!IsReadableStreamDefaultReader(reader)) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * A default reader vended by a {@link ReadableStream}.\n     *\n     * @public\n     */\n    class ReadableStreamDefaultReader {\n        constructor(stream) {\n            assertRequiredArgument(stream, 1, 'ReadableStreamDefaultReader');\n            assertReadableStream(stream, 'First parameter');\n            if (IsReadableStreamLocked(stream)) {\n                throw new TypeError('This stream has already been locked for exclusive reading by another reader');\n            }\n            ReadableStreamReaderGenericInitialize(this, stream);\n            this._readRequests = new SimpleQueue();\n        }\n        /**\n         * Returns a promise that will be fulfilled when the stream becomes closed,\n         * or rejected if the stream ever errors or the reader's lock is released before the stream finishes closing.\n         */\n        get closed() {\n            if (!IsReadableStreamDefaultReader(this)) {\n                return promiseRejectedWith(defaultReaderBrandCheckException('closed'));\n            }\n            return this._closedPromise;\n        }\n        /**\n         * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.\n         */\n        cancel(reason = undefined) {\n            if (!IsReadableStreamDefaultReader(this)) {\n                return promiseRejectedWith(defaultReaderBrandCheckException('cancel'));\n            }\n            if (this._ownerReadableStream === undefined) {\n                return promiseRejectedWith(readerLockException('cancel'));\n            }\n            return ReadableStreamReaderGenericCancel(this, reason);\n        }\n        /**\n         * Returns a promise that allows access to the next chunk from the stream's internal queue, if available.\n         *\n         * If reading a chunk causes the queue to become empty, more data will be pulled from the underlying source.\n         */\n        read() {\n            if (!IsReadableStreamDefaultReader(this)) {\n                return promiseRejectedWith(defaultReaderBrandCheckException('read'));\n            }\n            if (this._ownerReadableStream === undefined) {\n                return promiseRejectedWith(readerLockException('read from'));\n            }\n            let resolvePromise;\n            let rejectPromise;\n            const promise = newPromise((resolve, reject) => {\n                resolvePromise = resolve;\n                rejectPromise = reject;\n            });\n            const readRequest = {\n                _chunkSteps: chunk => resolvePromise({ value: chunk, done: false }),\n                _closeSteps: () => resolvePromise({ value: undefined, done: true }),\n                _errorSteps: e => rejectPromise(e)\n            };\n            ReadableStreamDefaultReaderRead(this, readRequest);\n            return promise;\n        }\n        /**\n         * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.\n         * If the associated stream is errored when the lock is released, the reader will appear errored in the same way\n         * from now on; otherwise, the reader will appear closed.\n         *\n         * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by\n         * the reader's {@link ReadableStreamDefaultReader.read | read()} method has not yet been settled. Attempting to\n         * do so will throw a `TypeError` and leave the reader locked to the stream.\n         */\n        releaseLock() {\n            if (!IsReadableStreamDefaultReader(this)) {\n                throw defaultReaderBrandCheckException('releaseLock');\n            }\n            if (this._ownerReadableStream === undefined) {\n                return;\n            }\n            ReadableStreamDefaultReaderRelease(this);\n        }\n    }\n    Object.defineProperties(ReadableStreamDefaultReader.prototype, {\n        cancel: { enumerable: true },\n        read: { enumerable: true },\n        releaseLock: { enumerable: true },\n        closed: { enumerable: true }\n    });\n    setFunctionName(ReadableStreamDefaultReader.prototype.cancel, 'cancel');\n    setFunctionName(ReadableStreamDefaultReader.prototype.read, 'read');\n    setFunctionName(ReadableStreamDefaultReader.prototype.releaseLock, 'releaseLock');\n    if (typeof Symbol.toStringTag === 'symbol') {\n        Object.defineProperty(ReadableStreamDefaultReader.prototype, Symbol.toStringTag, {\n            value: 'ReadableStreamDefaultReader',\n            configurable: true\n        });\n    }\n    // Abstract operations for the readers.\n    function IsReadableStreamDefaultReader(x) {\n        if (!typeIsObject(x)) {\n            return false;\n        }\n        if (!Object.prototype.hasOwnProperty.call(x, '_readRequests')) {\n            return false;\n        }\n        return x instanceof ReadableStreamDefaultReader;\n    }\n    function ReadableStreamDefaultReaderRead(reader, readRequest) {\n        const stream = reader._ownerReadableStream;\n        stream._disturbed = true;\n        if (stream._state === 'closed') {\n            readRequest._closeSteps();\n        }\n        else if (stream._state === 'errored') {\n            readRequest._errorSteps(stream._storedError);\n        }\n        else {\n            stream._readableStreamController[PullSteps](readRequest);\n        }\n    }\n    function ReadableStreamDefaultReaderRelease(reader) {\n        ReadableStreamReaderGenericRelease(reader);\n        const e = new TypeError('Reader was released');\n        ReadableStreamDefaultReaderErrorReadRequests(reader, e);\n    }\n    function ReadableStreamDefaultReaderErrorReadRequests(reader, e) {\n        const readRequests = reader._readRequests;\n        reader._readRequests = new SimpleQueue();\n        readRequests.forEach(readRequest => {\n            readRequest._errorSteps(e);\n        });\n    }\n    // Helper functions for the ReadableStreamDefaultReader.\n    function defaultReaderBrandCheckException(name) {\n        return new TypeError(`ReadableStreamDefaultReader.prototype.${name} can only be used on a ReadableStreamDefaultReader`);\n    }\n\n    /// <reference lib=\"es2018.asynciterable\" />\n    /* eslint-disable @typescript-eslint/no-empty-function */\n    const AsyncIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf(async function* () { }).prototype);\n\n    /// <reference lib=\"es2018.asynciterable\" />\n    class ReadableStreamAsyncIteratorImpl {\n        constructor(reader, preventCancel) {\n            this._ongoingPromise = undefined;\n            this._isFinished = false;\n            this._reader = reader;\n            this._preventCancel = preventCancel;\n        }\n        next() {\n            const nextSteps = () => this._nextSteps();\n            this._ongoingPromise = this._ongoingPromise ?\n                transformPromiseWith(this._ongoingPromise, nextSteps, nextSteps) :\n                nextSteps();\n            return this._ongoingPromise;\n        }\n        return(value) {\n            const returnSteps = () => this._returnSteps(value);\n            return this._ongoingPromise ?\n                transformPromiseWith(this._ongoingPromise, returnSteps, returnSteps) :\n                returnSteps();\n        }\n        _nextSteps() {\n            if (this._isFinished) {\n                return Promise.resolve({ value: undefined, done: true });\n            }\n            const reader = this._reader;\n            let resolvePromise;\n            let rejectPromise;\n            const promise = newPromise((resolve, reject) => {\n                resolvePromise = resolve;\n                rejectPromise = reject;\n            });\n            const readRequest = {\n                _chunkSteps: chunk => {\n                    this._ongoingPromise = undefined;\n                    // This needs to be delayed by one microtask, otherwise we stop pulling too early which breaks a test.\n                    // FIXME Is this a bug in the specification, or in the test?\n                    _queueMicrotask(() => resolvePromise({ value: chunk, done: false }));\n                },\n                _closeSteps: () => {\n                    this._ongoingPromise = undefined;\n                    this._isFinished = true;\n                    ReadableStreamReaderGenericRelease(reader);\n                    resolvePromise({ value: undefined, done: true });\n                },\n                _errorSteps: reason => {\n                    this._ongoingPromise = undefined;\n                    this._isFinished = true;\n                    ReadableStreamReaderGenericRelease(reader);\n                    rejectPromise(reason);\n                }\n            };\n            ReadableStreamDefaultReaderRead(reader, readRequest);\n            return promise;\n        }\n        _returnSteps(value) {\n            if (this._isFinished) {\n                return Promise.resolve({ value, done: true });\n            }\n            this._isFinished = true;\n            const reader = this._reader;\n            if (!this._preventCancel) {\n                const result = ReadableStreamReaderGenericCancel(reader, value);\n                ReadableStreamReaderGenericRelease(reader);\n                return transformPromiseWith(result, () => ({ value, done: true }));\n            }\n            ReadableStreamReaderGenericRelease(reader);\n            return promiseResolvedWith({ value, done: true });\n        }\n    }\n    const ReadableStreamAsyncIteratorPrototype = {\n        next() {\n            if (!IsReadableStreamAsyncIterator(this)) {\n                return promiseRejectedWith(streamAsyncIteratorBrandCheckException('next'));\n            }\n            return this._asyncIteratorImpl.next();\n        },\n        return(value) {\n            if (!IsReadableStreamAsyncIterator(this)) {\n                return promiseRejectedWith(streamAsyncIteratorBrandCheckException('return'));\n            }\n            return this._asyncIteratorImpl.return(value);\n        }\n    };\n    Object.setPrototypeOf(ReadableStreamAsyncIteratorPrototype, AsyncIteratorPrototype);\n    // Abstract operations for the ReadableStream.\n    function AcquireReadableStreamAsyncIterator(stream, preventCancel) {\n        const reader = AcquireReadableStreamDefaultReader(stream);\n        const impl = new ReadableStreamAsyncIteratorImpl(reader, preventCancel);\n        const iterator = Object.create(ReadableStreamAsyncIteratorPrototype);\n        iterator._asyncIteratorImpl = impl;\n        return iterator;\n    }\n    function IsReadableStreamAsyncIterator(x) {\n        if (!typeIsObject(x)) {\n            return false;\n        }\n        if (!Object.prototype.hasOwnProperty.call(x, '_asyncIteratorImpl')) {\n            return false;\n        }\n        try {\n            // noinspection SuspiciousTypeOfGuard\n            return x._asyncIteratorImpl instanceof\n                ReadableStreamAsyncIteratorImpl;\n        }\n        catch (_a) {\n            return false;\n        }\n    }\n    // Helper functions for the ReadableStream.\n    function streamAsyncIteratorBrandCheckException(name) {\n        return new TypeError(`ReadableStreamAsyncIterator.${name} can only be used on a ReadableSteamAsyncIterator`);\n    }\n\n    /// <reference lib=\"es2015.core\" />\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN#Polyfill\n    const NumberIsNaN = Number.isNaN || function (x) {\n        // eslint-disable-next-line no-self-compare\n        return x !== x;\n    };\n\n    var _a, _b, _c;\n    function CreateArrayFromList(elements) {\n        // We use arrays to represent lists, so this is basically a no-op.\n        // Do a slice though just in case we happen to depend on the unique-ness.\n        return elements.slice();\n    }\n    function CopyDataBlockBytes(dest, destOffset, src, srcOffset, n) {\n        new Uint8Array(dest).set(new Uint8Array(src, srcOffset, n), destOffset);\n    }\n    let TransferArrayBuffer = (O) => {\n        if (typeof O.transfer === 'function') {\n            TransferArrayBuffer = buffer => buffer.transfer();\n        }\n        else if (typeof structuredClone === 'function') {\n            TransferArrayBuffer = buffer => structuredClone(buffer, { transfer: [buffer] });\n        }\n        else {\n            // Not implemented correctly\n            TransferArrayBuffer = buffer => buffer;\n        }\n        return TransferArrayBuffer(O);\n    };\n    let IsDetachedBuffer = (O) => {\n        if (typeof O.detached === 'boolean') {\n            IsDetachedBuffer = buffer => buffer.detached;\n        }\n        else {\n            // Not implemented correctly\n            IsDetachedBuffer = buffer => buffer.byteLength === 0;\n        }\n        return IsDetachedBuffer(O);\n    };\n    function ArrayBufferSlice(buffer, begin, end) {\n        // ArrayBuffer.prototype.slice is not available on IE10\n        // https://www.caniuse.com/mdn-javascript_builtins_arraybuffer_slice\n        if (buffer.slice) {\n            return buffer.slice(begin, end);\n        }\n        const length = end - begin;\n        const slice = new ArrayBuffer(length);\n        CopyDataBlockBytes(slice, 0, buffer, begin, length);\n        return slice;\n    }\n    function GetMethod(receiver, prop) {\n        const func = receiver[prop];\n        if (func === undefined || func === null) {\n            return undefined;\n        }\n        if (typeof func !== 'function') {\n            throw new TypeError(`${String(prop)} is not a function`);\n        }\n        return func;\n    }\n    function CreateAsyncFromSyncIterator(syncIteratorRecord) {\n        // Instead of re-implementing CreateAsyncFromSyncIterator and %AsyncFromSyncIteratorPrototype%,\n        // we use yield* inside an async generator function to achieve the same result.\n        // Wrap the sync iterator inside a sync iterable, so we can use it with yield*.\n        const syncIterable = {\n            [Symbol.iterator]: () => syncIteratorRecord.iterator\n        };\n        // Create an async generator function and immediately invoke it.\n        const asyncIterator = (async function* () {\n            return yield* syncIterable;\n        }());\n        // Return as an async iterator record.\n        const nextMethod = asyncIterator.next;\n        return { iterator: asyncIterator, nextMethod, done: false };\n    }\n    // Aligns with core-js/modules/es.symbol.async-iterator.js\n    const SymbolAsyncIterator = (_c = (_a = Symbol.asyncIterator) !== null && _a !== void 0 ? _a : (_b = Symbol.for) === null || _b === void 0 ? void 0 : _b.call(Symbol, 'Symbol.asyncIterator')) !== null && _c !== void 0 ? _c : '@@asyncIterator';\n    function GetIterator(obj, hint = 'sync', method) {\n        if (method === undefined) {\n            if (hint === 'async') {\n                method = GetMethod(obj, SymbolAsyncIterator);\n                if (method === undefined) {\n                    const syncMethod = GetMethod(obj, Symbol.iterator);\n                    const syncIteratorRecord = GetIterator(obj, 'sync', syncMethod);\n                    return CreateAsyncFromSyncIterator(syncIteratorRecord);\n                }\n            }\n            else {\n                method = GetMethod(obj, Symbol.iterator);\n            }\n        }\n        if (method === undefined) {\n            throw new TypeError('The object is not iterable');\n        }\n        const iterator = reflectCall(method, obj, []);\n        if (!typeIsObject(iterator)) {\n            throw new TypeError('The iterator method must return an object');\n        }\n        const nextMethod = iterator.next;\n        return { iterator, nextMethod, done: false };\n    }\n    function IteratorNext(iteratorRecord) {\n        const result = reflectCall(iteratorRecord.nextMethod, iteratorRecord.iterator, []);\n        if (!typeIsObject(result)) {\n            throw new TypeError('The iterator.next() method must return an object');\n        }\n        return result;\n    }\n    function IteratorComplete(iterResult) {\n        return Boolean(iterResult.done);\n    }\n    function IteratorValue(iterResult) {\n        return iterResult.value;\n    }\n\n    function IsNonNegativeNumber(v) {\n        if (typeof v !== 'number') {\n            return false;\n        }\n        if (NumberIsNaN(v)) {\n            return false;\n        }\n        if (v < 0) {\n            return false;\n        }\n        return true;\n    }\n    function CloneAsUint8Array(O) {\n        const buffer = ArrayBufferSlice(O.buffer, O.byteOffset, O.byteOffset + O.byteLength);\n        return new Uint8Array(buffer);\n    }\n\n    function DequeueValue(container) {\n        const pair = container._queue.shift();\n        container._queueTotalSize -= pair.size;\n        if (container._queueTotalSize < 0) {\n            container._queueTotalSize = 0;\n        }\n        return pair.value;\n    }\n    function EnqueueValueWithSize(container, value, size) {\n        if (!IsNonNegativeNumber(size) || size === Infinity) {\n            throw new RangeError('Size must be a finite, non-NaN, non-negative number.');\n        }\n        container._queue.push({ value, size });\n        container._queueTotalSize += size;\n    }\n    function PeekQueueValue(container) {\n        const pair = container._queue.peek();\n        return pair.value;\n    }\n    function ResetQueue(container) {\n        container._queue = new SimpleQueue();\n        container._queueTotalSize = 0;\n    }\n\n    function isDataViewConstructor(ctor) {\n        return ctor === DataView;\n    }\n    function isDataView(view) {\n        return isDataViewConstructor(view.constructor);\n    }\n    function arrayBufferViewElementSize(ctor) {\n        if (isDataViewConstructor(ctor)) {\n            return 1;\n        }\n        return ctor.BYTES_PER_ELEMENT;\n    }\n\n    /**\n     * A pull-into request in a {@link ReadableByteStreamController}.\n     *\n     * @public\n     */\n    class ReadableStreamBYOBRequest {\n        constructor() {\n            throw new TypeError('Illegal constructor');\n        }\n        /**\n         * Returns the view for writing in to, or `null` if the BYOB request has already been responded to.\n         */\n        get view() {\n            if (!IsReadableStreamBYOBRequest(this)) {\n                throw byobRequestBrandCheckException('view');\n            }\n            return this._view;\n        }\n        respond(bytesWritten) {\n            if (!IsReadableStreamBYOBRequest(this)) {\n                throw byobRequestBrandCheckException('respond');\n            }\n            assertRequiredArgument(bytesWritten, 1, 'respond');\n            bytesWritten = convertUnsignedLongLongWithEnforceRange(bytesWritten, 'First parameter');\n            if (this._associatedReadableByteStreamController === undefined) {\n                throw new TypeError('This BYOB request has been invalidated');\n            }\n            if (IsDetachedBuffer(this._view.buffer)) {\n                throw new TypeError(`The BYOB request's buffer has been detached and so cannot be used as a response`);\n            }\n            ReadableByteStreamControllerRespond(this._associatedReadableByteStreamController, bytesWritten);\n        }\n        respondWithNewView(view) {\n            if (!IsReadableStreamBYOBRequest(this)) {\n                throw byobRequestBrandCheckException('respondWithNewView');\n            }\n            assertRequiredArgument(view, 1, 'respondWithNewView');\n            if (!ArrayBuffer.isView(view)) {\n                throw new TypeError('You can only respond with array buffer views');\n            }\n            if (this._associatedReadableByteStreamController === undefined) {\n                throw new TypeError('This BYOB request has been invalidated');\n            }\n            if (IsDetachedBuffer(view.buffer)) {\n                throw new TypeError('The given view\\'s buffer has been detached and so cannot be used as a response');\n            }\n            ReadableByteStreamControllerRespondWithNewView(this._associatedReadableByteStreamController, view);\n        }\n    }\n    Object.defineProperties(ReadableStreamBYOBRequest.prototype, {\n        respond: { enumerable: true },\n        respondWithNewView: { enumerable: true },\n        view: { enumerable: true }\n    });\n    setFunctionName(ReadableStreamBYOBRequest.prototype.respond, 'respond');\n    setFunctionName(ReadableStreamBYOBRequest.prototype.respondWithNewView, 'respondWithNewView');\n    if (typeof Symbol.toStringTag === 'symbol') {\n        Object.defineProperty(ReadableStreamBYOBRequest.prototype, Symbol.toStringTag, {\n            value: 'ReadableStreamBYOBRequest',\n            configurable: true\n        });\n    }\n    /**\n     * Allows control of a {@link ReadableStream | readable byte stream}'s state and internal queue.\n     *\n     * @public\n     */\n    class ReadableByteStreamController {\n        constructor() {\n            throw new TypeError('Illegal constructor');\n        }\n        /**\n         * Returns the current BYOB pull request, or `null` if there isn't one.\n         */\n        get byobRequest() {\n            if (!IsReadableByteStreamController(this)) {\n                throw byteStreamControllerBrandCheckException('byobRequest');\n            }\n            return ReadableByteStreamControllerGetBYOBRequest(this);\n        }\n        /**\n         * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is\n         * over-full. An underlying byte source ought to use this information to determine when and how to apply backpressure.\n         */\n        get desiredSize() {\n            if (!IsReadableByteStreamController(this)) {\n                throw byteStreamControllerBrandCheckException('desiredSize');\n            }\n            return ReadableByteStreamControllerGetDesiredSize(this);\n        }\n        /**\n         * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from\n         * the stream, but once those are read, the stream will become closed.\n         */\n        close() {\n            if (!IsReadableByteStreamController(this)) {\n                throw byteStreamControllerBrandCheckException('close');\n            }\n            if (this._closeRequested) {\n                throw new TypeError('The stream has already been closed; do not close it again!');\n            }\n            const state = this._controlledReadableByteStream._state;\n            if (state !== 'readable') {\n                throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be closed`);\n            }\n            ReadableByteStreamControllerClose(this);\n        }\n        enqueue(chunk) {\n            if (!IsReadableByteStreamController(this)) {\n                throw byteStreamControllerBrandCheckException('enqueue');\n            }\n            assertRequiredArgument(chunk, 1, 'enqueue');\n            if (!ArrayBuffer.isView(chunk)) {\n                throw new TypeError('chunk must be an array buffer view');\n            }\n            if (chunk.byteLength === 0) {\n                throw new TypeError('chunk must have non-zero byteLength');\n            }\n            if (chunk.buffer.byteLength === 0) {\n                throw new TypeError(`chunk's buffer must have non-zero byteLength`);\n            }\n            if (this._closeRequested) {\n                throw new TypeError('stream is closed or draining');\n            }\n            const state = this._controlledReadableByteStream._state;\n            if (state !== 'readable') {\n                throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be enqueued to`);\n            }\n            ReadableByteStreamControllerEnqueue(this, chunk);\n        }\n        /**\n         * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.\n         */\n        error(e = undefined) {\n            if (!IsReadableByteStreamController(this)) {\n                throw byteStreamControllerBrandCheckException('error');\n            }\n            ReadableByteStreamControllerError(this, e);\n        }\n        /** @internal */\n        [CancelSteps](reason) {\n            ReadableByteStreamControllerClearPendingPullIntos(this);\n            ResetQueue(this);\n            const result = this._cancelAlgorithm(reason);\n            ReadableByteStreamControllerClearAlgorithms(this);\n            return result;\n        }\n        /** @internal */\n        [PullSteps](readRequest) {\n            const stream = this._controlledReadableByteStream;\n            if (this._queueTotalSize > 0) {\n                ReadableByteStreamControllerFillReadRequestFromQueue(this, readRequest);\n                return;\n            }\n            const autoAllocateChunkSize = this._autoAllocateChunkSize;\n            if (autoAllocateChunkSize !== undefined) {\n                let buffer;\n                try {\n                    buffer = new ArrayBuffer(autoAllocateChunkSize);\n                }\n                catch (bufferE) {\n                    readRequest._errorSteps(bufferE);\n                    return;\n                }\n                const pullIntoDescriptor = {\n                    buffer,\n                    bufferByteLength: autoAllocateChunkSize,\n                    byteOffset: 0,\n                    byteLength: autoAllocateChunkSize,\n                    bytesFilled: 0,\n                    minimumFill: 1,\n                    elementSize: 1,\n                    viewConstructor: Uint8Array,\n                    readerType: 'default'\n                };\n                this._pendingPullIntos.push(pullIntoDescriptor);\n            }\n            ReadableStreamAddReadRequest(stream, readRequest);\n            ReadableByteStreamControllerCallPullIfNeeded(this);\n        }\n        /** @internal */\n        [ReleaseSteps]() {\n            if (this._pendingPullIntos.length > 0) {\n                const firstPullInto = this._pendingPullIntos.peek();\n                firstPullInto.readerType = 'none';\n                this._pendingPullIntos = new SimpleQueue();\n                this._pendingPullIntos.push(firstPullInto);\n            }\n        }\n    }\n    Object.defineProperties(ReadableByteStreamController.prototype, {\n        close: { enumerable: true },\n        enqueue: { enumerable: true },\n        error: { enumerable: true },\n        byobRequest: { enumerable: true },\n        desiredSize: { enumerable: true }\n    });\n    setFunctionName(ReadableByteStreamController.prototype.close, 'close');\n    setFunctionName(ReadableByteStreamController.prototype.enqueue, 'enqueue');\n    setFunctionName(ReadableByteStreamController.prototype.error, 'error');\n    if (typeof Symbol.toStringTag === 'symbol') {\n        Object.defineProperty(ReadableByteStreamController.prototype, Symbol.toStringTag, {\n            value: 'ReadableByteStreamController',\n            configurable: true\n        });\n    }\n    // Abstract operations for the ReadableByteStreamController.\n    function IsReadableByteStreamController(x) {\n        if (!typeIsObject(x)) {\n            return false;\n        }\n        if (!Object.prototype.hasOwnProperty.call(x, '_controlledReadableByteStream')) {\n            return false;\n        }\n        return x instanceof ReadableByteStreamController;\n    }\n    function IsReadableStreamBYOBRequest(x) {\n        if (!typeIsObject(x)) {\n            return false;\n        }\n        if (!Object.prototype.hasOwnProperty.call(x, '_associatedReadableByteStreamController')) {\n            return false;\n        }\n        return x instanceof ReadableStreamBYOBRequest;\n    }\n    function ReadableByteStreamControllerCallPullIfNeeded(controller) {\n        const shouldPull = ReadableByteStreamControllerShouldCallPull(controller);\n        if (!shouldPull) {\n            return;\n        }\n        if (controller._pulling) {\n            controller._pullAgain = true;\n            return;\n        }\n        controller._pulling = true;\n        // TODO: Test controller argument\n        const pullPromise = controller._pullAlgorithm();\n        uponPromise(pullPromise, () => {\n            controller._pulling = false;\n            if (controller._pullAgain) {\n                controller._pullAgain = false;\n                ReadableByteStreamControllerCallPullIfNeeded(controller);\n            }\n            return null;\n        }, e => {\n            ReadableByteStreamControllerError(controller, e);\n            return null;\n        });\n    }\n    function ReadableByteStreamControllerClearPendingPullIntos(controller) {\n        ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n        controller._pendingPullIntos = new SimpleQueue();\n    }\n    function ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor) {\n        let done = false;\n        if (stream._state === 'closed') {\n            done = true;\n        }\n        const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);\n        if (pullIntoDescriptor.readerType === 'default') {\n            ReadableStreamFulfillReadRequest(stream, filledView, done);\n        }\n        else {\n            ReadableStreamFulfillReadIntoRequest(stream, filledView, done);\n        }\n    }\n    function ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor) {\n        const bytesFilled = pullIntoDescriptor.bytesFilled;\n        const elementSize = pullIntoDescriptor.elementSize;\n        return new pullIntoDescriptor.viewConstructor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, bytesFilled / elementSize);\n    }\n    function ReadableByteStreamControllerEnqueueChunkToQueue(controller, buffer, byteOffset, byteLength) {\n        controller._queue.push({ buffer, byteOffset, byteLength });\n        controller._queueTotalSize += byteLength;\n    }\n    function ReadableByteStreamControllerEnqueueClonedChunkToQueue(controller, buffer, byteOffset, byteLength) {\n        let clonedChunk;\n        try {\n            clonedChunk = ArrayBufferSlice(buffer, byteOffset, byteOffset + byteLength);\n        }\n        catch (cloneE) {\n            ReadableByteStreamControllerError(controller, cloneE);\n            throw cloneE;\n        }\n        ReadableByteStreamControllerEnqueueChunkToQueue(controller, clonedChunk, 0, byteLength);\n    }\n    function ReadableByteStreamControllerEnqueueDetachedPullIntoToQueue(controller, firstDescriptor) {\n        if (firstDescriptor.bytesFilled > 0) {\n            ReadableByteStreamControllerEnqueueClonedChunkToQueue(controller, firstDescriptor.buffer, firstDescriptor.byteOffset, firstDescriptor.bytesFilled);\n        }\n        ReadableByteStreamControllerShiftPendingPullInto(controller);\n    }\n    function ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor) {\n        const maxBytesToCopy = Math.min(controller._queueTotalSize, pullIntoDescriptor.byteLength - pullIntoDescriptor.bytesFilled);\n        const maxBytesFilled = pullIntoDescriptor.bytesFilled + maxBytesToCopy;\n        let totalBytesToCopyRemaining = maxBytesToCopy;\n        let ready = false;\n        const remainderBytes = maxBytesFilled % pullIntoDescriptor.elementSize;\n        const maxAlignedBytes = maxBytesFilled - remainderBytes;\n        // A descriptor for a read() request that is not yet filled up to its minimum length will stay at the head\n        // of the queue, so the underlying source can keep filling it.\n        if (maxAlignedBytes >= pullIntoDescriptor.minimumFill) {\n            totalBytesToCopyRemaining = maxAlignedBytes - pullIntoDescriptor.bytesFilled;\n            ready = true;\n        }\n        const queue = controller._queue;\n        while (totalBytesToCopyRemaining > 0) {\n            const headOfQueue = queue.peek();\n            const bytesToCopy = Math.min(totalBytesToCopyRemaining, headOfQueue.byteLength);\n            const destStart = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;\n            CopyDataBlockBytes(pullIntoDescriptor.buffer, destStart, headOfQueue.buffer, headOfQueue.byteOffset, bytesToCopy);\n            if (headOfQueue.byteLength === bytesToCopy) {\n                queue.shift();\n            }\n            else {\n                headOfQueue.byteOffset += bytesToCopy;\n                headOfQueue.byteLength -= bytesToCopy;\n            }\n            controller._queueTotalSize -= bytesToCopy;\n            ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesToCopy, pullIntoDescriptor);\n            totalBytesToCopyRemaining -= bytesToCopy;\n        }\n        return ready;\n    }\n    function ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, size, pullIntoDescriptor) {\n        pullIntoDescriptor.bytesFilled += size;\n    }\n    function ReadableByteStreamControllerHandleQueueDrain(controller) {\n        if (controller._queueTotalSize === 0 && controller._closeRequested) {\n            ReadableByteStreamControllerClearAlgorithms(controller);\n            ReadableStreamClose(controller._controlledReadableByteStream);\n        }\n        else {\n            ReadableByteStreamControllerCallPullIfNeeded(controller);\n        }\n    }\n    function ReadableByteStreamControllerInvalidateBYOBRequest(controller) {\n        if (controller._byobRequest === null) {\n            return;\n        }\n        controller._byobRequest._associatedReadableByteStreamController = undefined;\n        controller._byobRequest._view = null;\n        controller._byobRequest = null;\n    }\n    function ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller) {\n        while (controller._pendingPullIntos.length > 0) {\n            if (controller._queueTotalSize === 0) {\n                return;\n            }\n            const pullIntoDescriptor = controller._pendingPullIntos.peek();\n            if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {\n                ReadableByteStreamControllerShiftPendingPullInto(controller);\n                ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);\n            }\n        }\n    }\n    function ReadableByteStreamControllerProcessReadRequestsUsingQueue(controller) {\n        const reader = controller._controlledReadableByteStream._reader;\n        while (reader._readRequests.length > 0) {\n            if (controller._queueTotalSize === 0) {\n                return;\n            }\n            const readRequest = reader._readRequests.shift();\n            ReadableByteStreamControllerFillReadRequestFromQueue(controller, readRequest);\n        }\n    }\n    function ReadableByteStreamControllerPullInto(controller, view, min, readIntoRequest) {\n        const stream = controller._controlledReadableByteStream;\n        const ctor = view.constructor;\n        const elementSize = arrayBufferViewElementSize(ctor);\n        const { byteOffset, byteLength } = view;\n        const minimumFill = min * elementSize;\n        let buffer;\n        try {\n            buffer = TransferArrayBuffer(view.buffer);\n        }\n        catch (e) {\n            readIntoRequest._errorSteps(e);\n            return;\n        }\n        const pullIntoDescriptor = {\n            buffer,\n            bufferByteLength: buffer.byteLength,\n            byteOffset,\n            byteLength,\n            bytesFilled: 0,\n            minimumFill,\n            elementSize,\n            viewConstructor: ctor,\n            readerType: 'byob'\n        };\n        if (controller._pendingPullIntos.length > 0) {\n            controller._pendingPullIntos.push(pullIntoDescriptor);\n            // No ReadableByteStreamControllerCallPullIfNeeded() call since:\n            // - No change happens on desiredSize\n            // - The source has already been notified of that there's at least 1 pending read(view)\n            ReadableStreamAddReadIntoRequest(stream, readIntoRequest);\n            return;\n        }\n        if (stream._state === 'closed') {\n            const emptyView = new ctor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, 0);\n            readIntoRequest._closeSteps(emptyView);\n            return;\n        }\n        if (controller._queueTotalSize > 0) {\n            if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {\n                const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);\n                ReadableByteStreamControllerHandleQueueDrain(controller);\n                readIntoRequest._chunkSteps(filledView);\n                return;\n            }\n            if (controller._closeRequested) {\n                const e = new TypeError('Insufficient bytes to fill elements in the given buffer');\n                ReadableByteStreamControllerError(controller, e);\n                readIntoRequest._errorSteps(e);\n                return;\n            }\n        }\n        controller._pendingPullIntos.push(pullIntoDescriptor);\n        ReadableStreamAddReadIntoRequest(stream, readIntoRequest);\n        ReadableByteStreamControllerCallPullIfNeeded(controller);\n    }\n    function ReadableByteStreamControllerRespondInClosedState(controller, firstDescriptor) {\n        if (firstDescriptor.readerType === 'none') {\n            ReadableByteStreamControllerShiftPendingPullInto(controller);\n        }\n        const stream = controller._controlledReadableByteStream;\n        if (ReadableStreamHasBYOBReader(stream)) {\n            while (ReadableStreamGetNumReadIntoRequests(stream) > 0) {\n                const pullIntoDescriptor = ReadableByteStreamControllerShiftPendingPullInto(controller);\n                ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor);\n            }\n        }\n    }\n    function ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, pullIntoDescriptor) {\n        ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesWritten, pullIntoDescriptor);\n        if (pullIntoDescriptor.readerType === 'none') {\n            ReadableByteStreamControllerEnqueueDetachedPullIntoToQueue(controller, pullIntoDescriptor);\n            ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\n            return;\n        }\n        if (pullIntoDescriptor.bytesFilled < pullIntoDescriptor.minimumFill) {\n            // A descriptor for a read() request that is not yet filled up to its minimum length will stay at the head\n            // of the queue, so the underlying source can keep filling it.\n            return;\n        }\n        ReadableByteStreamControllerShiftPendingPullInto(controller);\n        const remainderSize = pullIntoDescriptor.bytesFilled % pullIntoDescriptor.elementSize;\n        if (remainderSize > 0) {\n            const end = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;\n            ReadableByteStreamControllerEnqueueClonedChunkToQueue(controller, pullIntoDescriptor.buffer, end - remainderSize, remainderSize);\n        }\n        pullIntoDescriptor.bytesFilled -= remainderSize;\n        ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);\n        ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\n    }\n    function ReadableByteStreamControllerRespondInternal(controller, bytesWritten) {\n        const firstDescriptor = controller._pendingPullIntos.peek();\n        ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n        const state = controller._controlledReadableByteStream._state;\n        if (state === 'closed') {\n            ReadableByteStreamControllerRespondInClosedState(controller, firstDescriptor);\n        }\n        else {\n            ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, firstDescriptor);\n        }\n        ReadableByteStreamControllerCallPullIfNeeded(controller);\n    }\n    function ReadableByteStreamControllerShiftPendingPullInto(controller) {\n        const descriptor = controller._pendingPullIntos.shift();\n        return descriptor;\n    }\n    function ReadableByteStreamControllerShouldCallPull(controller) {\n        const stream = controller._controlledReadableByteStream;\n        if (stream._state !== 'readable') {\n            return false;\n        }\n        if (controller._closeRequested) {\n            return false;\n        }\n        if (!controller._started) {\n            return false;\n        }\n        if (ReadableStreamHasDefaultReader(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n            return true;\n        }\n        if (ReadableStreamHasBYOBReader(stream) && ReadableStreamGetNumReadIntoRequests(stream) > 0) {\n            return true;\n        }\n        const desiredSize = ReadableByteStreamControllerGetDesiredSize(controller);\n        if (desiredSize > 0) {\n            return true;\n        }\n        return false;\n    }\n    function ReadableByteStreamControllerClearAlgorithms(controller) {\n        controller._pullAlgorithm = undefined;\n        controller._cancelAlgorithm = undefined;\n    }\n    // A client of ReadableByteStreamController may use these functions directly to bypass state check.\n    function ReadableByteStreamControllerClose(controller) {\n        const stream = controller._controlledReadableByteStream;\n        if (controller._closeRequested || stream._state !== 'readable') {\n            return;\n        }\n        if (controller._queueTotalSize > 0) {\n            controller._closeRequested = true;\n            return;\n        }\n        if (controller._pendingPullIntos.length > 0) {\n            const firstPendingPullInto = controller._pendingPullIntos.peek();\n            if (firstPendingPullInto.bytesFilled % firstPendingPullInto.elementSize !== 0) {\n                const e = new TypeError('Insufficient bytes to fill elements in the given buffer');\n                ReadableByteStreamControllerError(controller, e);\n                throw e;\n            }\n        }\n        ReadableByteStreamControllerClearAlgorithms(controller);\n        ReadableStreamClose(stream);\n    }\n    function ReadableByteStreamControllerEnqueue(controller, chunk) {\n        const stream = controller._controlledReadableByteStream;\n        if (controller._closeRequested || stream._state !== 'readable') {\n            return;\n        }\n        const { buffer, byteOffset, byteLength } = chunk;\n        if (IsDetachedBuffer(buffer)) {\n            throw new TypeError('chunk\\'s buffer is detached and so cannot be enqueued');\n        }\n        const transferredBuffer = TransferArrayBuffer(buffer);\n        if (controller._pendingPullIntos.length > 0) {\n            const firstPendingPullInto = controller._pendingPullIntos.peek();\n            if (IsDetachedBuffer(firstPendingPullInto.buffer)) {\n                throw new TypeError('The BYOB request\\'s buffer has been detached and so cannot be filled with an enqueued chunk');\n            }\n            ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n            firstPendingPullInto.buffer = TransferArrayBuffer(firstPendingPullInto.buffer);\n            if (firstPendingPullInto.readerType === 'none') {\n                ReadableByteStreamControllerEnqueueDetachedPullIntoToQueue(controller, firstPendingPullInto);\n            }\n        }\n        if (ReadableStreamHasDefaultReader(stream)) {\n            ReadableByteStreamControllerProcessReadRequestsUsingQueue(controller);\n            if (ReadableStreamGetNumReadRequests(stream) === 0) {\n                ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n            }\n            else {\n                if (controller._pendingPullIntos.length > 0) {\n                    ReadableByteStreamControllerShiftPendingPullInto(controller);\n                }\n                const transferredView = new Uint8Array(transferredBuffer, byteOffset, byteLength);\n                ReadableStreamFulfillReadRequest(stream, transferredView, false);\n            }\n        }\n        else if (ReadableStreamHasBYOBReader(stream)) {\n            // TODO: Ideally in this branch detaching should happen only if the buffer is not consumed fully.\n            ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n            ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\n        }\n        else {\n            ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n        }\n        ReadableByteStreamControllerCallPullIfNeeded(controller);\n    }\n    function ReadableByteStreamControllerError(controller, e) {\n        const stream = controller._controlledReadableByteStream;\n        if (stream._state !== 'readable') {\n            return;\n        }\n        ReadableByteStreamControllerClearPendingPullIntos(controller);\n        ResetQueue(controller);\n        ReadableByteStreamControllerClearAlgorithms(controller);\n        ReadableStreamError(stream, e);\n    }\n    function ReadableByteStreamControllerFillReadRequestFromQueue(controller, readRequest) {\n        const entry = controller._queue.shift();\n        controller._queueTotalSize -= entry.byteLength;\n        ReadableByteStreamControllerHandleQueueDrain(controller);\n        const view = new Uint8Array(entry.buffer, entry.byteOffset, entry.byteLength);\n        readRequest._chunkSteps(view);\n    }\n    function ReadableByteStreamControllerGetBYOBRequest(controller) {\n        if (controller._byobRequest === null && controller._pendingPullIntos.length > 0) {\n            const firstDescriptor = controller._pendingPullIntos.peek();\n            const view = new Uint8Array(firstDescriptor.buffer, firstDescriptor.byteOffset + firstDescriptor.bytesFilled, firstDescriptor.byteLength - firstDescriptor.bytesFilled);\n            const byobRequest = Object.create(ReadableStreamBYOBRequest.prototype);\n            SetUpReadableStreamBYOBRequest(byobRequest, controller, view);\n            controller._byobRequest = byobRequest;\n        }\n        return controller._byobRequest;\n    }\n    function ReadableByteStreamControllerGetDesiredSize(controller) {\n        const state = controller._controlledReadableByteStream._state;\n        if (state === 'errored') {\n            return null;\n        }\n        if (state === 'closed') {\n            return 0;\n        }\n        return controller._strategyHWM - controller._queueTotalSize;\n    }\n    function ReadableByteStreamControllerRespond(controller, bytesWritten) {\n        const firstDescriptor = controller._pendingPullIntos.peek();\n        const state = controller._controlledReadableByteStream._state;\n        if (state === 'closed') {\n            if (bytesWritten !== 0) {\n                throw new TypeError('bytesWritten must be 0 when calling respond() on a closed stream');\n            }\n        }\n        else {\n            if (bytesWritten === 0) {\n                throw new TypeError('bytesWritten must be greater than 0 when calling respond() on a readable stream');\n            }\n            if (firstDescriptor.bytesFilled + bytesWritten > firstDescriptor.byteLength) {\n                throw new RangeError('bytesWritten out of range');\n            }\n        }\n        firstDescriptor.buffer = TransferArrayBuffer(firstDescriptor.buffer);\n        ReadableByteStreamControllerRespondInternal(controller, bytesWritten);\n    }\n    function ReadableByteStreamControllerRespondWithNewView(controller, view) {\n        const firstDescriptor = controller._pendingPullIntos.peek();\n        const state = controller._controlledReadableByteStream._state;\n        if (state === 'closed') {\n            if (view.byteLength !== 0) {\n                throw new TypeError('The view\\'s length must be 0 when calling respondWithNewView() on a closed stream');\n            }\n        }\n        else {\n            if (view.byteLength === 0) {\n                throw new TypeError('The view\\'s length must be greater than 0 when calling respondWithNewView() on a readable stream');\n            }\n        }\n        if (firstDescriptor.byteOffset + firstDescriptor.bytesFilled !== view.byteOffset) {\n            throw new RangeError('The region specified by view does not match byobRequest');\n        }\n        if (firstDescriptor.bufferByteLength !== view.buffer.byteLength) {\n            throw new RangeError('The buffer of view has different capacity than byobRequest');\n        }\n        if (firstDescriptor.bytesFilled + view.byteLength > firstDescriptor.byteLength) {\n            throw new RangeError('The region specified by view is larger than byobRequest');\n        }\n        const viewByteLength = view.byteLength;\n        firstDescriptor.buffer = TransferArrayBuffer(view.buffer);\n        ReadableByteStreamControllerRespondInternal(controller, viewByteLength);\n    }\n    function SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize) {\n        controller._controlledReadableByteStream = stream;\n        controller._pullAgain = false;\n        controller._pulling = false;\n        controller._byobRequest = null;\n        // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.\n        controller._queue = controller._queueTotalSize = undefined;\n        ResetQueue(controller);\n        controller._closeRequested = false;\n        controller._started = false;\n        controller._strategyHWM = highWaterMark;\n        controller._pullAlgorithm = pullAlgorithm;\n        controller._cancelAlgorithm = cancelAlgorithm;\n        controller._autoAllocateChunkSize = autoAllocateChunkSize;\n        controller._pendingPullIntos = new SimpleQueue();\n        stream._readableStreamController = controller;\n        const startResult = startAlgorithm();\n        uponPromise(promiseResolvedWith(startResult), () => {\n            controller._started = true;\n            ReadableByteStreamControllerCallPullIfNeeded(controller);\n            return null;\n        }, r => {\n            ReadableByteStreamControllerError(controller, r);\n            return null;\n        });\n    }\n    function SetUpReadableByteStreamControllerFromUnderlyingSource(stream, underlyingByteSource, highWaterMark) {\n        const controller = Object.create(ReadableByteStreamController.prototype);\n        let startAlgorithm;\n        let pullAlgorithm;\n        let cancelAlgorithm;\n        if (underlyingByteSource.start !== undefined) {\n            startAlgorithm = () => underlyingByteSource.start(controller);\n        }\n        else {\n            startAlgorithm = () => undefined;\n        }\n        if (underlyingByteSource.pull !== undefined) {\n            pullAlgorithm = () => underlyingByteSource.pull(controller);\n        }\n        else {\n            pullAlgorithm = () => promiseResolvedWith(undefined);\n        }\n        if (underlyingByteSource.cancel !== undefined) {\n            cancelAlgorithm = reason => underlyingByteSource.cancel(reason);\n        }\n        else {\n            cancelAlgorithm = () => promiseResolvedWith(undefined);\n        }\n        const autoAllocateChunkSize = underlyingByteSource.autoAllocateChunkSize;\n        if (autoAllocateChunkSize === 0) {\n            throw new TypeError('autoAllocateChunkSize must be greater than 0');\n        }\n        SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize);\n    }\n    function SetUpReadableStreamBYOBRequest(request, controller, view) {\n        request._associatedReadableByteStreamController = controller;\n        request._view = view;\n    }\n    // Helper functions for the ReadableStreamBYOBRequest.\n    function byobRequestBrandCheckException(name) {\n        return new TypeError(`ReadableStreamBYOBRequest.prototype.${name} can only be used on a ReadableStreamBYOBRequest`);\n    }\n    // Helper functions for the ReadableByteStreamController.\n    function byteStreamControllerBrandCheckException(name) {\n        return new TypeError(`ReadableByteStreamController.prototype.${name} can only be used on a ReadableByteStreamController`);\n    }\n\n    function convertReaderOptions(options, context) {\n        assertDictionary(options, context);\n        const mode = options === null || options === void 0 ? void 0 : options.mode;\n        return {\n            mode: mode === undefined ? undefined : convertReadableStreamReaderMode(mode, `${context} has member 'mode' that`)\n        };\n    }\n    function convertReadableStreamReaderMode(mode, context) {\n        mode = `${mode}`;\n        if (mode !== 'byob') {\n            throw new TypeError(`${context} '${mode}' is not a valid enumeration value for ReadableStreamReaderMode`);\n        }\n        return mode;\n    }\n    function convertByobReadOptions(options, context) {\n        var _a;\n        assertDictionary(options, context);\n        const min = (_a = options === null || options === void 0 ? void 0 : options.min) !== null && _a !== void 0 ? _a : 1;\n        return {\n            min: convertUnsignedLongLongWithEnforceRange(min, `${context} has member 'min' that`)\n        };\n    }\n\n    // Abstract operations for the ReadableStream.\n    function AcquireReadableStreamBYOBReader(stream) {\n        return new ReadableStreamBYOBReader(stream);\n    }\n    // ReadableStream API exposed for controllers.\n    function ReadableStreamAddReadIntoRequest(stream, readIntoRequest) {\n        stream._reader._readIntoRequests.push(readIntoRequest);\n    }\n    function ReadableStreamFulfillReadIntoRequest(stream, chunk, done) {\n        const reader = stream._reader;\n        const readIntoRequest = reader._readIntoRequests.shift();\n        if (done) {\n            readIntoRequest._closeSteps(chunk);\n        }\n        else {\n            readIntoRequest._chunkSteps(chunk);\n        }\n    }\n    function ReadableStreamGetNumReadIntoRequests(stream) {\n        return stream._reader._readIntoRequests.length;\n    }\n    function ReadableStreamHasBYOBReader(stream) {\n        const reader = stream._reader;\n        if (reader === undefined) {\n            return false;\n        }\n        if (!IsReadableStreamBYOBReader(reader)) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * A BYOB reader vended by a {@link ReadableStream}.\n     *\n     * @public\n     */\n    class ReadableStreamBYOBReader {\n        constructor(stream) {\n            assertRequiredArgument(stream, 1, 'ReadableStreamBYOBReader');\n            assertReadableStream(stream, 'First parameter');\n            if (IsReadableStreamLocked(stream)) {\n                throw new TypeError('This stream has already been locked for exclusive reading by another reader');\n            }\n            if (!IsReadableByteStreamController(stream._readableStreamController)) {\n                throw new TypeError('Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte ' +\n                    'source');\n            }\n            ReadableStreamReaderGenericInitialize(this, stream);\n            this._readIntoRequests = new SimpleQueue();\n        }\n        /**\n         * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or\n         * the reader's lock is released before the stream finishes closing.\n         */\n        get closed() {\n            if (!IsReadableStreamBYOBReader(this)) {\n                return promiseRejectedWith(byobReaderBrandCheckException('closed'));\n            }\n            return this._closedPromise;\n        }\n        /**\n         * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.\n         */\n        cancel(reason = undefined) {\n            if (!IsReadableStreamBYOBReader(this)) {\n                return promiseRejectedWith(byobReaderBrandCheckException('cancel'));\n            }\n            if (this._ownerReadableStream === undefined) {\n                return promiseRejectedWith(readerLockException('cancel'));\n            }\n            return ReadableStreamReaderGenericCancel(this, reason);\n        }\n        read(view, rawOptions = {}) {\n            if (!IsReadableStreamBYOBReader(this)) {\n                return promiseRejectedWith(byobReaderBrandCheckException('read'));\n            }\n            if (!ArrayBuffer.isView(view)) {\n                return promiseRejectedWith(new TypeError('view must be an array buffer view'));\n            }\n            if (view.byteLength === 0) {\n                return promiseRejectedWith(new TypeError('view must have non-zero byteLength'));\n            }\n            if (view.buffer.byteLength === 0) {\n                return promiseRejectedWith(new TypeError(`view's buffer must have non-zero byteLength`));\n            }\n            if (IsDetachedBuffer(view.buffer)) {\n                return promiseRejectedWith(new TypeError('view\\'s buffer has been detached'));\n            }\n            let options;\n            try {\n                options = convertByobReadOptions(rawOptions, 'options');\n            }\n            catch (e) {\n                return promiseRejectedWith(e);\n            }\n            const min = options.min;\n            if (min === 0) {\n                return promiseRejectedWith(new TypeError('options.min must be greater than 0'));\n            }\n            if (!isDataView(view)) {\n                if (min > view.length) {\n                    return promiseRejectedWith(new RangeError('options.min must be less than or equal to view\\'s length'));\n                }\n            }\n            else if (min > view.byteLength) {\n                return promiseRejectedWith(new RangeError('options.min must be less than or equal to view\\'s byteLength'));\n            }\n            if (this._ownerReadableStream === undefined) {\n                return promiseRejectedWith(readerLockException('read from'));\n            }\n            let resolvePromise;\n            let rejectPromise;\n            const promise = newPromise((resolve, reject) => {\n                resolvePromise = resolve;\n                rejectPromise = reject;\n            });\n            const readIntoRequest = {\n                _chunkSteps: chunk => resolvePromise({ value: chunk, done: false }),\n                _closeSteps: chunk => resolvePromise({ value: chunk, done: true }),\n                _errorSteps: e => rejectPromise(e)\n            };\n            ReadableStreamBYOBReaderRead(this, view, min, readIntoRequest);\n            return promise;\n        }\n        /**\n         * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.\n         * If the associated stream is errored when the lock is released, the reader will appear errored in the same way\n         * from now on; otherwise, the reader will appear closed.\n         *\n         * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by\n         * the reader's {@link ReadableStreamBYOBReader.read | read()} method has not yet been settled. Attempting to\n         * do so will throw a `TypeError` and leave the reader locked to the stream.\n         */\n        releaseLock() {\n            if (!IsReadableStreamBYOBReader(this)) {\n                throw byobReaderBrandCheckException('releaseLock');\n            }\n            if (this._ownerReadableStream === undefined) {\n                return;\n            }\n            ReadableStreamBYOBReaderRelease(this);\n        }\n    }\n    Object.defineProperties(ReadableStreamBYOBReader.prototype, {\n        cancel: { enumerable: true },\n        read: { enumerable: true },\n        releaseLock: { enumerable: true },\n        closed: { enumerable: true }\n    });\n    setFunctionName(ReadableStreamBYOBReader.prototype.cancel, 'cancel');\n    setFunctionName(ReadableStreamBYOBReader.prototype.read, 'read');\n    setFunctionName(ReadableStreamBYOBReader.prototype.releaseLock, 'releaseLock');\n    if (typeof Symbol.toStringTag === 'symbol') {\n        Object.defineProperty(ReadableStreamBYOBReader.prototype, Symbol.toStringTag, {\n            value: 'ReadableStreamBYOBReader',\n            configurable: true\n        });\n    }\n    // Abstract operations for the readers.\n    function IsReadableStreamBYOBReader(x) {\n        if (!typeIsObject(x)) {\n            return false;\n        }\n        if (!Object.prototype.hasOwnProperty.call(x, '_readIntoRequests')) {\n            return false;\n        }\n        return x instanceof ReadableStreamBYOBReader;\n    }\n    function ReadableStreamBYOBReaderRead(reader, view, min, readIntoRequest) {\n        const stream = reader._ownerReadableStream;\n        stream._disturbed = true;\n        if (stream._state === 'errored') {\n            readIntoRequest._errorSteps(stream._storedError);\n        }\n        else {\n            ReadableByteStreamControllerPullInto(stream._readableStreamController, view, min, readIntoRequest);\n        }\n    }\n    function ReadableStreamBYOBReaderRelease(reader) {\n        ReadableStreamReaderGenericRelease(reader);\n        const e = new TypeError('Reader was released');\n        ReadableStreamBYOBReaderErrorReadIntoRequests(reader, e);\n    }\n    function ReadableStreamBYOBReaderErrorReadIntoRequests(reader, e) {\n        const readIntoRequests = reader._readIntoRequests;\n        reader._readIntoRequests = new SimpleQueue();\n        readIntoRequests.forEach(readIntoRequest => {\n            readIntoRequest._errorSteps(e);\n        });\n    }\n    // Helper functions for the ReadableStreamBYOBReader.\n    function byobReaderBrandCheckException(name) {\n        return new TypeError(`ReadableStreamBYOBReader.prototype.${name} can only be used on a ReadableStreamBYOBReader`);\n    }\n\n    function ExtractHighWaterMark(strategy, defaultHWM) {\n        const { highWaterMark } = strategy;\n        if (highWaterMark === undefined) {\n            return defaultHWM;\n        }\n        if (NumberIsNaN(highWaterMark) || highWaterMark < 0) {\n            throw new RangeError('Invalid highWaterMark');\n        }\n        return highWaterMark;\n    }\n    function ExtractSizeAlgorithm(strategy) {\n        const { size } = strategy;\n        if (!size) {\n            return () => 1;\n        }\n        return size;\n    }\n\n    function convertQueuingStrategy(init, context) {\n        assertDictionary(init, context);\n        const highWaterMark = init === null || init === void 0 ? void 0 : init.highWaterMark;\n        const size = init === null || init === void 0 ? void 0 : init.size;\n        return {\n            highWaterMark: highWaterMark === undefined ? undefined : convertUnrestrictedDouble(highWaterMark),\n            size: size === undefined ? undefined : convertQueuingStrategySize(size, `${context} has member 'size' that`)\n        };\n    }\n    function convertQueuingStrategySize(fn, context) {\n        assertFunction(fn, context);\n        return chunk => convertUnrestrictedDouble(fn(chunk));\n    }\n\n    function convertUnderlyingSink(original, context) {\n        assertDictionary(original, context);\n        const abort = original === null || original === void 0 ? void 0 : original.abort;\n        const close = original === null || original === void 0 ? void 0 : original.close;\n        const start = original === null || original === void 0 ? void 0 : original.start;\n        const type = original === null || original === void 0 ? void 0 : original.type;\n        const write = original === null || original === void 0 ? void 0 : original.write;\n        return {\n            abort: abort === undefined ?\n                undefined :\n                convertUnderlyingSinkAbortCallback(abort, original, `${context} has member 'abort' that`),\n            close: close === undefined ?\n                undefined :\n                convertUnderlyingSinkCloseCallback(close, original, `${context} has member 'close' that`),\n            start: start === undefined ?\n                undefined :\n                convertUnderlyingSinkStartCallback(start, original, `${context} has member 'start' that`),\n            write: write === undefined ?\n                undefined :\n                convertUnderlyingSinkWriteCallback(write, original, `${context} has member 'write' that`),\n            type\n        };\n    }\n    function convertUnderlyingSinkAbortCallback(fn, original, context) {\n        assertFunction(fn, context);\n        return (reason) => promiseCall(fn, original, [reason]);\n    }\n    function convertUnderlyingSinkCloseCallback(fn, original, context) {\n        assertFunction(fn, context);\n        return () => promiseCall(fn, original, []);\n    }\n    function convertUnderlyingSinkStartCallback(fn, original, context) {\n        assertFunction(fn, context);\n        return (controller) => reflectCall(fn, original, [controller]);\n    }\n    function convertUnderlyingSinkWriteCallback(fn, original, context) {\n        assertFunction(fn, context);\n        return (chunk, controller) => promiseCall(fn, original, [chunk, controller]);\n    }\n\n    function assertWritableStream(x, context) {\n        if (!IsWritableStream(x)) {\n            throw new TypeError(`${context} is not a WritableStream.`);\n        }\n    }\n\n    function isAbortSignal(value) {\n        if (typeof value !== 'object' || value === null) {\n            return false;\n        }\n        try {\n            return typeof value.aborted === 'boolean';\n        }\n        catch (_a) {\n            // AbortSignal.prototype.aborted throws if its brand check fails\n            return false;\n        }\n    }\n    const supportsAbortController = typeof AbortController === 'function';\n    /**\n     * Construct a new AbortController, if supported by the platform.\n     *\n     * @internal\n     */\n    function createAbortController() {\n        if (supportsAbortController) {\n            return new AbortController();\n        }\n        return undefined;\n    }\n\n    /**\n     * A writable stream represents a destination for data, into which you can write.\n     *\n     * @public\n     */\n    class WritableStream {\n        constructor(rawUnderlyingSink = {}, rawStrategy = {}) {\n            if (rawUnderlyingSink === undefined) {\n                rawUnderlyingSink = null;\n            }\n            else {\n                assertObject(rawUnderlyingSink, 'First parameter');\n            }\n            const strategy = convertQueuingStrategy(rawStrategy, 'Second parameter');\n            const underlyingSink = convertUnderlyingSink(rawUnderlyingSink, 'First parameter');\n            InitializeWritableStream(this);\n            const type = underlyingSink.type;\n            if (type !== undefined) {\n                throw new RangeError('Invalid type is specified');\n            }\n            const sizeAlgorithm = ExtractSizeAlgorithm(strategy);\n            const highWaterMark = ExtractHighWaterMark(strategy, 1);\n            SetUpWritableStreamDefaultControllerFromUnderlyingSink(this, underlyingSink, highWaterMark, sizeAlgorithm);\n        }\n        /**\n         * Returns whether or not the writable stream is locked to a writer.\n         */\n        get locked() {\n            if (!IsWritableStream(this)) {\n                throw streamBrandCheckException$2('locked');\n            }\n            return IsWritableStreamLocked(this);\n        }\n        /**\n         * Aborts the stream, signaling that the producer can no longer successfully write to the stream and it is to be\n         * immediately moved to an errored state, with any queued-up writes discarded. This will also execute any abort\n         * mechanism of the underlying sink.\n         *\n         * The returned promise will fulfill if the stream shuts down successfully, or reject if the underlying sink signaled\n         * that there was an error doing so. Additionally, it will reject with a `TypeError` (without attempting to cancel\n         * the stream) if the stream is currently locked.\n         */\n        abort(reason = undefined) {\n            if (!IsWritableStream(this)) {\n                return promiseRejectedWith(streamBrandCheckException$2('abort'));\n            }\n            if (IsWritableStreamLocked(this)) {\n                return promiseRejectedWith(new TypeError('Cannot abort a stream that already has a writer'));\n            }\n            return WritableStreamAbort(this, reason);\n        }\n        /**\n         * Closes the stream. The underlying sink will finish processing any previously-written chunks, before invoking its\n         * close behavior. During this time any further attempts to write will fail (without erroring the stream).\n         *\n         * The method returns a promise that will fulfill if all remaining chunks are successfully written and the stream\n         * successfully closes, or rejects if an error is encountered during this process. Additionally, it will reject with\n         * a `TypeError` (without attempting to cancel the stream) if the stream is currently locked.\n         */\n        close() {\n            if (!IsWritableStream(this)) {\n                return promiseRejectedWith(streamBrandCheckException$2('close'));\n            }\n            if (IsWritableStreamLocked(this)) {\n                return promiseRejectedWith(new TypeError('Cannot close a stream that already has a writer'));\n            }\n            if (WritableStreamCloseQueuedOrInFlight(this)) {\n                return promiseRejectedWith(new TypeError('Cannot close an already-closing stream'));\n            }\n            return WritableStreamClose(this);\n        }\n        /**\n         * Creates a {@link WritableStreamDefaultWriter | writer} and locks the stream to the new writer. While the stream\n         * is locked, no other writer can be acquired until this one is released.\n         *\n         * This functionality is especially useful for creating abstractions that desire the ability to write to a stream\n         * without interruption or interleaving. By getting a writer for the stream, you can ensure nobody else can write at\n         * the same time, which would cause the resulting written data to be unpredictable and probably useless.\n         */\n        getWriter() {\n            if (!IsWritableStream(this)) {\n                throw streamBrandCheckException$2('getWriter');\n            }\n            return AcquireWritableStreamDefaultWriter(this);\n        }\n    }\n    Object.defineProperties(WritableStream.prototype, {\n        abort: { enumerable: true },\n        close: { enumerable: true },\n        getWriter: { enumerable: true },\n        locked: { enumerable: true }\n    });\n    setFunctionName(WritableStream.prototype.abort, 'abort');\n    setFunctionName(WritableStream.prototype.close, 'close');\n    setFunctionName(WritableStream.prototype.getWriter, 'getWriter');\n    if (typeof Symbol.toStringTag === 'symbol') {\n        Object.defineProperty(WritableStream.prototype, Symbol.toStringTag, {\n            value: 'WritableStream',\n            configurable: true\n        });\n    }\n    // Abstract operations for the WritableStream.\n    function AcquireWritableStreamDefaultWriter(stream) {\n        return new WritableStreamDefaultWriter(stream);\n    }\n    // Throws if and only if startAlgorithm throws.\n    function CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark = 1, sizeAlgorithm = () => 1) {\n        const stream = Object.create(WritableStream.prototype);\n        InitializeWritableStream(stream);\n        const controller = Object.create(WritableStreamDefaultController.prototype);\n        SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm);\n        return stream;\n    }\n    function InitializeWritableStream(stream) {\n        stream._state = 'writable';\n        // The error that will be reported by new method calls once the state becomes errored. Only set when [[state]] is\n        // 'erroring' or 'errored'. May be set to an undefined value.\n        stream._storedError = undefined;\n        stream._writer = undefined;\n        // Initialize to undefined first because the constructor of the controller checks this\n        // variable to validate the caller.\n        stream._writableStreamController = undefined;\n        // This queue is placed here instead of the writer class in order to allow for passing a writer to the next data\n        // producer without waiting for the queued writes to finish.\n        stream._writeRequests = new SimpleQueue();\n        // Write requests are removed from _writeRequests when write() is called on the underlying sink. This prevents\n        // them from being erroneously rejected on error. If a write() call is in-flight, the request is stored here.\n        stream._inFlightWriteRequest = undefined;\n        // The promise that was returned from writer.close(). Stored here because it may be fulfilled after the writer\n        // has been detached.\n        stream._closeRequest = undefined;\n        // Close request is removed from _closeRequest when close() is called on the underlying sink. This prevents it\n        // from being erroneously rejected on error. If a close() call is in-flight, the request is stored here.\n        stream._inFlightCloseRequest = undefined;\n        // The promise that was returned from writer.abort(). This may also be fulfilled after the writer has detached.\n        stream._pendingAbortRequest = undefined;\n        // The backpressure signal set by the controller.\n        stream._backpressure = false;\n    }\n    function IsWritableStream(x) {\n        if (!typeIsObject(x)) {\n            return false;\n        }\n        if (!Object.prototype.hasOwnProperty.call(x, '_writableStreamController')) {\n            return false;\n        }\n        return x instanceof WritableStream;\n    }\n    function IsWritableStreamLocked(stream) {\n        if (stream._writer === undefined) {\n            return false;\n        }\n        return true;\n    }\n    function WritableStreamAbort(stream, reason) {\n        var _a;\n        if (stream._state === 'closed' || stream._state === 'errored') {\n            return promiseResolvedWith(undefined);\n        }\n        stream._writableStreamController._abortReason = reason;\n        (_a = stream._writableStreamController._abortController) === null || _a === void 0 ? void 0 : _a.abort(reason);\n        // TypeScript narrows the type of `stream._state` down to 'writable' | 'erroring',\n        // but it doesn't know that signaling abort runs author code that might have changed the state.\n        // Widen the type again by casting to WritableStreamState.\n        const state = stream._state;\n        if (state === 'closed' || state === 'errored') {\n            return promiseResolvedWith(undefined);\n        }\n        if (stream._pendingAbortRequest !== undefined) {\n            return stream._pendingAbortRequest._promise;\n        }\n        let wasAlreadyErroring = false;\n        if (state === 'erroring') {\n            wasAlreadyErroring = true;\n            // reason will not be used, so don't keep a reference to it.\n            reason = undefined;\n        }\n        const promise = newPromise((resolve, reject) => {\n            stream._pendingAbortRequest = {\n                _promise: undefined,\n                _resolve: resolve,\n                _reject: reject,\n                _reason: reason,\n                _wasAlreadyErroring: wasAlreadyErroring\n            };\n        });\n        stream._pendingAbortRequest._promise = promise;\n        if (!wasAlreadyErroring) {\n            WritableStreamStartErroring(stream, reason);\n        }\n        return promise;\n    }\n    function WritableStreamClose(stream) {\n        const state = stream._state;\n        if (state === 'closed' || state === 'errored') {\n            return promiseRejectedWith(new TypeError(`The stream (in ${state} state) is not in the writable state and cannot be closed`));\n        }\n        const promise = newPromise((resolve, reject) => {\n            const closeRequest = {\n                _resolve: resolve,\n                _reject: reject\n            };\n            stream._closeRequest = closeRequest;\n        });\n        const writer = stream._writer;\n        if (writer !== undefined && stream._backpressure && state === 'writable') {\n            defaultWriterReadyPromiseResolve(writer);\n        }\n        WritableStreamDefaultControllerClose(stream._writableStreamController);\n        return promise;\n    }\n    // WritableStream API exposed for controllers.\n    function WritableStreamAddWriteRequest(stream) {\n        const promise = newPromise((resolve, reject) => {\n            const writeRequest = {\n                _resolve: resolve,\n                _reject: reject\n            };\n            stream._writeRequests.push(writeRequest);\n        });\n        return promise;\n    }\n    function WritableStreamDealWithRejection(stream, error) {\n        const state = stream._state;\n        if (state === 'writable') {\n            WritableStreamStartErroring(stream, error);\n            return;\n        }\n        WritableStreamFinishErroring(stream);\n    }\n    function WritableStreamStartErroring(stream, reason) {\n        const controller = stream._writableStreamController;\n        stream._state = 'erroring';\n        stream._storedError = reason;\n        const writer = stream._writer;\n        if (writer !== undefined) {\n            WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, reason);\n        }\n        if (!WritableStreamHasOperationMarkedInFlight(stream) && controller._started) {\n            WritableStreamFinishErroring(stream);\n        }\n    }\n    function WritableStreamFinishErroring(stream) {\n        stream._state = 'errored';\n        stream._writableStreamController[ErrorSteps]();\n        const storedError = stream._storedError;\n        stream._writeRequests.forEach(writeRequest => {\n            writeRequest._reject(storedError);\n        });\n        stream._writeRequests = new SimpleQueue();\n        if (stream._pendingAbortRequest === undefined) {\n            WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n            return;\n        }\n        const abortRequest = stream._pendingAbortRequest;\n        stream._pendingAbortRequest = undefined;\n        if (abortRequest._wasAlreadyErroring) {\n            abortRequest._reject(storedError);\n            WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n            return;\n        }\n        const promise = stream._writableStreamController[AbortSteps](abortRequest._reason);\n        uponPromise(promise, () => {\n            abortRequest._resolve();\n            WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n            return null;\n        }, (reason) => {\n            abortRequest._reject(reason);\n            WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n            return null;\n        });\n    }\n    function WritableStreamFinishInFlightWrite(stream) {\n        stream._inFlightWriteRequest._resolve(undefined);\n        stream._inFlightWriteRequest = undefined;\n    }\n    function WritableStreamFinishInFlightWriteWithError(stream, error) {\n        stream._inFlightWriteRequest._reject(error);\n        stream._inFlightWriteRequest = undefined;\n        WritableStreamDealWithRejection(stream, error);\n    }\n    function WritableStreamFinishInFlightClose(stream) {\n        stream._inFlightCloseRequest._resolve(undefined);\n        stream._inFlightCloseRequest = undefined;\n        const state = stream._state;\n        if (state === 'erroring') {\n            // The error was too late to do anything, so it is ignored.\n            stream._storedError = undefined;\n            if (stream._pendingAbortRequest !== undefined) {\n                stream._pendingAbortRequest._resolve();\n                stream._pendingAbortRequest = undefined;\n            }\n        }\n        stream._state = 'closed';\n        const writer = stream._writer;\n        if (writer !== undefined) {\n            defaultWriterClosedPromiseResolve(writer);\n        }\n    }\n    function WritableStreamFinishInFlightCloseWithError(stream, error) {\n        stream._inFlightCloseRequest._reject(error);\n        stream._inFlightCloseRequest = undefined;\n        // Never execute sink abort() after sink close().\n        if (stream._pendingAbortRequest !== undefined) {\n            stream._pendingAbortRequest._reject(error);\n            stream._pendingAbortRequest = undefined;\n        }\n        WritableStreamDealWithRejection(stream, error);\n    }\n    // TODO(ricea): Fix alphabetical order.\n    function WritableStreamCloseQueuedOrInFlight(stream) {\n        if (stream._closeRequest === undefined && stream._inFlightCloseRequest === undefined) {\n            return false;\n        }\n        return true;\n    }\n    function WritableStreamHasOperationMarkedInFlight(stream) {\n        if (stream._inFlightWriteRequest === undefined && stream._inFlightCloseRequest === undefined) {\n            return false;\n        }\n        return true;\n    }\n    function WritableStreamMarkCloseRequestInFlight(stream) {\n        stream._inFlightCloseRequest = stream._closeRequest;\n        stream._closeRequest = undefined;\n    }\n    function WritableStreamMarkFirstWriteRequestInFlight(stream) {\n        stream._inFlightWriteRequest = stream._writeRequests.shift();\n    }\n    function WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream) {\n        if (stream._closeRequest !== undefined) {\n            stream._closeRequest._reject(stream._storedError);\n            stream._closeRequest = undefined;\n        }\n        const writer = stream._writer;\n        if (writer !== undefined) {\n            defaultWriterClosedPromiseReject(writer, stream._storedError);\n        }\n    }\n    function WritableStreamUpdateBackpressure(stream, backpressure) {\n        const writer = stream._writer;\n        if (writer !== undefined && backpressure !== stream._backpressure) {\n            if (backpressure) {\n                defaultWriterReadyPromiseReset(writer);\n            }\n            else {\n                defaultWriterReadyPromiseResolve(writer);\n            }\n        }\n        stream._backpressure = backpressure;\n    }\n    /**\n     * A default writer vended by a {@link WritableStream}.\n     *\n     * @public\n     */\n    class WritableStreamDefaultWriter {\n        constructor(stream) {\n            assertRequiredArgument(stream, 1, 'WritableStreamDefaultWriter');\n            assertWritableStream(stream, 'First parameter');\n            if (IsWritableStreamLocked(stream)) {\n                throw new TypeError('This stream has already been locked for exclusive writing by another writer');\n            }\n            this._ownerWritableStream = stream;\n            stream._writer = this;\n            const state = stream._state;\n            if (state === 'writable') {\n                if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._backpressure) {\n                    defaultWriterReadyPromiseInitialize(this);\n                }\n                else {\n                    defaultWriterReadyPromiseInitializeAsResolved(this);\n                }\n                defaultWriterClosedPromiseInitialize(this);\n            }\n            else if (state === 'erroring') {\n                defaultWriterReadyPromiseInitializeAsRejected(this, stream._storedError);\n                defaultWriterClosedPromiseInitialize(this);\n            }\n            else if (state === 'closed') {\n                defaultWriterReadyPromiseInitializeAsResolved(this);\n                defaultWriterClosedPromiseInitializeAsResolved(this);\n            }\n            else {\n                const storedError = stream._storedError;\n                defaultWriterReadyPromiseInitializeAsRejected(this, storedError);\n                defaultWriterClosedPromiseInitializeAsRejected(this, storedError);\n            }\n        }\n        /**\n         * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or\n         * the writer’s lock is released before the stream finishes closing.\n         */\n        get closed() {\n            if (!IsWritableStreamDefaultWriter(this)) {\n                return promiseRejectedWith(defaultWriterBrandCheckException('closed'));\n            }\n            return this._closedPromise;\n        }\n        /**\n         * Returns the desired size to fill the stream’s internal queue. It can be negative, if the queue is over-full.\n         * A producer can use this information to determine the right amount of data to write.\n         *\n         * It will be `null` if the stream cannot be successfully written to (due to either being errored, or having an abort\n         * queued up). It will return zero if the stream is closed. And the getter will throw an exception if invoked when\n         * the writer’s lock is released.\n         */\n        get desiredSize() {\n            if (!IsWritableStreamDefaultWriter(this)) {\n                throw defaultWriterBrandCheckException('desiredSize');\n            }\n            if (this._ownerWritableStream === undefined) {\n                throw defaultWriterLockException('desiredSize');\n            }\n            return WritableStreamDefaultWriterGetDesiredSize(this);\n        }\n        /**\n         * Returns a promise that will be fulfilled when the desired size to fill the stream’s internal queue transitions\n         * from non-positive to positive, signaling that it is no longer applying backpressure. Once the desired size dips\n         * back to zero or below, the getter will return a new promise that stays pending until the next transition.\n         *\n         * If the stream becomes errored or aborted, or the writer’s lock is released, the returned promise will become\n         * rejected.\n         */\n        get ready() {\n            if (!IsWritableStreamDefaultWriter(this)) {\n                return promiseRejectedWith(defaultWriterBrandCheckException('ready'));\n            }\n            return this._readyPromise;\n        }\n        /**\n         * If the reader is active, behaves the same as {@link WritableStream.abort | stream.abort(reason)}.\n         */\n        abort(reason = undefined) {\n            if (!IsWritableStreamDefaultWriter(this)) {\n                return promiseRejectedWith(defaultWriterBrandCheckException('abort'));\n            }\n            if (this._ownerWritableStream === undefined) {\n                return promiseRejectedWith(defaultWriterLockException('abort'));\n            }\n            return WritableStreamDefaultWriterAbort(this, reason);\n        }\n        /**\n         * If the reader is active, behaves the same as {@link WritableStream.close | stream.close()}.\n         */\n        close() {\n            if (!IsWritableStreamDefaultWriter(this)) {\n                return promiseRejectedWith(defaultWriterBrandCheckException('close'));\n            }\n            const stream = this._ownerWritableStream;\n            if (stream === undefined) {\n                return promiseRejectedWith(defaultWriterLockException('close'));\n            }\n            if (WritableStreamCloseQueuedOrInFlight(stream)) {\n                return promiseRejectedWith(new TypeError('Cannot close an already-closing stream'));\n            }\n            return WritableStreamDefaultWriterClose(this);\n        }\n        /**\n         * Releases the writer’s lock on the corresponding stream. After the lock is released, the writer is no longer active.\n         * If the associated stream is errored when the lock is released, the writer will appear errored in the same way from\n         * now on; otherwise, the writer will appear closed.\n         *\n         * Note that the lock can still be released even if some ongoing writes have not yet finished (i.e. even if the\n         * promises returned from previous calls to {@link WritableStreamDefaultWriter.write | write()} have not yet settled).\n         * It’s not necessary to hold the lock on the writer for the duration of the write; the lock instead simply prevents\n         * other producers from writing in an interleaved manner.\n         */\n        releaseLock() {\n            if (!IsWritableStreamDefaultWriter(this)) {\n                throw defaultWriterBrandCheckException('releaseLock');\n            }\n            const stream = this._ownerWritableStream;\n            if (stream === undefined) {\n                return;\n            }\n            WritableStreamDefaultWriterRelease(this);\n        }\n        write(chunk = undefined) {\n            if (!IsWritableStreamDefaultWriter(this)) {\n                return promiseRejectedWith(defaultWriterBrandCheckException('write'));\n            }\n            if (this._ownerWritableStream === undefined) {\n                return promiseRejectedWith(defaultWriterLockException('write to'));\n            }\n            return WritableStreamDefaultWriterWrite(this, chunk);\n        }\n    }\n    Object.defineProperties(WritableStreamDefaultWriter.prototype, {\n        abort: { enumerable: true },\n        close: { enumerable: true },\n        releaseLock: { enumerable: true },\n        write: { enumerable: true },\n        closed: { enumerable: true },\n        desiredSize: { enumerable: true },\n        ready: { enumerable: true }\n    });\n    setFunctionName(WritableStreamDefaultWriter.prototype.abort, 'abort');\n    setFunctionName(WritableStreamDefaultWriter.prototype.close, 'close');\n    setFunctionName(WritableStreamDefaultWriter.prototype.releaseLock, 'releaseLock');\n    setFunctionName(WritableStreamDefaultWriter.prototype.write, 'write');\n    if (typeof Symbol.toStringTag === 'symbol') {\n        Object.defineProperty(WritableStreamDefaultWriter.prototype, Symbol.toStringTag, {\n            value: 'WritableStreamDefaultWriter',\n            configurable: true\n        });\n    }\n    // Abstract operations for the WritableStreamDefaultWriter.\n    function IsWritableStreamDefaultWriter(x) {\n        if (!typeIsObject(x)) {\n            return false;\n        }\n        if (!Object.prototype.hasOwnProperty.call(x, '_ownerWritableStream')) {\n            return false;\n        }\n        return x instanceof WritableStreamDefaultWriter;\n    }\n    // A client of WritableStreamDefaultWriter may use these functions directly to bypass state check.\n    function WritableStreamDefaultWriterAbort(writer, reason) {\n        const stream = writer._ownerWritableStream;\n        return WritableStreamAbort(stream, reason);\n    }\n    function WritableStreamDefaultWriterClose(writer) {\n        const stream = writer._ownerWritableStream;\n        return WritableStreamClose(stream);\n    }\n    function WritableStreamDefaultWriterCloseWithErrorPropagation(writer) {\n        const stream = writer._ownerWritableStream;\n        const state = stream._state;\n        if (WritableStreamCloseQueuedOrInFlight(stream) || state === 'closed') {\n            return promiseResolvedWith(undefined);\n        }\n        if (state === 'errored') {\n            return promiseRejectedWith(stream._storedError);\n        }\n        return WritableStreamDefaultWriterClose(writer);\n    }\n    function WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, error) {\n        if (writer._closedPromiseState === 'pending') {\n            defaultWriterClosedPromiseReject(writer, error);\n        }\n        else {\n            defaultWriterClosedPromiseResetToRejected(writer, error);\n        }\n    }\n    function WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, error) {\n        if (writer._readyPromiseState === 'pending') {\n            defaultWriterReadyPromiseReject(writer, error);\n        }\n        else {\n            defaultWriterReadyPromiseResetToRejected(writer, error);\n        }\n    }\n    function WritableStreamDefaultWriterGetDesiredSize(writer) {\n        const stream = writer._ownerWritableStream;\n        const state = stream._state;\n        if (state === 'errored' || state === 'erroring') {\n            return null;\n        }\n        if (state === 'closed') {\n            return 0;\n        }\n        return WritableStreamDefaultControllerGetDesiredSize(stream._writableStreamController);\n    }\n    function WritableStreamDefaultWriterRelease(writer) {\n        const stream = writer._ownerWritableStream;\n        const releasedError = new TypeError(`Writer was released and can no longer be used to monitor the stream's closedness`);\n        WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, releasedError);\n        // The state transitions to \"errored\" before the sink abort() method runs, but the writer.closed promise is not\n        // rejected until afterwards. This means that simply testing state will not work.\n        WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, releasedError);\n        stream._writer = undefined;\n        writer._ownerWritableStream = undefined;\n    }\n    function WritableStreamDefaultWriterWrite(writer, chunk) {\n        const stream = writer._ownerWritableStream;\n        const controller = stream._writableStreamController;\n        const chunkSize = WritableStreamDefaultControllerGetChunkSize(controller, chunk);\n        if (stream !== writer._ownerWritableStream) {\n            return promiseRejectedWith(defaultWriterLockException('write to'));\n        }\n        const state = stream._state;\n        if (state === 'errored') {\n            return promiseRejectedWith(stream._storedError);\n        }\n        if (WritableStreamCloseQueuedOrInFlight(stream) || state === 'closed') {\n            return promiseRejectedWith(new TypeError('The stream is closing or closed and cannot be written to'));\n        }\n        if (state === 'erroring') {\n            return promiseRejectedWith(stream._storedError);\n        }\n        const promise = WritableStreamAddWriteRequest(stream);\n        WritableStreamDefaultControllerWrite(controller, chunk, chunkSize);\n        return promise;\n    }\n    const closeSentinel = {};\n    /**\n     * Allows control of a {@link WritableStream | writable stream}'s state and internal queue.\n     *\n     * @public\n     */\n    class WritableStreamDefaultController {\n        constructor() {\n            throw new TypeError('Illegal constructor');\n        }\n        /**\n         * The reason which was passed to `WritableStream.abort(reason)` when the stream was aborted.\n         *\n         * @deprecated\n         *  This property has been removed from the specification, see https://github.com/whatwg/streams/pull/1177.\n         *  Use {@link WritableStreamDefaultController.signal}'s `reason` instead.\n         */\n        get abortReason() {\n            if (!IsWritableStreamDefaultController(this)) {\n                throw defaultControllerBrandCheckException$2('abortReason');\n            }\n            return this._abortReason;\n        }\n        /**\n         * An `AbortSignal` that can be used to abort the pending write or close operation when the stream is aborted.\n         */\n        get signal() {\n            if (!IsWritableStreamDefaultController(this)) {\n                throw defaultControllerBrandCheckException$2('signal');\n            }\n            if (this._abortController === undefined) {\n                // Older browsers or older Node versions may not support `AbortController` or `AbortSignal`.\n                // We don't want to bundle and ship an `AbortController` polyfill together with our polyfill,\n                // so instead we only implement support for `signal` if we find a global `AbortController` constructor.\n                throw new TypeError('WritableStreamDefaultController.prototype.signal is not supported');\n            }\n            return this._abortController.signal;\n        }\n        /**\n         * Closes the controlled writable stream, making all future interactions with it fail with the given error `e`.\n         *\n         * This method is rarely used, since usually it suffices to return a rejected promise from one of the underlying\n         * sink's methods. However, it can be useful for suddenly shutting down a stream in response to an event outside the\n         * normal lifecycle of interactions with the underlying sink.\n         */\n        error(e = undefined) {\n            if (!IsWritableStreamDefaultController(this)) {\n                throw defaultControllerBrandCheckException$2('error');\n            }\n            const state = this._controlledWritableStream._state;\n            if (state !== 'writable') {\n                // The stream is closed, errored or will be soon. The sink can't do anything useful if it gets an error here, so\n                // just treat it as a no-op.\n                return;\n            }\n            WritableStreamDefaultControllerError(this, e);\n        }\n        /** @internal */\n        [AbortSteps](reason) {\n            const result = this._abortAlgorithm(reason);\n            WritableStreamDefaultControllerClearAlgorithms(this);\n            return result;\n        }\n        /** @internal */\n        [ErrorSteps]() {\n            ResetQueue(this);\n        }\n    }\n    Object.defineProperties(WritableStreamDefaultController.prototype, {\n        abortReason: { enumerable: true },\n        signal: { enumerable: true },\n        error: { enumerable: true }\n    });\n    if (typeof Symbol.toStringTag === 'symbol') {\n        Object.defineProperty(WritableStreamDefaultController.prototype, Symbol.toStringTag, {\n            value: 'WritableStreamDefaultController',\n            configurable: true\n        });\n    }\n    // Abstract operations implementing interface required by the WritableStream.\n    function IsWritableStreamDefaultController(x) {\n        if (!typeIsObject(x)) {\n            return false;\n        }\n        if (!Object.prototype.hasOwnProperty.call(x, '_controlledWritableStream')) {\n            return false;\n        }\n        return x instanceof WritableStreamDefaultController;\n    }\n    function SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm) {\n        controller._controlledWritableStream = stream;\n        stream._writableStreamController = controller;\n        // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.\n        controller._queue = undefined;\n        controller._queueTotalSize = undefined;\n        ResetQueue(controller);\n        controller._abortReason = undefined;\n        controller._abortController = createAbortController();\n        controller._started = false;\n        controller._strategySizeAlgorithm = sizeAlgorithm;\n        controller._strategyHWM = highWaterMark;\n        controller._writeAlgorithm = writeAlgorithm;\n        controller._closeAlgorithm = closeAlgorithm;\n        controller._abortAlgorithm = abortAlgorithm;\n        const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n        WritableStreamUpdateBackpressure(stream, backpressure);\n        const startResult = startAlgorithm();\n        const startPromise = promiseResolvedWith(startResult);\n        uponPromise(startPromise, () => {\n            controller._started = true;\n            WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n            return null;\n        }, r => {\n            controller._started = true;\n            WritableStreamDealWithRejection(stream, r);\n            return null;\n        });\n    }\n    function SetUpWritableStreamDefaultControllerFromUnderlyingSink(stream, underlyingSink, highWaterMark, sizeAlgorithm) {\n        const controller = Object.create(WritableStreamDefaultController.prototype);\n        let startAlgorithm;\n        let writeAlgorithm;\n        let closeAlgorithm;\n        let abortAlgorithm;\n        if (underlyingSink.start !== undefined) {\n            startAlgorithm = () => underlyingSink.start(controller);\n        }\n        else {\n            startAlgorithm = () => undefined;\n        }\n        if (underlyingSink.write !== undefined) {\n            writeAlgorithm = chunk => underlyingSink.write(chunk, controller);\n        }\n        else {\n            writeAlgorithm = () => promiseResolvedWith(undefined);\n        }\n        if (underlyingSink.close !== undefined) {\n            closeAlgorithm = () => underlyingSink.close();\n        }\n        else {\n            closeAlgorithm = () => promiseResolvedWith(undefined);\n        }\n        if (underlyingSink.abort !== undefined) {\n            abortAlgorithm = reason => underlyingSink.abort(reason);\n        }\n        else {\n            abortAlgorithm = () => promiseResolvedWith(undefined);\n        }\n        SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm);\n    }\n    // ClearAlgorithms may be called twice. Erroring the same stream in multiple ways will often result in redundant calls.\n    function WritableStreamDefaultControllerClearAlgorithms(controller) {\n        controller._writeAlgorithm = undefined;\n        controller._closeAlgorithm = undefined;\n        controller._abortAlgorithm = undefined;\n        controller._strategySizeAlgorithm = undefined;\n    }\n    function WritableStreamDefaultControllerClose(controller) {\n        EnqueueValueWithSize(controller, closeSentinel, 0);\n        WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n    }\n    function WritableStreamDefaultControllerGetChunkSize(controller, chunk) {\n        try {\n            return controller._strategySizeAlgorithm(chunk);\n        }\n        catch (chunkSizeE) {\n            WritableStreamDefaultControllerErrorIfNeeded(controller, chunkSizeE);\n            return 1;\n        }\n    }\n    function WritableStreamDefaultControllerGetDesiredSize(controller) {\n        return controller._strategyHWM - controller._queueTotalSize;\n    }\n    function WritableStreamDefaultControllerWrite(controller, chunk, chunkSize) {\n        try {\n            EnqueueValueWithSize(controller, chunk, chunkSize);\n        }\n        catch (enqueueE) {\n            WritableStreamDefaultControllerErrorIfNeeded(controller, enqueueE);\n            return;\n        }\n        const stream = controller._controlledWritableStream;\n        if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._state === 'writable') {\n            const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n            WritableStreamUpdateBackpressure(stream, backpressure);\n        }\n        WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n    }\n    // Abstract operations for the WritableStreamDefaultController.\n    function WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller) {\n        const stream = controller._controlledWritableStream;\n        if (!controller._started) {\n            return;\n        }\n        if (stream._inFlightWriteRequest !== undefined) {\n            return;\n        }\n        const state = stream._state;\n        if (state === 'erroring') {\n            WritableStreamFinishErroring(stream);\n            return;\n        }\n        if (controller._queue.length === 0) {\n            return;\n        }\n        const value = PeekQueueValue(controller);\n        if (value === closeSentinel) {\n            WritableStreamDefaultControllerProcessClose(controller);\n        }\n        else {\n            WritableStreamDefaultControllerProcessWrite(controller, value);\n        }\n    }\n    function WritableStreamDefaultControllerErrorIfNeeded(controller, error) {\n        if (controller._controlledWritableStream._state === 'writable') {\n            WritableStreamDefaultControllerError(controller, error);\n        }\n    }\n    function WritableStreamDefaultControllerProcessClose(controller) {\n        const stream = controller._controlledWritableStream;\n        WritableStreamMarkCloseRequestInFlight(stream);\n        DequeueValue(controller);\n        const sinkClosePromise = controller._closeAlgorithm();\n        WritableStreamDefaultControllerClearAlgorithms(controller);\n        uponPromise(sinkClosePromise, () => {\n            WritableStreamFinishInFlightClose(stream);\n            return null;\n        }, reason => {\n            WritableStreamFinishInFlightCloseWithError(stream, reason);\n            return null;\n        });\n    }\n    function WritableStreamDefaultControllerProcessWrite(controller, chunk) {\n        const stream = controller._controlledWritableStream;\n        WritableStreamMarkFirstWriteRequestInFlight(stream);\n        const sinkWritePromise = controller._writeAlgorithm(chunk);\n        uponPromise(sinkWritePromise, () => {\n            WritableStreamFinishInFlightWrite(stream);\n            const state = stream._state;\n            DequeueValue(controller);\n            if (!WritableStreamCloseQueuedOrInFlight(stream) && state === 'writable') {\n                const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n                WritableStreamUpdateBackpressure(stream, backpressure);\n            }\n            WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n            return null;\n        }, reason => {\n            if (stream._state === 'writable') {\n                WritableStreamDefaultControllerClearAlgorithms(controller);\n            }\n            WritableStreamFinishInFlightWriteWithError(stream, reason);\n            return null;\n        });\n    }\n    function WritableStreamDefaultControllerGetBackpressure(controller) {\n        const desiredSize = WritableStreamDefaultControllerGetDesiredSize(controller);\n        return desiredSize <= 0;\n    }\n    // A client of WritableStreamDefaultController may use these functions directly to bypass state check.\n    function WritableStreamDefaultControllerError(controller, error) {\n        const stream = controller._controlledWritableStream;\n        WritableStreamDefaultControllerClearAlgorithms(controller);\n        WritableStreamStartErroring(stream, error);\n    }\n    // Helper functions for the WritableStream.\n    function streamBrandCheckException$2(name) {\n        return new TypeError(`WritableStream.prototype.${name} can only be used on a WritableStream`);\n    }\n    // Helper functions for the WritableStreamDefaultController.\n    function defaultControllerBrandCheckException$2(name) {\n        return new TypeError(`WritableStreamDefaultController.prototype.${name} can only be used on a WritableStreamDefaultController`);\n    }\n    // Helper functions for the WritableStreamDefaultWriter.\n    function defaultWriterBrandCheckException(name) {\n        return new TypeError(`WritableStreamDefaultWriter.prototype.${name} can only be used on a WritableStreamDefaultWriter`);\n    }\n    function defaultWriterLockException(name) {\n        return new TypeError('Cannot ' + name + ' a stream using a released writer');\n    }\n    function defaultWriterClosedPromiseInitialize(writer) {\n        writer._closedPromise = newPromise((resolve, reject) => {\n            writer._closedPromise_resolve = resolve;\n            writer._closedPromise_reject = reject;\n            writer._closedPromiseState = 'pending';\n        });\n    }\n    function defaultWriterClosedPromiseInitializeAsRejected(writer, reason) {\n        defaultWriterClosedPromiseInitialize(writer);\n        defaultWriterClosedPromiseReject(writer, reason);\n    }\n    function defaultWriterClosedPromiseInitializeAsResolved(writer) {\n        defaultWriterClosedPromiseInitialize(writer);\n        defaultWriterClosedPromiseResolve(writer);\n    }\n    function defaultWriterClosedPromiseReject(writer, reason) {\n        if (writer._closedPromise_reject === undefined) {\n            return;\n        }\n        setPromiseIsHandledToTrue(writer._closedPromise);\n        writer._closedPromise_reject(reason);\n        writer._closedPromise_resolve = undefined;\n        writer._closedPromise_reject = undefined;\n        writer._closedPromiseState = 'rejected';\n    }\n    function defaultWriterClosedPromiseResetToRejected(writer, reason) {\n        defaultWriterClosedPromiseInitializeAsRejected(writer, reason);\n    }\n    function defaultWriterClosedPromiseResolve(writer) {\n        if (writer._closedPromise_resolve === undefined) {\n            return;\n        }\n        writer._closedPromise_resolve(undefined);\n        writer._closedPromise_resolve = undefined;\n        writer._closedPromise_reject = undefined;\n        writer._closedPromiseState = 'resolved';\n    }\n    function defaultWriterReadyPromiseInitialize(writer) {\n        writer._readyPromise = newPromise((resolve, reject) => {\n            writer._readyPromise_resolve = resolve;\n            writer._readyPromise_reject = reject;\n        });\n        writer._readyPromiseState = 'pending';\n    }\n    function defaultWriterReadyPromiseInitializeAsRejected(writer, reason) {\n        defaultWriterReadyPromiseInitialize(writer);\n        defaultWriterReadyPromiseReject(writer, reason);\n    }\n    function defaultWriterReadyPromiseInitializeAsResolved(writer) {\n        defaultWriterReadyPromiseInitialize(writer);\n        defaultWriterReadyPromiseResolve(writer);\n    }\n    function defaultWriterReadyPromiseReject(writer, reason) {\n        if (writer._readyPromise_reject === undefined) {\n            return;\n        }\n        setPromiseIsHandledToTrue(writer._readyPromise);\n        writer._readyPromise_reject(reason);\n        writer._readyPromise_resolve = undefined;\n        writer._readyPromise_reject = undefined;\n        writer._readyPromiseState = 'rejected';\n    }\n    function defaultWriterReadyPromiseReset(writer) {\n        defaultWriterReadyPromiseInitialize(writer);\n    }\n    function defaultWriterReadyPromiseResetToRejected(writer, reason) {\n        defaultWriterReadyPromiseInitializeAsRejected(writer, reason);\n    }\n    function defaultWriterReadyPromiseResolve(writer) {\n        if (writer._readyPromise_resolve === undefined) {\n            return;\n        }\n        writer._readyPromise_resolve(undefined);\n        writer._readyPromise_resolve = undefined;\n        writer._readyPromise_reject = undefined;\n        writer._readyPromiseState = 'fulfilled';\n    }\n\n    /// <reference lib=\"dom\" />\n    function getGlobals() {\n        if (typeof globalThis !== 'undefined') {\n            return globalThis;\n        }\n        else if (typeof self !== 'undefined') {\n            return self;\n        }\n        else if (typeof global !== 'undefined') {\n            return global;\n        }\n        return undefined;\n    }\n    const globals = getGlobals();\n\n    /// <reference types=\"node\" />\n    function isDOMExceptionConstructor(ctor) {\n        if (!(typeof ctor === 'function' || typeof ctor === 'object')) {\n            return false;\n        }\n        if (ctor.name !== 'DOMException') {\n            return false;\n        }\n        try {\n            new ctor();\n            return true;\n        }\n        catch (_a) {\n            return false;\n        }\n    }\n    /**\n     * Support:\n     * - Web browsers\n     * - Node 18 and higher (https://github.com/nodejs/node/commit/e4b1fb5e6422c1ff151234bb9de792d45dd88d87)\n     */\n    function getFromGlobal() {\n        const ctor = globals === null || globals === void 0 ? void 0 : globals.DOMException;\n        return isDOMExceptionConstructor(ctor) ? ctor : undefined;\n    }\n    /**\n     * Support:\n     * - All platforms\n     */\n    function createPolyfill() {\n        // eslint-disable-next-line @typescript-eslint/no-shadow\n        const ctor = function DOMException(message, name) {\n            this.message = message || '';\n            this.name = name || 'Error';\n            if (Error.captureStackTrace) {\n                Error.captureStackTrace(this, this.constructor);\n            }\n        };\n        setFunctionName(ctor, 'DOMException');\n        ctor.prototype = Object.create(Error.prototype);\n        Object.defineProperty(ctor.prototype, 'constructor', { value: ctor, writable: true, configurable: true });\n        return ctor;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-redeclare\n    const DOMException = getFromGlobal() || createPolyfill();\n\n    function ReadableStreamPipeTo(source, dest, preventClose, preventAbort, preventCancel, signal) {\n        const reader = AcquireReadableStreamDefaultReader(source);\n        const writer = AcquireWritableStreamDefaultWriter(dest);\n        source._disturbed = true;\n        let shuttingDown = false;\n        // This is used to keep track of the spec's requirement that we wait for ongoing writes during shutdown.\n        let currentWrite = promiseResolvedWith(undefined);\n        return newPromise((resolve, reject) => {\n            let abortAlgorithm;\n            if (signal !== undefined) {\n                abortAlgorithm = () => {\n                    const error = signal.reason !== undefined ? signal.reason : new DOMException('Aborted', 'AbortError');\n                    const actions = [];\n                    if (!preventAbort) {\n                        actions.push(() => {\n                            if (dest._state === 'writable') {\n                                return WritableStreamAbort(dest, error);\n                            }\n                            return promiseResolvedWith(undefined);\n                        });\n                    }\n                    if (!preventCancel) {\n                        actions.push(() => {\n                            if (source._state === 'readable') {\n                                return ReadableStreamCancel(source, error);\n                            }\n                            return promiseResolvedWith(undefined);\n                        });\n                    }\n                    shutdownWithAction(() => Promise.all(actions.map(action => action())), true, error);\n                };\n                if (signal.aborted) {\n                    abortAlgorithm();\n                    return;\n                }\n                signal.addEventListener('abort', abortAlgorithm);\n            }\n            // Using reader and writer, read all chunks from this and write them to dest\n            // - Backpressure must be enforced\n            // - Shutdown must stop all activity\n            function pipeLoop() {\n                return newPromise((resolveLoop, rejectLoop) => {\n                    function next(done) {\n                        if (done) {\n                            resolveLoop();\n                        }\n                        else {\n                            // Use `PerformPromiseThen` instead of `uponPromise` to avoid\n                            // adding unnecessary `.catch(rethrowAssertionErrorRejection)` handlers\n                            PerformPromiseThen(pipeStep(), next, rejectLoop);\n                        }\n                    }\n                    next(false);\n                });\n            }\n            function pipeStep() {\n                if (shuttingDown) {\n                    return promiseResolvedWith(true);\n                }\n                return PerformPromiseThen(writer._readyPromise, () => {\n                    return newPromise((resolveRead, rejectRead) => {\n                        ReadableStreamDefaultReaderRead(reader, {\n                            _chunkSteps: chunk => {\n                                currentWrite = PerformPromiseThen(WritableStreamDefaultWriterWrite(writer, chunk), undefined, noop);\n                                resolveRead(false);\n                            },\n                            _closeSteps: () => resolveRead(true),\n                            _errorSteps: rejectRead\n                        });\n                    });\n                });\n            }\n            // Errors must be propagated forward\n            isOrBecomesErrored(source, reader._closedPromise, storedError => {\n                if (!preventAbort) {\n                    shutdownWithAction(() => WritableStreamAbort(dest, storedError), true, storedError);\n                }\n                else {\n                    shutdown(true, storedError);\n                }\n                return null;\n            });\n            // Errors must be propagated backward\n            isOrBecomesErrored(dest, writer._closedPromise, storedError => {\n                if (!preventCancel) {\n                    shutdownWithAction(() => ReadableStreamCancel(source, storedError), true, storedError);\n                }\n                else {\n                    shutdown(true, storedError);\n                }\n                return null;\n            });\n            // Closing must be propagated forward\n            isOrBecomesClosed(source, reader._closedPromise, () => {\n                if (!preventClose) {\n                    shutdownWithAction(() => WritableStreamDefaultWriterCloseWithErrorPropagation(writer));\n                }\n                else {\n                    shutdown();\n                }\n                return null;\n            });\n            // Closing must be propagated backward\n            if (WritableStreamCloseQueuedOrInFlight(dest) || dest._state === 'closed') {\n                const destClosed = new TypeError('the destination writable stream closed before all data could be piped to it');\n                if (!preventCancel) {\n                    shutdownWithAction(() => ReadableStreamCancel(source, destClosed), true, destClosed);\n                }\n                else {\n                    shutdown(true, destClosed);\n                }\n            }\n            setPromiseIsHandledToTrue(pipeLoop());\n            function waitForWritesToFinish() {\n                // Another write may have started while we were waiting on this currentWrite, so we have to be sure to wait\n                // for that too.\n                const oldCurrentWrite = currentWrite;\n                return PerformPromiseThen(currentWrite, () => oldCurrentWrite !== currentWrite ? waitForWritesToFinish() : undefined);\n            }\n            function isOrBecomesErrored(stream, promise, action) {\n                if (stream._state === 'errored') {\n                    action(stream._storedError);\n                }\n                else {\n                    uponRejection(promise, action);\n                }\n            }\n            function isOrBecomesClosed(stream, promise, action) {\n                if (stream._state === 'closed') {\n                    action();\n                }\n                else {\n                    uponFulfillment(promise, action);\n                }\n            }\n            function shutdownWithAction(action, originalIsError, originalError) {\n                if (shuttingDown) {\n                    return;\n                }\n                shuttingDown = true;\n                if (dest._state === 'writable' && !WritableStreamCloseQueuedOrInFlight(dest)) {\n                    uponFulfillment(waitForWritesToFinish(), doTheRest);\n                }\n                else {\n                    doTheRest();\n                }\n                function doTheRest() {\n                    uponPromise(action(), () => finalize(originalIsError, originalError), newError => finalize(true, newError));\n                    return null;\n                }\n            }\n            function shutdown(isError, error) {\n                if (shuttingDown) {\n                    return;\n                }\n                shuttingDown = true;\n                if (dest._state === 'writable' && !WritableStreamCloseQueuedOrInFlight(dest)) {\n                    uponFulfillment(waitForWritesToFinish(), () => finalize(isError, error));\n                }\n                else {\n                    finalize(isError, error);\n                }\n            }\n            function finalize(isError, error) {\n                WritableStreamDefaultWriterRelease(writer);\n                ReadableStreamReaderGenericRelease(reader);\n                if (signal !== undefined) {\n                    signal.removeEventListener('abort', abortAlgorithm);\n                }\n                if (isError) {\n                    reject(error);\n                }\n                else {\n                    resolve(undefined);\n                }\n                return null;\n            }\n        });\n    }\n\n    /**\n     * Allows control of a {@link ReadableStream | readable stream}'s state and internal queue.\n     *\n     * @public\n     */\n    class ReadableStreamDefaultController {\n        constructor() {\n            throw new TypeError('Illegal constructor');\n        }\n        /**\n         * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is\n         * over-full. An underlying source ought to use this information to determine when and how to apply backpressure.\n         */\n        get desiredSize() {\n            if (!IsReadableStreamDefaultController(this)) {\n                throw defaultControllerBrandCheckException$1('desiredSize');\n            }\n            return ReadableStreamDefaultControllerGetDesiredSize(this);\n        }\n        /**\n         * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from\n         * the stream, but once those are read, the stream will become closed.\n         */\n        close() {\n            if (!IsReadableStreamDefaultController(this)) {\n                throw defaultControllerBrandCheckException$1('close');\n            }\n            if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {\n                throw new TypeError('The stream is not in a state that permits close');\n            }\n            ReadableStreamDefaultControllerClose(this);\n        }\n        enqueue(chunk = undefined) {\n            if (!IsReadableStreamDefaultController(this)) {\n                throw defaultControllerBrandCheckException$1('enqueue');\n            }\n            if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {\n                throw new TypeError('The stream is not in a state that permits enqueue');\n            }\n            return ReadableStreamDefaultControllerEnqueue(this, chunk);\n        }\n        /**\n         * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.\n         */\n        error(e = undefined) {\n            if (!IsReadableStreamDefaultController(this)) {\n                throw defaultControllerBrandCheckException$1('error');\n            }\n            ReadableStreamDefaultControllerError(this, e);\n        }\n        /** @internal */\n        [CancelSteps](reason) {\n            ResetQueue(this);\n            const result = this._cancelAlgorithm(reason);\n            ReadableStreamDefaultControllerClearAlgorithms(this);\n            return result;\n        }\n        /** @internal */\n        [PullSteps](readRequest) {\n            const stream = this._controlledReadableStream;\n            if (this._queue.length > 0) {\n                const chunk = DequeueValue(this);\n                if (this._closeRequested && this._queue.length === 0) {\n                    ReadableStreamDefaultControllerClearAlgorithms(this);\n                    ReadableStreamClose(stream);\n                }\n                else {\n                    ReadableStreamDefaultControllerCallPullIfNeeded(this);\n                }\n                readRequest._chunkSteps(chunk);\n            }\n            else {\n                ReadableStreamAddReadRequest(stream, readRequest);\n                ReadableStreamDefaultControllerCallPullIfNeeded(this);\n            }\n        }\n        /** @internal */\n        [ReleaseSteps]() {\n            // Do nothing.\n        }\n    }\n    Object.defineProperties(ReadableStreamDefaultController.prototype, {\n        close: { enumerable: true },\n        enqueue: { enumerable: true },\n        error: { enumerable: true },\n        desiredSize: { enumerable: true }\n    });\n    setFunctionName(ReadableStreamDefaultController.prototype.close, 'close');\n    setFunctionName(ReadableStreamDefaultController.prototype.enqueue, 'enqueue');\n    setFunctionName(ReadableStreamDefaultController.prototype.error, 'error');\n    if (typeof Symbol.toStringTag === 'symbol') {\n        Object.defineProperty(ReadableStreamDefaultController.prototype, Symbol.toStringTag, {\n            value: 'ReadableStreamDefaultController',\n            configurable: true\n        });\n    }\n    // Abstract operations for the ReadableStreamDefaultController.\n    function IsReadableStreamDefaultController(x) {\n        if (!typeIsObject(x)) {\n            return false;\n        }\n        if (!Object.prototype.hasOwnProperty.call(x, '_controlledReadableStream')) {\n            return false;\n        }\n        return x instanceof ReadableStreamDefaultController;\n    }\n    function ReadableStreamDefaultControllerCallPullIfNeeded(controller) {\n        const shouldPull = ReadableStreamDefaultControllerShouldCallPull(controller);\n        if (!shouldPull) {\n            return;\n        }\n        if (controller._pulling) {\n            controller._pullAgain = true;\n            return;\n        }\n        controller._pulling = true;\n        const pullPromise = controller._pullAlgorithm();\n        uponPromise(pullPromise, () => {\n            controller._pulling = false;\n            if (controller._pullAgain) {\n                controller._pullAgain = false;\n                ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n            }\n            return null;\n        }, e => {\n            ReadableStreamDefaultControllerError(controller, e);\n            return null;\n        });\n    }\n    function ReadableStreamDefaultControllerShouldCallPull(controller) {\n        const stream = controller._controlledReadableStream;\n        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n            return false;\n        }\n        if (!controller._started) {\n            return false;\n        }\n        if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n            return true;\n        }\n        const desiredSize = ReadableStreamDefaultControllerGetDesiredSize(controller);\n        if (desiredSize > 0) {\n            return true;\n        }\n        return false;\n    }\n    function ReadableStreamDefaultControllerClearAlgorithms(controller) {\n        controller._pullAlgorithm = undefined;\n        controller._cancelAlgorithm = undefined;\n        controller._strategySizeAlgorithm = undefined;\n    }\n    // A client of ReadableStreamDefaultController may use these functions directly to bypass state check.\n    function ReadableStreamDefaultControllerClose(controller) {\n        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n            return;\n        }\n        const stream = controller._controlledReadableStream;\n        controller._closeRequested = true;\n        if (controller._queue.length === 0) {\n            ReadableStreamDefaultControllerClearAlgorithms(controller);\n            ReadableStreamClose(stream);\n        }\n    }\n    function ReadableStreamDefaultControllerEnqueue(controller, chunk) {\n        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n            return;\n        }\n        const stream = controller._controlledReadableStream;\n        if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n            ReadableStreamFulfillReadRequest(stream, chunk, false);\n        }\n        else {\n            let chunkSize;\n            try {\n                chunkSize = controller._strategySizeAlgorithm(chunk);\n            }\n            catch (chunkSizeE) {\n                ReadableStreamDefaultControllerError(controller, chunkSizeE);\n                throw chunkSizeE;\n            }\n            try {\n                EnqueueValueWithSize(controller, chunk, chunkSize);\n            }\n            catch (enqueueE) {\n                ReadableStreamDefaultControllerError(controller, enqueueE);\n                throw enqueueE;\n            }\n        }\n        ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n    }\n    function ReadableStreamDefaultControllerError(controller, e) {\n        const stream = controller._controlledReadableStream;\n        if (stream._state !== 'readable') {\n            return;\n        }\n        ResetQueue(controller);\n        ReadableStreamDefaultControllerClearAlgorithms(controller);\n        ReadableStreamError(stream, e);\n    }\n    function ReadableStreamDefaultControllerGetDesiredSize(controller) {\n        const state = controller._controlledReadableStream._state;\n        if (state === 'errored') {\n            return null;\n        }\n        if (state === 'closed') {\n            return 0;\n        }\n        return controller._strategyHWM - controller._queueTotalSize;\n    }\n    // This is used in the implementation of TransformStream.\n    function ReadableStreamDefaultControllerHasBackpressure(controller) {\n        if (ReadableStreamDefaultControllerShouldCallPull(controller)) {\n            return false;\n        }\n        return true;\n    }\n    function ReadableStreamDefaultControllerCanCloseOrEnqueue(controller) {\n        const state = controller._controlledReadableStream._state;\n        if (!controller._closeRequested && state === 'readable') {\n            return true;\n        }\n        return false;\n    }\n    function SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm) {\n        controller._controlledReadableStream = stream;\n        controller._queue = undefined;\n        controller._queueTotalSize = undefined;\n        ResetQueue(controller);\n        controller._started = false;\n        controller._closeRequested = false;\n        controller._pullAgain = false;\n        controller._pulling = false;\n        controller._strategySizeAlgorithm = sizeAlgorithm;\n        controller._strategyHWM = highWaterMark;\n        controller._pullAlgorithm = pullAlgorithm;\n        controller._cancelAlgorithm = cancelAlgorithm;\n        stream._readableStreamController = controller;\n        const startResult = startAlgorithm();\n        uponPromise(promiseResolvedWith(startResult), () => {\n            controller._started = true;\n            ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n            return null;\n        }, r => {\n            ReadableStreamDefaultControllerError(controller, r);\n            return null;\n        });\n    }\n    function SetUpReadableStreamDefaultControllerFromUnderlyingSource(stream, underlyingSource, highWaterMark, sizeAlgorithm) {\n        const controller = Object.create(ReadableStreamDefaultController.prototype);\n        let startAlgorithm;\n        let pullAlgorithm;\n        let cancelAlgorithm;\n        if (underlyingSource.start !== undefined) {\n            startAlgorithm = () => underlyingSource.start(controller);\n        }\n        else {\n            startAlgorithm = () => undefined;\n        }\n        if (underlyingSource.pull !== undefined) {\n            pullAlgorithm = () => underlyingSource.pull(controller);\n        }\n        else {\n            pullAlgorithm = () => promiseResolvedWith(undefined);\n        }\n        if (underlyingSource.cancel !== undefined) {\n            cancelAlgorithm = reason => underlyingSource.cancel(reason);\n        }\n        else {\n            cancelAlgorithm = () => promiseResolvedWith(undefined);\n        }\n        SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm);\n    }\n    // Helper functions for the ReadableStreamDefaultController.\n    function defaultControllerBrandCheckException$1(name) {\n        return new TypeError(`ReadableStreamDefaultController.prototype.${name} can only be used on a ReadableStreamDefaultController`);\n    }\n\n    function ReadableStreamTee(stream, cloneForBranch2) {\n        if (IsReadableByteStreamController(stream._readableStreamController)) {\n            return ReadableByteStreamTee(stream);\n        }\n        return ReadableStreamDefaultTee(stream);\n    }\n    function ReadableStreamDefaultTee(stream, cloneForBranch2) {\n        const reader = AcquireReadableStreamDefaultReader(stream);\n        let reading = false;\n        let readAgain = false;\n        let canceled1 = false;\n        let canceled2 = false;\n        let reason1;\n        let reason2;\n        let branch1;\n        let branch2;\n        let resolveCancelPromise;\n        const cancelPromise = newPromise(resolve => {\n            resolveCancelPromise = resolve;\n        });\n        function pullAlgorithm() {\n            if (reading) {\n                readAgain = true;\n                return promiseResolvedWith(undefined);\n            }\n            reading = true;\n            const readRequest = {\n                _chunkSteps: chunk => {\n                    // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n                    // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n                    // successful synchronously-available reads get ahead of asynchronously-available errors.\n                    _queueMicrotask(() => {\n                        readAgain = false;\n                        const chunk1 = chunk;\n                        const chunk2 = chunk;\n                        // There is no way to access the cloning code right now in the reference implementation.\n                        // If we add one then we'll need an implementation for serializable objects.\n                        // if (!canceled2 && cloneForBranch2) {\n                        //   chunk2 = StructuredDeserialize(StructuredSerialize(chunk2));\n                        // }\n                        if (!canceled1) {\n                            ReadableStreamDefaultControllerEnqueue(branch1._readableStreamController, chunk1);\n                        }\n                        if (!canceled2) {\n                            ReadableStreamDefaultControllerEnqueue(branch2._readableStreamController, chunk2);\n                        }\n                        reading = false;\n                        if (readAgain) {\n                            pullAlgorithm();\n                        }\n                    });\n                },\n                _closeSteps: () => {\n                    reading = false;\n                    if (!canceled1) {\n                        ReadableStreamDefaultControllerClose(branch1._readableStreamController);\n                    }\n                    if (!canceled2) {\n                        ReadableStreamDefaultControllerClose(branch2._readableStreamController);\n                    }\n                    if (!canceled1 || !canceled2) {\n                        resolveCancelPromise(undefined);\n                    }\n                },\n                _errorSteps: () => {\n                    reading = false;\n                }\n            };\n            ReadableStreamDefaultReaderRead(reader, readRequest);\n            return promiseResolvedWith(undefined);\n        }\n        function cancel1Algorithm(reason) {\n            canceled1 = true;\n            reason1 = reason;\n            if (canceled2) {\n                const compositeReason = CreateArrayFromList([reason1, reason2]);\n                const cancelResult = ReadableStreamCancel(stream, compositeReason);\n                resolveCancelPromise(cancelResult);\n            }\n            return cancelPromise;\n        }\n        function cancel2Algorithm(reason) {\n            canceled2 = true;\n            reason2 = reason;\n            if (canceled1) {\n                const compositeReason = CreateArrayFromList([reason1, reason2]);\n                const cancelResult = ReadableStreamCancel(stream, compositeReason);\n                resolveCancelPromise(cancelResult);\n            }\n            return cancelPromise;\n        }\n        function startAlgorithm() {\n            // do nothing\n        }\n        branch1 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel1Algorithm);\n        branch2 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel2Algorithm);\n        uponRejection(reader._closedPromise, (r) => {\n            ReadableStreamDefaultControllerError(branch1._readableStreamController, r);\n            ReadableStreamDefaultControllerError(branch2._readableStreamController, r);\n            if (!canceled1 || !canceled2) {\n                resolveCancelPromise(undefined);\n            }\n            return null;\n        });\n        return [branch1, branch2];\n    }\n    function ReadableByteStreamTee(stream) {\n        let reader = AcquireReadableStreamDefaultReader(stream);\n        let reading = false;\n        let readAgainForBranch1 = false;\n        let readAgainForBranch2 = false;\n        let canceled1 = false;\n        let canceled2 = false;\n        let reason1;\n        let reason2;\n        let branch1;\n        let branch2;\n        let resolveCancelPromise;\n        const cancelPromise = newPromise(resolve => {\n            resolveCancelPromise = resolve;\n        });\n        function forwardReaderError(thisReader) {\n            uponRejection(thisReader._closedPromise, r => {\n                if (thisReader !== reader) {\n                    return null;\n                }\n                ReadableByteStreamControllerError(branch1._readableStreamController, r);\n                ReadableByteStreamControllerError(branch2._readableStreamController, r);\n                if (!canceled1 || !canceled2) {\n                    resolveCancelPromise(undefined);\n                }\n                return null;\n            });\n        }\n        function pullWithDefaultReader() {\n            if (IsReadableStreamBYOBReader(reader)) {\n                ReadableStreamReaderGenericRelease(reader);\n                reader = AcquireReadableStreamDefaultReader(stream);\n                forwardReaderError(reader);\n            }\n            const readRequest = {\n                _chunkSteps: chunk => {\n                    // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n                    // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n                    // successful synchronously-available reads get ahead of asynchronously-available errors.\n                    _queueMicrotask(() => {\n                        readAgainForBranch1 = false;\n                        readAgainForBranch2 = false;\n                        const chunk1 = chunk;\n                        let chunk2 = chunk;\n                        if (!canceled1 && !canceled2) {\n                            try {\n                                chunk2 = CloneAsUint8Array(chunk);\n                            }\n                            catch (cloneE) {\n                                ReadableByteStreamControllerError(branch1._readableStreamController, cloneE);\n                                ReadableByteStreamControllerError(branch2._readableStreamController, cloneE);\n                                resolveCancelPromise(ReadableStreamCancel(stream, cloneE));\n                                return;\n                            }\n                        }\n                        if (!canceled1) {\n                            ReadableByteStreamControllerEnqueue(branch1._readableStreamController, chunk1);\n                        }\n                        if (!canceled2) {\n                            ReadableByteStreamControllerEnqueue(branch2._readableStreamController, chunk2);\n                        }\n                        reading = false;\n                        if (readAgainForBranch1) {\n                            pull1Algorithm();\n                        }\n                        else if (readAgainForBranch2) {\n                            pull2Algorithm();\n                        }\n                    });\n                },\n                _closeSteps: () => {\n                    reading = false;\n                    if (!canceled1) {\n                        ReadableByteStreamControllerClose(branch1._readableStreamController);\n                    }\n                    if (!canceled2) {\n                        ReadableByteStreamControllerClose(branch2._readableStreamController);\n                    }\n                    if (branch1._readableStreamController._pendingPullIntos.length > 0) {\n                        ReadableByteStreamControllerRespond(branch1._readableStreamController, 0);\n                    }\n                    if (branch2._readableStreamController._pendingPullIntos.length > 0) {\n                        ReadableByteStreamControllerRespond(branch2._readableStreamController, 0);\n                    }\n                    if (!canceled1 || !canceled2) {\n                        resolveCancelPromise(undefined);\n                    }\n                },\n                _errorSteps: () => {\n                    reading = false;\n                }\n            };\n            ReadableStreamDefaultReaderRead(reader, readRequest);\n        }\n        function pullWithBYOBReader(view, forBranch2) {\n            if (IsReadableStreamDefaultReader(reader)) {\n                ReadableStreamReaderGenericRelease(reader);\n                reader = AcquireReadableStreamBYOBReader(stream);\n                forwardReaderError(reader);\n            }\n            const byobBranch = forBranch2 ? branch2 : branch1;\n            const otherBranch = forBranch2 ? branch1 : branch2;\n            const readIntoRequest = {\n                _chunkSteps: chunk => {\n                    // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n                    // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n                    // successful synchronously-available reads get ahead of asynchronously-available errors.\n                    _queueMicrotask(() => {\n                        readAgainForBranch1 = false;\n                        readAgainForBranch2 = false;\n                        const byobCanceled = forBranch2 ? canceled2 : canceled1;\n                        const otherCanceled = forBranch2 ? canceled1 : canceled2;\n                        if (!otherCanceled) {\n                            let clonedChunk;\n                            try {\n                                clonedChunk = CloneAsUint8Array(chunk);\n                            }\n                            catch (cloneE) {\n                                ReadableByteStreamControllerError(byobBranch._readableStreamController, cloneE);\n                                ReadableByteStreamControllerError(otherBranch._readableStreamController, cloneE);\n                                resolveCancelPromise(ReadableStreamCancel(stream, cloneE));\n                                return;\n                            }\n                            if (!byobCanceled) {\n                                ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n                            }\n                            ReadableByteStreamControllerEnqueue(otherBranch._readableStreamController, clonedChunk);\n                        }\n                        else if (!byobCanceled) {\n                            ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n                        }\n                        reading = false;\n                        if (readAgainForBranch1) {\n                            pull1Algorithm();\n                        }\n                        else if (readAgainForBranch2) {\n                            pull2Algorithm();\n                        }\n                    });\n                },\n                _closeSteps: chunk => {\n                    reading = false;\n                    const byobCanceled = forBranch2 ? canceled2 : canceled1;\n                    const otherCanceled = forBranch2 ? canceled1 : canceled2;\n                    if (!byobCanceled) {\n                        ReadableByteStreamControllerClose(byobBranch._readableStreamController);\n                    }\n                    if (!otherCanceled) {\n                        ReadableByteStreamControllerClose(otherBranch._readableStreamController);\n                    }\n                    if (chunk !== undefined) {\n                        if (!byobCanceled) {\n                            ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n                        }\n                        if (!otherCanceled && otherBranch._readableStreamController._pendingPullIntos.length > 0) {\n                            ReadableByteStreamControllerRespond(otherBranch._readableStreamController, 0);\n                        }\n                    }\n                    if (!byobCanceled || !otherCanceled) {\n                        resolveCancelPromise(undefined);\n                    }\n                },\n                _errorSteps: () => {\n                    reading = false;\n                }\n            };\n            ReadableStreamBYOBReaderRead(reader, view, 1, readIntoRequest);\n        }\n        function pull1Algorithm() {\n            if (reading) {\n                readAgainForBranch1 = true;\n                return promiseResolvedWith(undefined);\n            }\n            reading = true;\n            const byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch1._readableStreamController);\n            if (byobRequest === null) {\n                pullWithDefaultReader();\n            }\n            else {\n                pullWithBYOBReader(byobRequest._view, false);\n            }\n            return promiseResolvedWith(undefined);\n        }\n        function pull2Algorithm() {\n            if (reading) {\n                readAgainForBranch2 = true;\n                return promiseResolvedWith(undefined);\n            }\n            reading = true;\n            const byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch2._readableStreamController);\n            if (byobRequest === null) {\n                pullWithDefaultReader();\n            }\n            else {\n                pullWithBYOBReader(byobRequest._view, true);\n            }\n            return promiseResolvedWith(undefined);\n        }\n        function cancel1Algorithm(reason) {\n            canceled1 = true;\n            reason1 = reason;\n            if (canceled2) {\n                const compositeReason = CreateArrayFromList([reason1, reason2]);\n                const cancelResult = ReadableStreamCancel(stream, compositeReason);\n                resolveCancelPromise(cancelResult);\n            }\n            return cancelPromise;\n        }\n        function cancel2Algorithm(reason) {\n            canceled2 = true;\n            reason2 = reason;\n            if (canceled1) {\n                const compositeReason = CreateArrayFromList([reason1, reason2]);\n                const cancelResult = ReadableStreamCancel(stream, compositeReason);\n                resolveCancelPromise(cancelResult);\n            }\n            return cancelPromise;\n        }\n        function startAlgorithm() {\n            return;\n        }\n        branch1 = CreateReadableByteStream(startAlgorithm, pull1Algorithm, cancel1Algorithm);\n        branch2 = CreateReadableByteStream(startAlgorithm, pull2Algorithm, cancel2Algorithm);\n        forwardReaderError(reader);\n        return [branch1, branch2];\n    }\n\n    function isReadableStreamLike(stream) {\n        return typeIsObject(stream) && typeof stream.getReader !== 'undefined';\n    }\n\n    function ReadableStreamFrom(source) {\n        if (isReadableStreamLike(source)) {\n            return ReadableStreamFromDefaultReader(source.getReader());\n        }\n        return ReadableStreamFromIterable(source);\n    }\n    function ReadableStreamFromIterable(asyncIterable) {\n        let stream;\n        const iteratorRecord = GetIterator(asyncIterable, 'async');\n        const startAlgorithm = noop;\n        function pullAlgorithm() {\n            let nextResult;\n            try {\n                nextResult = IteratorNext(iteratorRecord);\n            }\n            catch (e) {\n                return promiseRejectedWith(e);\n            }\n            const nextPromise = promiseResolvedWith(nextResult);\n            return transformPromiseWith(nextPromise, iterResult => {\n                if (!typeIsObject(iterResult)) {\n                    throw new TypeError('The promise returned by the iterator.next() method must fulfill with an object');\n                }\n                const done = IteratorComplete(iterResult);\n                if (done) {\n                    ReadableStreamDefaultControllerClose(stream._readableStreamController);\n                }\n                else {\n                    const value = IteratorValue(iterResult);\n                    ReadableStreamDefaultControllerEnqueue(stream._readableStreamController, value);\n                }\n            });\n        }\n        function cancelAlgorithm(reason) {\n            const iterator = iteratorRecord.iterator;\n            let returnMethod;\n            try {\n                returnMethod = GetMethod(iterator, 'return');\n            }\n            catch (e) {\n                return promiseRejectedWith(e);\n            }\n            if (returnMethod === undefined) {\n                return promiseResolvedWith(undefined);\n            }\n            let returnResult;\n            try {\n                returnResult = reflectCall(returnMethod, iterator, [reason]);\n            }\n            catch (e) {\n                return promiseRejectedWith(e);\n            }\n            const returnPromise = promiseResolvedWith(returnResult);\n            return transformPromiseWith(returnPromise, iterResult => {\n                if (!typeIsObject(iterResult)) {\n                    throw new TypeError('The promise returned by the iterator.return() method must fulfill with an object');\n                }\n                return undefined;\n            });\n        }\n        stream = CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, 0);\n        return stream;\n    }\n    function ReadableStreamFromDefaultReader(reader) {\n        let stream;\n        const startAlgorithm = noop;\n        function pullAlgorithm() {\n            let readPromise;\n            try {\n                readPromise = reader.read();\n            }\n            catch (e) {\n                return promiseRejectedWith(e);\n            }\n            return transformPromiseWith(readPromise, readResult => {\n                if (!typeIsObject(readResult)) {\n                    throw new TypeError('The promise returned by the reader.read() method must fulfill with an object');\n                }\n                if (readResult.done) {\n                    ReadableStreamDefaultControllerClose(stream._readableStreamController);\n                }\n                else {\n                    const value = readResult.value;\n                    ReadableStreamDefaultControllerEnqueue(stream._readableStreamController, value);\n                }\n            });\n        }\n        function cancelAlgorithm(reason) {\n            try {\n                return promiseResolvedWith(reader.cancel(reason));\n            }\n            catch (e) {\n                return promiseRejectedWith(e);\n            }\n        }\n        stream = CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, 0);\n        return stream;\n    }\n\n    function convertUnderlyingDefaultOrByteSource(source, context) {\n        assertDictionary(source, context);\n        const original = source;\n        const autoAllocateChunkSize = original === null || original === void 0 ? void 0 : original.autoAllocateChunkSize;\n        const cancel = original === null || original === void 0 ? void 0 : original.cancel;\n        const pull = original === null || original === void 0 ? void 0 : original.pull;\n        const start = original === null || original === void 0 ? void 0 : original.start;\n        const type = original === null || original === void 0 ? void 0 : original.type;\n        return {\n            autoAllocateChunkSize: autoAllocateChunkSize === undefined ?\n                undefined :\n                convertUnsignedLongLongWithEnforceRange(autoAllocateChunkSize, `${context} has member 'autoAllocateChunkSize' that`),\n            cancel: cancel === undefined ?\n                undefined :\n                convertUnderlyingSourceCancelCallback(cancel, original, `${context} has member 'cancel' that`),\n            pull: pull === undefined ?\n                undefined :\n                convertUnderlyingSourcePullCallback(pull, original, `${context} has member 'pull' that`),\n            start: start === undefined ?\n                undefined :\n                convertUnderlyingSourceStartCallback(start, original, `${context} has member 'start' that`),\n            type: type === undefined ? undefined : convertReadableStreamType(type, `${context} has member 'type' that`)\n        };\n    }\n    function convertUnderlyingSourceCancelCallback(fn, original, context) {\n        assertFunction(fn, context);\n        return (reason) => promiseCall(fn, original, [reason]);\n    }\n    function convertUnderlyingSourcePullCallback(fn, original, context) {\n        assertFunction(fn, context);\n        return (controller) => promiseCall(fn, original, [controller]);\n    }\n    function convertUnderlyingSourceStartCallback(fn, original, context) {\n        assertFunction(fn, context);\n        return (controller) => reflectCall(fn, original, [controller]);\n    }\n    function convertReadableStreamType(type, context) {\n        type = `${type}`;\n        if (type !== 'bytes') {\n            throw new TypeError(`${context} '${type}' is not a valid enumeration value for ReadableStreamType`);\n        }\n        return type;\n    }\n\n    function convertIteratorOptions(options, context) {\n        assertDictionary(options, context);\n        const preventCancel = options === null || options === void 0 ? void 0 : options.preventCancel;\n        return { preventCancel: Boolean(preventCancel) };\n    }\n\n    function convertPipeOptions(options, context) {\n        assertDictionary(options, context);\n        const preventAbort = options === null || options === void 0 ? void 0 : options.preventAbort;\n        const preventCancel = options === null || options === void 0 ? void 0 : options.preventCancel;\n        const preventClose = options === null || options === void 0 ? void 0 : options.preventClose;\n        const signal = options === null || options === void 0 ? void 0 : options.signal;\n        if (signal !== undefined) {\n            assertAbortSignal(signal, `${context} has member 'signal' that`);\n        }\n        return {\n            preventAbort: Boolean(preventAbort),\n            preventCancel: Boolean(preventCancel),\n            preventClose: Boolean(preventClose),\n            signal\n        };\n    }\n    function assertAbortSignal(signal, context) {\n        if (!isAbortSignal(signal)) {\n            throw new TypeError(`${context} is not an AbortSignal.`);\n        }\n    }\n\n    function convertReadableWritablePair(pair, context) {\n        assertDictionary(pair, context);\n        const readable = pair === null || pair === void 0 ? void 0 : pair.readable;\n        assertRequiredField(readable, 'readable', 'ReadableWritablePair');\n        assertReadableStream(readable, `${context} has member 'readable' that`);\n        const writable = pair === null || pair === void 0 ? void 0 : pair.writable;\n        assertRequiredField(writable, 'writable', 'ReadableWritablePair');\n        assertWritableStream(writable, `${context} has member 'writable' that`);\n        return { readable, writable };\n    }\n\n    /**\n     * A readable stream represents a source of data, from which you can read.\n     *\n     * @public\n     */\n    class ReadableStream {\n        constructor(rawUnderlyingSource = {}, rawStrategy = {}) {\n            if (rawUnderlyingSource === undefined) {\n                rawUnderlyingSource = null;\n            }\n            else {\n                assertObject(rawUnderlyingSource, 'First parameter');\n            }\n            const strategy = convertQueuingStrategy(rawStrategy, 'Second parameter');\n            const underlyingSource = convertUnderlyingDefaultOrByteSource(rawUnderlyingSource, 'First parameter');\n            InitializeReadableStream(this);\n            if (underlyingSource.type === 'bytes') {\n                if (strategy.size !== undefined) {\n                    throw new RangeError('The strategy for a byte stream cannot have a size function');\n                }\n                const highWaterMark = ExtractHighWaterMark(strategy, 0);\n                SetUpReadableByteStreamControllerFromUnderlyingSource(this, underlyingSource, highWaterMark);\n            }\n            else {\n                const sizeAlgorithm = ExtractSizeAlgorithm(strategy);\n                const highWaterMark = ExtractHighWaterMark(strategy, 1);\n                SetUpReadableStreamDefaultControllerFromUnderlyingSource(this, underlyingSource, highWaterMark, sizeAlgorithm);\n            }\n        }\n        /**\n         * Whether or not the readable stream is locked to a {@link ReadableStreamDefaultReader | reader}.\n         */\n        get locked() {\n            if (!IsReadableStream(this)) {\n                throw streamBrandCheckException$1('locked');\n            }\n            return IsReadableStreamLocked(this);\n        }\n        /**\n         * Cancels the stream, signaling a loss of interest in the stream by a consumer.\n         *\n         * The supplied `reason` argument will be given to the underlying source's {@link UnderlyingSource.cancel | cancel()}\n         * method, which might or might not use it.\n         */\n        cancel(reason = undefined) {\n            if (!IsReadableStream(this)) {\n                return promiseRejectedWith(streamBrandCheckException$1('cancel'));\n            }\n            if (IsReadableStreamLocked(this)) {\n                return promiseRejectedWith(new TypeError('Cannot cancel a stream that already has a reader'));\n            }\n            return ReadableStreamCancel(this, reason);\n        }\n        getReader(rawOptions = undefined) {\n            if (!IsReadableStream(this)) {\n                throw streamBrandCheckException$1('getReader');\n            }\n            const options = convertReaderOptions(rawOptions, 'First parameter');\n            if (options.mode === undefined) {\n                return AcquireReadableStreamDefaultReader(this);\n            }\n            return AcquireReadableStreamBYOBReader(this);\n        }\n        pipeThrough(rawTransform, rawOptions = {}) {\n            if (!IsReadableStream(this)) {\n                throw streamBrandCheckException$1('pipeThrough');\n            }\n            assertRequiredArgument(rawTransform, 1, 'pipeThrough');\n            const transform = convertReadableWritablePair(rawTransform, 'First parameter');\n            const options = convertPipeOptions(rawOptions, 'Second parameter');\n            if (IsReadableStreamLocked(this)) {\n                throw new TypeError('ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream');\n            }\n            if (IsWritableStreamLocked(transform.writable)) {\n                throw new TypeError('ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream');\n            }\n            const promise = ReadableStreamPipeTo(this, transform.writable, options.preventClose, options.preventAbort, options.preventCancel, options.signal);\n            setPromiseIsHandledToTrue(promise);\n            return transform.readable;\n        }\n        pipeTo(destination, rawOptions = {}) {\n            if (!IsReadableStream(this)) {\n                return promiseRejectedWith(streamBrandCheckException$1('pipeTo'));\n            }\n            if (destination === undefined) {\n                return promiseRejectedWith(`Parameter 1 is required in 'pipeTo'.`);\n            }\n            if (!IsWritableStream(destination)) {\n                return promiseRejectedWith(new TypeError(`ReadableStream.prototype.pipeTo's first argument must be a WritableStream`));\n            }\n            let options;\n            try {\n                options = convertPipeOptions(rawOptions, 'Second parameter');\n            }\n            catch (e) {\n                return promiseRejectedWith(e);\n            }\n            if (IsReadableStreamLocked(this)) {\n                return promiseRejectedWith(new TypeError('ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream'));\n            }\n            if (IsWritableStreamLocked(destination)) {\n                return promiseRejectedWith(new TypeError('ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream'));\n            }\n            return ReadableStreamPipeTo(this, destination, options.preventClose, options.preventAbort, options.preventCancel, options.signal);\n        }\n        /**\n         * Tees this readable stream, returning a two-element array containing the two resulting branches as\n         * new {@link ReadableStream} instances.\n         *\n         * Teeing a stream will lock it, preventing any other consumer from acquiring a reader.\n         * To cancel the stream, cancel both of the resulting branches; a composite cancellation reason will then be\n         * propagated to the stream's underlying source.\n         *\n         * Note that the chunks seen in each branch will be the same object. If the chunks are not immutable,\n         * this could allow interference between the two branches.\n         */\n        tee() {\n            if (!IsReadableStream(this)) {\n                throw streamBrandCheckException$1('tee');\n            }\n            const branches = ReadableStreamTee(this);\n            return CreateArrayFromList(branches);\n        }\n        values(rawOptions = undefined) {\n            if (!IsReadableStream(this)) {\n                throw streamBrandCheckException$1('values');\n            }\n            const options = convertIteratorOptions(rawOptions, 'First parameter');\n            return AcquireReadableStreamAsyncIterator(this, options.preventCancel);\n        }\n        [SymbolAsyncIterator](options) {\n            // Stub implementation, overridden below\n            return this.values(options);\n        }\n        /**\n         * Creates a new ReadableStream wrapping the provided iterable or async iterable.\n         *\n         * This can be used to adapt various kinds of objects into a readable stream,\n         * such as an array, an async generator, or a Node.js readable stream.\n         */\n        static from(asyncIterable) {\n            return ReadableStreamFrom(asyncIterable);\n        }\n    }\n    Object.defineProperties(ReadableStream, {\n        from: { enumerable: true }\n    });\n    Object.defineProperties(ReadableStream.prototype, {\n        cancel: { enumerable: true },\n        getReader: { enumerable: true },\n        pipeThrough: { enumerable: true },\n        pipeTo: { enumerable: true },\n        tee: { enumerable: true },\n        values: { enumerable: true },\n        locked: { enumerable: true }\n    });\n    setFunctionName(ReadableStream.from, 'from');\n    setFunctionName(ReadableStream.prototype.cancel, 'cancel');\n    setFunctionName(ReadableStream.prototype.getReader, 'getReader');\n    setFunctionName(ReadableStream.prototype.pipeThrough, 'pipeThrough');\n    setFunctionName(ReadableStream.prototype.pipeTo, 'pipeTo');\n    setFunctionName(ReadableStream.prototype.tee, 'tee');\n    setFunctionName(ReadableStream.prototype.values, 'values');\n    if (typeof Symbol.toStringTag === 'symbol') {\n        Object.defineProperty(ReadableStream.prototype, Symbol.toStringTag, {\n            value: 'ReadableStream',\n            configurable: true\n        });\n    }\n    Object.defineProperty(ReadableStream.prototype, SymbolAsyncIterator, {\n        value: ReadableStream.prototype.values,\n        writable: true,\n        configurable: true\n    });\n    // Abstract operations for the ReadableStream.\n    // Throws if and only if startAlgorithm throws.\n    function CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark = 1, sizeAlgorithm = () => 1) {\n        const stream = Object.create(ReadableStream.prototype);\n        InitializeReadableStream(stream);\n        const controller = Object.create(ReadableStreamDefaultController.prototype);\n        SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm);\n        return stream;\n    }\n    // Throws if and only if startAlgorithm throws.\n    function CreateReadableByteStream(startAlgorithm, pullAlgorithm, cancelAlgorithm) {\n        const stream = Object.create(ReadableStream.prototype);\n        InitializeReadableStream(stream);\n        const controller = Object.create(ReadableByteStreamController.prototype);\n        SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, 0, undefined);\n        return stream;\n    }\n    function InitializeReadableStream(stream) {\n        stream._state = 'readable';\n        stream._reader = undefined;\n        stream._storedError = undefined;\n        stream._disturbed = false;\n    }\n    function IsReadableStream(x) {\n        if (!typeIsObject(x)) {\n            return false;\n        }\n        if (!Object.prototype.hasOwnProperty.call(x, '_readableStreamController')) {\n            return false;\n        }\n        return x instanceof ReadableStream;\n    }\n    function IsReadableStreamLocked(stream) {\n        if (stream._reader === undefined) {\n            return false;\n        }\n        return true;\n    }\n    // ReadableStream API exposed for controllers.\n    function ReadableStreamCancel(stream, reason) {\n        stream._disturbed = true;\n        if (stream._state === 'closed') {\n            return promiseResolvedWith(undefined);\n        }\n        if (stream._state === 'errored') {\n            return promiseRejectedWith(stream._storedError);\n        }\n        ReadableStreamClose(stream);\n        const reader = stream._reader;\n        if (reader !== undefined && IsReadableStreamBYOBReader(reader)) {\n            const readIntoRequests = reader._readIntoRequests;\n            reader._readIntoRequests = new SimpleQueue();\n            readIntoRequests.forEach(readIntoRequest => {\n                readIntoRequest._closeSteps(undefined);\n            });\n        }\n        const sourceCancelPromise = stream._readableStreamController[CancelSteps](reason);\n        return transformPromiseWith(sourceCancelPromise, noop);\n    }\n    function ReadableStreamClose(stream) {\n        stream._state = 'closed';\n        const reader = stream._reader;\n        if (reader === undefined) {\n            return;\n        }\n        defaultReaderClosedPromiseResolve(reader);\n        if (IsReadableStreamDefaultReader(reader)) {\n            const readRequests = reader._readRequests;\n            reader._readRequests = new SimpleQueue();\n            readRequests.forEach(readRequest => {\n                readRequest._closeSteps();\n            });\n        }\n    }\n    function ReadableStreamError(stream, e) {\n        stream._state = 'errored';\n        stream._storedError = e;\n        const reader = stream._reader;\n        if (reader === undefined) {\n            return;\n        }\n        defaultReaderClosedPromiseReject(reader, e);\n        if (IsReadableStreamDefaultReader(reader)) {\n            ReadableStreamDefaultReaderErrorReadRequests(reader, e);\n        }\n        else {\n            ReadableStreamBYOBReaderErrorReadIntoRequests(reader, e);\n        }\n    }\n    // Helper functions for the ReadableStream.\n    function streamBrandCheckException$1(name) {\n        return new TypeError(`ReadableStream.prototype.${name} can only be used on a ReadableStream`);\n    }\n\n    function convertQueuingStrategyInit(init, context) {\n        assertDictionary(init, context);\n        const highWaterMark = init === null || init === void 0 ? void 0 : init.highWaterMark;\n        assertRequiredField(highWaterMark, 'highWaterMark', 'QueuingStrategyInit');\n        return {\n            highWaterMark: convertUnrestrictedDouble(highWaterMark)\n        };\n    }\n\n    // The size function must not have a prototype property nor be a constructor\n    const byteLengthSizeFunction = (chunk) => {\n        return chunk.byteLength;\n    };\n    setFunctionName(byteLengthSizeFunction, 'size');\n    /**\n     * A queuing strategy that counts the number of bytes in each chunk.\n     *\n     * @public\n     */\n    class ByteLengthQueuingStrategy {\n        constructor(options) {\n            assertRequiredArgument(options, 1, 'ByteLengthQueuingStrategy');\n            options = convertQueuingStrategyInit(options, 'First parameter');\n            this._byteLengthQueuingStrategyHighWaterMark = options.highWaterMark;\n        }\n        /**\n         * Returns the high water mark provided to the constructor.\n         */\n        get highWaterMark() {\n            if (!IsByteLengthQueuingStrategy(this)) {\n                throw byteLengthBrandCheckException('highWaterMark');\n            }\n            return this._byteLengthQueuingStrategyHighWaterMark;\n        }\n        /**\n         * Measures the size of `chunk` by returning the value of its `byteLength` property.\n         */\n        get size() {\n            if (!IsByteLengthQueuingStrategy(this)) {\n                throw byteLengthBrandCheckException('size');\n            }\n            return byteLengthSizeFunction;\n        }\n    }\n    Object.defineProperties(ByteLengthQueuingStrategy.prototype, {\n        highWaterMark: { enumerable: true },\n        size: { enumerable: true }\n    });\n    if (typeof Symbol.toStringTag === 'symbol') {\n        Object.defineProperty(ByteLengthQueuingStrategy.prototype, Symbol.toStringTag, {\n            value: 'ByteLengthQueuingStrategy',\n            configurable: true\n        });\n    }\n    // Helper functions for the ByteLengthQueuingStrategy.\n    function byteLengthBrandCheckException(name) {\n        return new TypeError(`ByteLengthQueuingStrategy.prototype.${name} can only be used on a ByteLengthQueuingStrategy`);\n    }\n    function IsByteLengthQueuingStrategy(x) {\n        if (!typeIsObject(x)) {\n            return false;\n        }\n        if (!Object.prototype.hasOwnProperty.call(x, '_byteLengthQueuingStrategyHighWaterMark')) {\n            return false;\n        }\n        return x instanceof ByteLengthQueuingStrategy;\n    }\n\n    // The size function must not have a prototype property nor be a constructor\n    const countSizeFunction = () => {\n        return 1;\n    };\n    setFunctionName(countSizeFunction, 'size');\n    /**\n     * A queuing strategy that counts the number of chunks.\n     *\n     * @public\n     */\n    class CountQueuingStrategy {\n        constructor(options) {\n            assertRequiredArgument(options, 1, 'CountQueuingStrategy');\n            options = convertQueuingStrategyInit(options, 'First parameter');\n            this._countQueuingStrategyHighWaterMark = options.highWaterMark;\n        }\n        /**\n         * Returns the high water mark provided to the constructor.\n         */\n        get highWaterMark() {\n            if (!IsCountQueuingStrategy(this)) {\n                throw countBrandCheckException('highWaterMark');\n            }\n            return this._countQueuingStrategyHighWaterMark;\n        }\n        /**\n         * Measures the size of `chunk` by always returning 1.\n         * This ensures that the total queue size is a count of the number of chunks in the queue.\n         */\n        get size() {\n            if (!IsCountQueuingStrategy(this)) {\n                throw countBrandCheckException('size');\n            }\n            return countSizeFunction;\n        }\n    }\n    Object.defineProperties(CountQueuingStrategy.prototype, {\n        highWaterMark: { enumerable: true },\n        size: { enumerable: true }\n    });\n    if (typeof Symbol.toStringTag === 'symbol') {\n        Object.defineProperty(CountQueuingStrategy.prototype, Symbol.toStringTag, {\n            value: 'CountQueuingStrategy',\n            configurable: true\n        });\n    }\n    // Helper functions for the CountQueuingStrategy.\n    function countBrandCheckException(name) {\n        return new TypeError(`CountQueuingStrategy.prototype.${name} can only be used on a CountQueuingStrategy`);\n    }\n    function IsCountQueuingStrategy(x) {\n        if (!typeIsObject(x)) {\n            return false;\n        }\n        if (!Object.prototype.hasOwnProperty.call(x, '_countQueuingStrategyHighWaterMark')) {\n            return false;\n        }\n        return x instanceof CountQueuingStrategy;\n    }\n\n    function convertTransformer(original, context) {\n        assertDictionary(original, context);\n        const cancel = original === null || original === void 0 ? void 0 : original.cancel;\n        const flush = original === null || original === void 0 ? void 0 : original.flush;\n        const readableType = original === null || original === void 0 ? void 0 : original.readableType;\n        const start = original === null || original === void 0 ? void 0 : original.start;\n        const transform = original === null || original === void 0 ? void 0 : original.transform;\n        const writableType = original === null || original === void 0 ? void 0 : original.writableType;\n        return {\n            cancel: cancel === undefined ?\n                undefined :\n                convertTransformerCancelCallback(cancel, original, `${context} has member 'cancel' that`),\n            flush: flush === undefined ?\n                undefined :\n                convertTransformerFlushCallback(flush, original, `${context} has member 'flush' that`),\n            readableType,\n            start: start === undefined ?\n                undefined :\n                convertTransformerStartCallback(start, original, `${context} has member 'start' that`),\n            transform: transform === undefined ?\n                undefined :\n                convertTransformerTransformCallback(transform, original, `${context} has member 'transform' that`),\n            writableType\n        };\n    }\n    function convertTransformerFlushCallback(fn, original, context) {\n        assertFunction(fn, context);\n        return (controller) => promiseCall(fn, original, [controller]);\n    }\n    function convertTransformerStartCallback(fn, original, context) {\n        assertFunction(fn, context);\n        return (controller) => reflectCall(fn, original, [controller]);\n    }\n    function convertTransformerTransformCallback(fn, original, context) {\n        assertFunction(fn, context);\n        return (chunk, controller) => promiseCall(fn, original, [chunk, controller]);\n    }\n    function convertTransformerCancelCallback(fn, original, context) {\n        assertFunction(fn, context);\n        return (reason) => promiseCall(fn, original, [reason]);\n    }\n\n    // Class TransformStream\n    /**\n     * A transform stream consists of a pair of streams: a {@link WritableStream | writable stream},\n     * known as its writable side, and a {@link ReadableStream | readable stream}, known as its readable side.\n     * In a manner specific to the transform stream in question, writes to the writable side result in new data being\n     * made available for reading from the readable side.\n     *\n     * @public\n     */\n    class TransformStream {\n        constructor(rawTransformer = {}, rawWritableStrategy = {}, rawReadableStrategy = {}) {\n            if (rawTransformer === undefined) {\n                rawTransformer = null;\n            }\n            const writableStrategy = convertQueuingStrategy(rawWritableStrategy, 'Second parameter');\n            const readableStrategy = convertQueuingStrategy(rawReadableStrategy, 'Third parameter');\n            const transformer = convertTransformer(rawTransformer, 'First parameter');\n            if (transformer.readableType !== undefined) {\n                throw new RangeError('Invalid readableType specified');\n            }\n            if (transformer.writableType !== undefined) {\n                throw new RangeError('Invalid writableType specified');\n            }\n            const readableHighWaterMark = ExtractHighWaterMark(readableStrategy, 0);\n            const readableSizeAlgorithm = ExtractSizeAlgorithm(readableStrategy);\n            const writableHighWaterMark = ExtractHighWaterMark(writableStrategy, 1);\n            const writableSizeAlgorithm = ExtractSizeAlgorithm(writableStrategy);\n            let startPromise_resolve;\n            const startPromise = newPromise(resolve => {\n                startPromise_resolve = resolve;\n            });\n            InitializeTransformStream(this, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm);\n            SetUpTransformStreamDefaultControllerFromTransformer(this, transformer);\n            if (transformer.start !== undefined) {\n                startPromise_resolve(transformer.start(this._transformStreamController));\n            }\n            else {\n                startPromise_resolve(undefined);\n            }\n        }\n        /**\n         * The readable side of the transform stream.\n         */\n        get readable() {\n            if (!IsTransformStream(this)) {\n                throw streamBrandCheckException('readable');\n            }\n            return this._readable;\n        }\n        /**\n         * The writable side of the transform stream.\n         */\n        get writable() {\n            if (!IsTransformStream(this)) {\n                throw streamBrandCheckException('writable');\n            }\n            return this._writable;\n        }\n    }\n    Object.defineProperties(TransformStream.prototype, {\n        readable: { enumerable: true },\n        writable: { enumerable: true }\n    });\n    if (typeof Symbol.toStringTag === 'symbol') {\n        Object.defineProperty(TransformStream.prototype, Symbol.toStringTag, {\n            value: 'TransformStream',\n            configurable: true\n        });\n    }\n    function InitializeTransformStream(stream, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm) {\n        function startAlgorithm() {\n            return startPromise;\n        }\n        function writeAlgorithm(chunk) {\n            return TransformStreamDefaultSinkWriteAlgorithm(stream, chunk);\n        }\n        function abortAlgorithm(reason) {\n            return TransformStreamDefaultSinkAbortAlgorithm(stream, reason);\n        }\n        function closeAlgorithm() {\n            return TransformStreamDefaultSinkCloseAlgorithm(stream);\n        }\n        stream._writable = CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, writableHighWaterMark, writableSizeAlgorithm);\n        function pullAlgorithm() {\n            return TransformStreamDefaultSourcePullAlgorithm(stream);\n        }\n        function cancelAlgorithm(reason) {\n            return TransformStreamDefaultSourceCancelAlgorithm(stream, reason);\n        }\n        stream._readable = CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, readableHighWaterMark, readableSizeAlgorithm);\n        // The [[backpressure]] slot is set to undefined so that it can be initialised by TransformStreamSetBackpressure.\n        stream._backpressure = undefined;\n        stream._backpressureChangePromise = undefined;\n        stream._backpressureChangePromise_resolve = undefined;\n        TransformStreamSetBackpressure(stream, true);\n        stream._transformStreamController = undefined;\n    }\n    function IsTransformStream(x) {\n        if (!typeIsObject(x)) {\n            return false;\n        }\n        if (!Object.prototype.hasOwnProperty.call(x, '_transformStreamController')) {\n            return false;\n        }\n        return x instanceof TransformStream;\n    }\n    // This is a no-op if both sides are already errored.\n    function TransformStreamError(stream, e) {\n        ReadableStreamDefaultControllerError(stream._readable._readableStreamController, e);\n        TransformStreamErrorWritableAndUnblockWrite(stream, e);\n    }\n    function TransformStreamErrorWritableAndUnblockWrite(stream, e) {\n        TransformStreamDefaultControllerClearAlgorithms(stream._transformStreamController);\n        WritableStreamDefaultControllerErrorIfNeeded(stream._writable._writableStreamController, e);\n        TransformStreamUnblockWrite(stream);\n    }\n    function TransformStreamUnblockWrite(stream) {\n        if (stream._backpressure) {\n            // Pretend that pull() was called to permit any pending write() calls to complete. TransformStreamSetBackpressure()\n            // cannot be called from enqueue() or pull() once the ReadableStream is errored, so this will will be the final time\n            // _backpressure is set.\n            TransformStreamSetBackpressure(stream, false);\n        }\n    }\n    function TransformStreamSetBackpressure(stream, backpressure) {\n        // Passes also when called during construction.\n        if (stream._backpressureChangePromise !== undefined) {\n            stream._backpressureChangePromise_resolve();\n        }\n        stream._backpressureChangePromise = newPromise(resolve => {\n            stream._backpressureChangePromise_resolve = resolve;\n        });\n        stream._backpressure = backpressure;\n    }\n    // Class TransformStreamDefaultController\n    /**\n     * Allows control of the {@link ReadableStream} and {@link WritableStream} of the associated {@link TransformStream}.\n     *\n     * @public\n     */\n    class TransformStreamDefaultController {\n        constructor() {\n            throw new TypeError('Illegal constructor');\n        }\n        /**\n         * Returns the desired size to fill the readable side’s internal queue. It can be negative, if the queue is over-full.\n         */\n        get desiredSize() {\n            if (!IsTransformStreamDefaultController(this)) {\n                throw defaultControllerBrandCheckException('desiredSize');\n            }\n            const readableController = this._controlledTransformStream._readable._readableStreamController;\n            return ReadableStreamDefaultControllerGetDesiredSize(readableController);\n        }\n        enqueue(chunk = undefined) {\n            if (!IsTransformStreamDefaultController(this)) {\n                throw defaultControllerBrandCheckException('enqueue');\n            }\n            TransformStreamDefaultControllerEnqueue(this, chunk);\n        }\n        /**\n         * Errors both the readable side and the writable side of the controlled transform stream, making all future\n         * interactions with it fail with the given error `e`. Any chunks queued for transformation will be discarded.\n         */\n        error(reason = undefined) {\n            if (!IsTransformStreamDefaultController(this)) {\n                throw defaultControllerBrandCheckException('error');\n            }\n            TransformStreamDefaultControllerError(this, reason);\n        }\n        /**\n         * Closes the readable side and errors the writable side of the controlled transform stream. This is useful when the\n         * transformer only needs to consume a portion of the chunks written to the writable side.\n         */\n        terminate() {\n            if (!IsTransformStreamDefaultController(this)) {\n                throw defaultControllerBrandCheckException('terminate');\n            }\n            TransformStreamDefaultControllerTerminate(this);\n        }\n    }\n    Object.defineProperties(TransformStreamDefaultController.prototype, {\n        enqueue: { enumerable: true },\n        error: { enumerable: true },\n        terminate: { enumerable: true },\n        desiredSize: { enumerable: true }\n    });\n    setFunctionName(TransformStreamDefaultController.prototype.enqueue, 'enqueue');\n    setFunctionName(TransformStreamDefaultController.prototype.error, 'error');\n    setFunctionName(TransformStreamDefaultController.prototype.terminate, 'terminate');\n    if (typeof Symbol.toStringTag === 'symbol') {\n        Object.defineProperty(TransformStreamDefaultController.prototype, Symbol.toStringTag, {\n            value: 'TransformStreamDefaultController',\n            configurable: true\n        });\n    }\n    // Transform Stream Default Controller Abstract Operations\n    function IsTransformStreamDefaultController(x) {\n        if (!typeIsObject(x)) {\n            return false;\n        }\n        if (!Object.prototype.hasOwnProperty.call(x, '_controlledTransformStream')) {\n            return false;\n        }\n        return x instanceof TransformStreamDefaultController;\n    }\n    function SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm, cancelAlgorithm) {\n        controller._controlledTransformStream = stream;\n        stream._transformStreamController = controller;\n        controller._transformAlgorithm = transformAlgorithm;\n        controller._flushAlgorithm = flushAlgorithm;\n        controller._cancelAlgorithm = cancelAlgorithm;\n        controller._finishPromise = undefined;\n        controller._finishPromise_resolve = undefined;\n        controller._finishPromise_reject = undefined;\n    }\n    function SetUpTransformStreamDefaultControllerFromTransformer(stream, transformer) {\n        const controller = Object.create(TransformStreamDefaultController.prototype);\n        let transformAlgorithm;\n        let flushAlgorithm;\n        let cancelAlgorithm;\n        if (transformer.transform !== undefined) {\n            transformAlgorithm = chunk => transformer.transform(chunk, controller);\n        }\n        else {\n            transformAlgorithm = chunk => {\n                try {\n                    TransformStreamDefaultControllerEnqueue(controller, chunk);\n                    return promiseResolvedWith(undefined);\n                }\n                catch (transformResultE) {\n                    return promiseRejectedWith(transformResultE);\n                }\n            };\n        }\n        if (transformer.flush !== undefined) {\n            flushAlgorithm = () => transformer.flush(controller);\n        }\n        else {\n            flushAlgorithm = () => promiseResolvedWith(undefined);\n        }\n        if (transformer.cancel !== undefined) {\n            cancelAlgorithm = reason => transformer.cancel(reason);\n        }\n        else {\n            cancelAlgorithm = () => promiseResolvedWith(undefined);\n        }\n        SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm, cancelAlgorithm);\n    }\n    function TransformStreamDefaultControllerClearAlgorithms(controller) {\n        controller._transformAlgorithm = undefined;\n        controller._flushAlgorithm = undefined;\n        controller._cancelAlgorithm = undefined;\n    }\n    function TransformStreamDefaultControllerEnqueue(controller, chunk) {\n        const stream = controller._controlledTransformStream;\n        const readableController = stream._readable._readableStreamController;\n        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(readableController)) {\n            throw new TypeError('Readable side is not in a state that permits enqueue');\n        }\n        // We throttle transform invocations based on the backpressure of the ReadableStream, but we still\n        // accept TransformStreamDefaultControllerEnqueue() calls.\n        try {\n            ReadableStreamDefaultControllerEnqueue(readableController, chunk);\n        }\n        catch (e) {\n            // This happens when readableStrategy.size() throws.\n            TransformStreamErrorWritableAndUnblockWrite(stream, e);\n            throw stream._readable._storedError;\n        }\n        const backpressure = ReadableStreamDefaultControllerHasBackpressure(readableController);\n        if (backpressure !== stream._backpressure) {\n            TransformStreamSetBackpressure(stream, true);\n        }\n    }\n    function TransformStreamDefaultControllerError(controller, e) {\n        TransformStreamError(controller._controlledTransformStream, e);\n    }\n    function TransformStreamDefaultControllerPerformTransform(controller, chunk) {\n        const transformPromise = controller._transformAlgorithm(chunk);\n        return transformPromiseWith(transformPromise, undefined, r => {\n            TransformStreamError(controller._controlledTransformStream, r);\n            throw r;\n        });\n    }\n    function TransformStreamDefaultControllerTerminate(controller) {\n        const stream = controller._controlledTransformStream;\n        const readableController = stream._readable._readableStreamController;\n        ReadableStreamDefaultControllerClose(readableController);\n        const error = new TypeError('TransformStream terminated');\n        TransformStreamErrorWritableAndUnblockWrite(stream, error);\n    }\n    // TransformStreamDefaultSink Algorithms\n    function TransformStreamDefaultSinkWriteAlgorithm(stream, chunk) {\n        const controller = stream._transformStreamController;\n        if (stream._backpressure) {\n            const backpressureChangePromise = stream._backpressureChangePromise;\n            return transformPromiseWith(backpressureChangePromise, () => {\n                const writable = stream._writable;\n                const state = writable._state;\n                if (state === 'erroring') {\n                    throw writable._storedError;\n                }\n                return TransformStreamDefaultControllerPerformTransform(controller, chunk);\n            });\n        }\n        return TransformStreamDefaultControllerPerformTransform(controller, chunk);\n    }\n    function TransformStreamDefaultSinkAbortAlgorithm(stream, reason) {\n        const controller = stream._transformStreamController;\n        if (controller._finishPromise !== undefined) {\n            return controller._finishPromise;\n        }\n        // stream._readable cannot change after construction, so caching it across a call to user code is safe.\n        const readable = stream._readable;\n        // Assign the _finishPromise now so that if _cancelAlgorithm calls readable.cancel() internally,\n        // we don't run the _cancelAlgorithm again.\n        controller._finishPromise = newPromise((resolve, reject) => {\n            controller._finishPromise_resolve = resolve;\n            controller._finishPromise_reject = reject;\n        });\n        const cancelPromise = controller._cancelAlgorithm(reason);\n        TransformStreamDefaultControllerClearAlgorithms(controller);\n        uponPromise(cancelPromise, () => {\n            if (readable._state === 'errored') {\n                defaultControllerFinishPromiseReject(controller, readable._storedError);\n            }\n            else {\n                ReadableStreamDefaultControllerError(readable._readableStreamController, reason);\n                defaultControllerFinishPromiseResolve(controller);\n            }\n            return null;\n        }, r => {\n            ReadableStreamDefaultControllerError(readable._readableStreamController, r);\n            defaultControllerFinishPromiseReject(controller, r);\n            return null;\n        });\n        return controller._finishPromise;\n    }\n    function TransformStreamDefaultSinkCloseAlgorithm(stream) {\n        const controller = stream._transformStreamController;\n        if (controller._finishPromise !== undefined) {\n            return controller._finishPromise;\n        }\n        // stream._readable cannot change after construction, so caching it across a call to user code is safe.\n        const readable = stream._readable;\n        // Assign the _finishPromise now so that if _flushAlgorithm calls readable.cancel() internally,\n        // we don't also run the _cancelAlgorithm.\n        controller._finishPromise = newPromise((resolve, reject) => {\n            controller._finishPromise_resolve = resolve;\n            controller._finishPromise_reject = reject;\n        });\n        const flushPromise = controller._flushAlgorithm();\n        TransformStreamDefaultControllerClearAlgorithms(controller);\n        uponPromise(flushPromise, () => {\n            if (readable._state === 'errored') {\n                defaultControllerFinishPromiseReject(controller, readable._storedError);\n            }\n            else {\n                ReadableStreamDefaultControllerClose(readable._readableStreamController);\n                defaultControllerFinishPromiseResolve(controller);\n            }\n            return null;\n        }, r => {\n            ReadableStreamDefaultControllerError(readable._readableStreamController, r);\n            defaultControllerFinishPromiseReject(controller, r);\n            return null;\n        });\n        return controller._finishPromise;\n    }\n    // TransformStreamDefaultSource Algorithms\n    function TransformStreamDefaultSourcePullAlgorithm(stream) {\n        // Invariant. Enforced by the promises returned by start() and pull().\n        TransformStreamSetBackpressure(stream, false);\n        // Prevent the next pull() call until there is backpressure.\n        return stream._backpressureChangePromise;\n    }\n    function TransformStreamDefaultSourceCancelAlgorithm(stream, reason) {\n        const controller = stream._transformStreamController;\n        if (controller._finishPromise !== undefined) {\n            return controller._finishPromise;\n        }\n        // stream._writable cannot change after construction, so caching it across a call to user code is safe.\n        const writable = stream._writable;\n        // Assign the _finishPromise now so that if _flushAlgorithm calls writable.abort() or\n        // writable.cancel() internally, we don't run the _cancelAlgorithm again, or also run the\n        // _flushAlgorithm.\n        controller._finishPromise = newPromise((resolve, reject) => {\n            controller._finishPromise_resolve = resolve;\n            controller._finishPromise_reject = reject;\n        });\n        const cancelPromise = controller._cancelAlgorithm(reason);\n        TransformStreamDefaultControllerClearAlgorithms(controller);\n        uponPromise(cancelPromise, () => {\n            if (writable._state === 'errored') {\n                defaultControllerFinishPromiseReject(controller, writable._storedError);\n            }\n            else {\n                WritableStreamDefaultControllerErrorIfNeeded(writable._writableStreamController, reason);\n                TransformStreamUnblockWrite(stream);\n                defaultControllerFinishPromiseResolve(controller);\n            }\n            return null;\n        }, r => {\n            WritableStreamDefaultControllerErrorIfNeeded(writable._writableStreamController, r);\n            TransformStreamUnblockWrite(stream);\n            defaultControllerFinishPromiseReject(controller, r);\n            return null;\n        });\n        return controller._finishPromise;\n    }\n    // Helper functions for the TransformStreamDefaultController.\n    function defaultControllerBrandCheckException(name) {\n        return new TypeError(`TransformStreamDefaultController.prototype.${name} can only be used on a TransformStreamDefaultController`);\n    }\n    function defaultControllerFinishPromiseResolve(controller) {\n        if (controller._finishPromise_resolve === undefined) {\n            return;\n        }\n        controller._finishPromise_resolve();\n        controller._finishPromise_resolve = undefined;\n        controller._finishPromise_reject = undefined;\n    }\n    function defaultControllerFinishPromiseReject(controller, reason) {\n        if (controller._finishPromise_reject === undefined) {\n            return;\n        }\n        setPromiseIsHandledToTrue(controller._finishPromise);\n        controller._finishPromise_reject(reason);\n        controller._finishPromise_resolve = undefined;\n        controller._finishPromise_reject = undefined;\n    }\n    // Helper functions for the TransformStream.\n    function streamBrandCheckException(name) {\n        return new TypeError(`TransformStream.prototype.${name} can only be used on a TransformStream`);\n    }\n\n    exports.ByteLengthQueuingStrategy = ByteLengthQueuingStrategy;\n    exports.CountQueuingStrategy = CountQueuingStrategy;\n    exports.ReadableByteStreamController = ReadableByteStreamController;\n    exports.ReadableStream = ReadableStream;\n    exports.ReadableStreamBYOBReader = ReadableStreamBYOBReader;\n    exports.ReadableStreamBYOBRequest = ReadableStreamBYOBRequest;\n    exports.ReadableStreamDefaultController = ReadableStreamDefaultController;\n    exports.ReadableStreamDefaultReader = ReadableStreamDefaultReader;\n    exports.TransformStream = TransformStream;\n    exports.TransformStreamDefaultController = TransformStreamDefaultController;\n    exports.WritableStream = WritableStream;\n    exports.WritableStreamDefaultController = WritableStreamDefaultController;\n    exports.WritableStreamDefaultWriter = WritableStreamDefaultWriter;\n\n}));\n//# sourceMappingURL=ponyfill.es2018.js.map\n","/*! node-domexception. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */\n\nif (!globalThis.DOMException) {\n  try {\n    const { MessageChannel } = require('worker_threads'),\n    port = new MessageChannel().port1,\n    ab = new ArrayBuffer()\n    port.postMessage(ab, [ab, ab])\n  } catch (err) {\n    err.constructor.name === 'DOMException' && (\n      globalThis.DOMException = err.constructor\n    )\n  }\n}\n\nmodule.exports = globalThis.DOMException\n","import Blob from './index.js'\n\nconst _File = class File extends Blob {\n  #lastModified = 0\n  #name = ''\n\n  /**\n   * @param {*[]} fileBits\n   * @param {string} fileName\n   * @param {{lastModified?: number, type?: string}} options\n   */// @ts-ignore\n  constructor (fileBits, fileName, options = {}) {\n    if (arguments.length < 2) {\n      throw new TypeError(`Failed to construct 'File': 2 arguments required, but only ${arguments.length} present.`)\n    }\n    super(fileBits, options)\n\n    if (options === null) options = {}\n\n    // Simulate WebIDL type casting for NaN value in lastModified option.\n    const lastModified = options.lastModified === undefined ? Date.now() : Number(options.lastModified)\n    if (!Number.isNaN(lastModified)) {\n      this.#lastModified = lastModified\n    }\n\n    this.#name = String(fileName)\n  }\n\n  get name () {\n    return this.#name\n  }\n\n  get lastModified () {\n    return this.#lastModified\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'File'\n  }\n\n  static [Symbol.hasInstance] (object) {\n    return !!object && object instanceof Blob &&\n      /^(File)$/.test(object[Symbol.toStringTag])\n  }\n}\n\n/** @type {typeof globalThis.File} */// @ts-ignore\nexport const File = _File\nexport default File\n","/**\n * Returns a `Buffer` instance from the given data URI `uri`.\n *\n * @param {String} uri Data URI to turn into a Buffer instance\n * @returns {Buffer} Buffer instance from Data URI\n * @api public\n */\nexport function dataUriToBuffer(uri) {\n    if (!/^data:/i.test(uri)) {\n        throw new TypeError('`uri` does not appear to be a Data URI (must begin with \"data:\")');\n    }\n    // strip newlines\n    uri = uri.replace(/\\r?\\n/g, '');\n    // split the URI up into the \"metadata\" and the \"data\" portions\n    const firstComma = uri.indexOf(',');\n    if (firstComma === -1 || firstComma <= 4) {\n        throw new TypeError('malformed data: URI');\n    }\n    // remove the \"data:\" scheme and parse the metadata\n    const meta = uri.substring(5, firstComma).split(';');\n    let charset = '';\n    let base64 = false;\n    const type = meta[0] || 'text/plain';\n    let typeFull = type;\n    for (let i = 1; i < meta.length; i++) {\n        if (meta[i] === 'base64') {\n            base64 = true;\n        }\n        else if (meta[i]) {\n            typeFull += `;${meta[i]}`;\n            if (meta[i].indexOf('charset=') === 0) {\n                charset = meta[i].substring(8);\n            }\n        }\n    }\n    // defaults to US-ASCII only if type is not provided\n    if (!meta[0] && !charset.length) {\n        typeFull += ';charset=US-ASCII';\n        charset = 'US-ASCII';\n    }\n    // get the encoded data portion and decode URI-encoded chars\n    const encoding = base64 ? 'base64' : 'ascii';\n    const data = unescape(uri.substring(firstComma + 1));\n    const buffer = Buffer.from(data, encoding);\n    // set `.type` and `.typeFull` properties to MIME type\n    buffer.type = type;\n    buffer.typeFull = typeFull;\n    // set the `.charset` property\n    buffer.charset = charset;\n    return buffer;\n}\nexport default dataUriToBuffer;\n//# sourceMappingURL=index.js.map","export class FetchBaseError extends Error {\n\tconstructor(message, type) {\n\t\tsuper(message);\n\t\t// Hide custom error implementation details from end-users\n\t\tError.captureStackTrace(this, this.constructor);\n\n\t\tthis.type = type;\n\t}\n\n\tget name() {\n\t\treturn this.constructor.name;\n\t}\n\n\tget [Symbol.toStringTag]() {\n\t\treturn this.constructor.name;\n\t}\n}\n","\nimport {FetchBaseError} from './base.js';\n\n/**\n * @typedef {{ address?: string, code: string, dest?: string, errno: number, info?: object, message: string, path?: string, port?: number, syscall: string}} SystemError\n*/\n\n/**\n * FetchError interface for operational errors\n */\nexport class FetchError extends FetchBaseError {\n\t/**\n\t * @param  {string} message -      Error message for human\n\t * @param  {string} [type] -        Error type for machine\n\t * @param  {SystemError} [systemError] - For Node.js system error\n\t */\n\tconstructor(message, type, systemError) {\n\t\tsuper(message, type);\n\t\t// When err.type is `system`, err.erroredSysCall contains system error and err.code contains system error code\n\t\tif (systemError) {\n\t\t\t// eslint-disable-next-line no-multi-assign\n\t\t\tthis.code = this.errno = systemError.code;\n\t\t\tthis.erroredSysCall = systemError.syscall;\n\t\t}\n\t}\n}\n","/**\n * Is.js\n *\n * Object type checks.\n */\n\nconst NAME = Symbol.toStringTag;\n\n/**\n * Check if `obj` is a URLSearchParams object\n * ref: https://github.com/node-fetch/node-fetch/issues/296#issuecomment-307598143\n * @param {*} object - Object to check for\n * @return {boolean}\n */\nexport const isURLSearchParameters = object => {\n\treturn (\n\t\ttypeof object === 'object' &&\n\t\ttypeof object.append === 'function' &&\n\t\ttypeof object.delete === 'function' &&\n\t\ttypeof object.get === 'function' &&\n\t\ttypeof object.getAll === 'function' &&\n\t\ttypeof object.has === 'function' &&\n\t\ttypeof object.set === 'function' &&\n\t\ttypeof object.sort === 'function' &&\n\t\tobject[NAME] === 'URLSearchParams'\n\t);\n};\n\n/**\n * Check if `object` is a W3C `Blob` object (which `File` inherits from)\n * @param {*} object - Object to check for\n * @return {boolean}\n */\nexport const isBlob = object => {\n\treturn (\n\t\tobject &&\n\t\ttypeof object === 'object' &&\n\t\ttypeof object.arrayBuffer === 'function' &&\n\t\ttypeof object.type === 'string' &&\n\t\ttypeof object.stream === 'function' &&\n\t\ttypeof object.constructor === 'function' &&\n\t\t/^(Blob|File)$/.test(object[NAME])\n\t);\n};\n\n/**\n * Check if `obj` is an instance of AbortSignal.\n * @param {*} object - Object to check for\n * @return {boolean}\n */\nexport const isAbortSignal = object => {\n\treturn (\n\t\ttypeof object === 'object' && (\n\t\t\tobject[NAME] === 'AbortSignal' ||\n\t\t\tobject[NAME] === 'EventTarget'\n\t\t)\n\t);\n};\n\n/**\n * isDomainOrSubdomain reports whether sub is a subdomain (or exact match) of\n * the parent domain.\n *\n * Both domains must already be in canonical form.\n * @param {string|URL} original\n * @param {string|URL} destination\n */\nexport const isDomainOrSubdomain = (destination, original) => {\n\tconst orig = new URL(original).hostname;\n\tconst dest = new URL(destination).hostname;\n\n\treturn orig === dest || orig.endsWith(`.${dest}`);\n};\n\n/**\n * isSameProtocol reports whether the two provided URLs use the same protocol.\n *\n * Both domains must already be in canonical form.\n * @param {string|URL} original\n * @param {string|URL} destination\n */\nexport const isSameProtocol = (destination, original) => {\n\tconst orig = new URL(original).protocol;\n\tconst dest = new URL(destination).protocol;\n\n\treturn orig === dest;\n};\n","\n/**\n * Body.js\n *\n * Body interface provides common methods for Request and Response\n */\n\nimport Stream, {PassThrough} from 'node:stream';\nimport {types, deprecate, promisify} from 'node:util';\nimport {Buffer} from 'node:buffer';\n\nimport Blob from 'fetch-blob';\nimport {FormData, formDataToBlob} from 'formdata-polyfill/esm.min.js';\n\nimport {FetchError} from './errors/fetch-error.js';\nimport {FetchBaseError} from './errors/base.js';\nimport {isBlob, isURLSearchParameters} from './utils/is.js';\n\nconst pipeline = promisify(Stream.pipeline);\nconst INTERNALS = Symbol('Body internals');\n\n/**\n * Body mixin\n *\n * Ref: https://fetch.spec.whatwg.org/#body\n *\n * @param   Stream  body  Readable stream\n * @param   Object  opts  Response options\n * @return  Void\n */\nexport default class Body {\n\tconstructor(body, {\n\t\tsize = 0\n\t} = {}) {\n\t\tlet boundary = null;\n\n\t\tif (body === null) {\n\t\t\t// Body is undefined or null\n\t\t\tbody = null;\n\t\t} else if (isURLSearchParameters(body)) {\n\t\t\t// Body is a URLSearchParams\n\t\t\tbody = Buffer.from(body.toString());\n\t\t} else if (isBlob(body)) {\n\t\t\t// Body is blob\n\t\t} else if (Buffer.isBuffer(body)) {\n\t\t\t// Body is Buffer\n\t\t} else if (types.isAnyArrayBuffer(body)) {\n\t\t\t// Body is ArrayBuffer\n\t\t\tbody = Buffer.from(body);\n\t\t} else if (ArrayBuffer.isView(body)) {\n\t\t\t// Body is ArrayBufferView\n\t\t\tbody = Buffer.from(body.buffer, body.byteOffset, body.byteLength);\n\t\t} else if (body instanceof Stream) {\n\t\t\t// Body is stream\n\t\t} else if (body instanceof FormData) {\n\t\t\t// Body is FormData\n\t\t\tbody = formDataToBlob(body);\n\t\t\tboundary = body.type.split('=')[1];\n\t\t} else {\n\t\t\t// None of the above\n\t\t\t// coerce to string then buffer\n\t\t\tbody = Buffer.from(String(body));\n\t\t}\n\n\t\tlet stream = body;\n\n\t\tif (Buffer.isBuffer(body)) {\n\t\t\tstream = Stream.Readable.from(body);\n\t\t} else if (isBlob(body)) {\n\t\t\tstream = Stream.Readable.from(body.stream());\n\t\t}\n\n\t\tthis[INTERNALS] = {\n\t\t\tbody,\n\t\t\tstream,\n\t\t\tboundary,\n\t\t\tdisturbed: false,\n\t\t\terror: null\n\t\t};\n\t\tthis.size = size;\n\n\t\tif (body instanceof Stream) {\n\t\t\tbody.on('error', error_ => {\n\t\t\t\tconst error = error_ instanceof FetchBaseError ?\n\t\t\t\t\terror_ :\n\t\t\t\t\tnew FetchError(`Invalid response body while trying to fetch ${this.url}: ${error_.message}`, 'system', error_);\n\t\t\t\tthis[INTERNALS].error = error;\n\t\t\t});\n\t\t}\n\t}\n\n\tget body() {\n\t\treturn this[INTERNALS].stream;\n\t}\n\n\tget bodyUsed() {\n\t\treturn this[INTERNALS].disturbed;\n\t}\n\n\t/**\n\t * Decode response as ArrayBuffer\n\t *\n\t * @return  Promise\n\t */\n\tasync arrayBuffer() {\n\t\tconst {buffer, byteOffset, byteLength} = await consumeBody(this);\n\t\treturn buffer.slice(byteOffset, byteOffset + byteLength);\n\t}\n\n\tasync formData() {\n\t\tconst ct = this.headers.get('content-type');\n\n\t\tif (ct.startsWith('application/x-www-form-urlencoded')) {\n\t\t\tconst formData = new FormData();\n\t\t\tconst parameters = new URLSearchParams(await this.text());\n\n\t\t\tfor (const [name, value] of parameters) {\n\t\t\t\tformData.append(name, value);\n\t\t\t}\n\n\t\t\treturn formData;\n\t\t}\n\n\t\tconst {toFormData} = await import('./utils/multipart-parser.js');\n\t\treturn toFormData(this.body, ct);\n\t}\n\n\t/**\n\t * Return raw response as Blob\n\t *\n\t * @return Promise\n\t */\n\tasync blob() {\n\t\tconst ct = (this.headers && this.headers.get('content-type')) || (this[INTERNALS].body && this[INTERNALS].body.type) || '';\n\t\tconst buf = await this.arrayBuffer();\n\n\t\treturn new Blob([buf], {\n\t\t\ttype: ct\n\t\t});\n\t}\n\n\t/**\n\t * Decode response as json\n\t *\n\t * @return  Promise\n\t */\n\tasync json() {\n\t\tconst text = await this.text();\n\t\treturn JSON.parse(text);\n\t}\n\n\t/**\n\t * Decode response as text\n\t *\n\t * @return  Promise\n\t */\n\tasync text() {\n\t\tconst buffer = await consumeBody(this);\n\t\treturn new TextDecoder().decode(buffer);\n\t}\n\n\t/**\n\t * Decode response as buffer (non-spec api)\n\t *\n\t * @return  Promise\n\t */\n\tbuffer() {\n\t\treturn consumeBody(this);\n\t}\n}\n\nBody.prototype.buffer = deprecate(Body.prototype.buffer, 'Please use \\'response.arrayBuffer()\\' instead of \\'response.buffer()\\'', 'node-fetch#buffer');\n\n// In browsers, all properties are enumerable.\nObject.defineProperties(Body.prototype, {\n\tbody: {enumerable: true},\n\tbodyUsed: {enumerable: true},\n\tarrayBuffer: {enumerable: true},\n\tblob: {enumerable: true},\n\tjson: {enumerable: true},\n\ttext: {enumerable: true},\n\tdata: {get: deprecate(() => {},\n\t\t'data doesn\\'t exist, use json(), text(), arrayBuffer(), or body instead',\n\t\t'https://github.com/node-fetch/node-fetch/issues/1000 (response)')}\n});\n\n/**\n * Consume and convert an entire Body to a Buffer.\n *\n * Ref: https://fetch.spec.whatwg.org/#concept-body-consume-body\n *\n * @return Promise\n */\nasync function consumeBody(data) {\n\tif (data[INTERNALS].disturbed) {\n\t\tthrow new TypeError(`body used already for: ${data.url}`);\n\t}\n\n\tdata[INTERNALS].disturbed = true;\n\n\tif (data[INTERNALS].error) {\n\t\tthrow data[INTERNALS].error;\n\t}\n\n\tconst {body} = data;\n\n\t// Body is null\n\tif (body === null) {\n\t\treturn Buffer.alloc(0);\n\t}\n\n\t/* c8 ignore next 3 */\n\tif (!(body instanceof Stream)) {\n\t\treturn Buffer.alloc(0);\n\t}\n\n\t// Body is stream\n\t// get ready to actually consume the body\n\tconst accum = [];\n\tlet accumBytes = 0;\n\n\ttry {\n\t\tfor await (const chunk of body) {\n\t\t\tif (data.size > 0 && accumBytes + chunk.length > data.size) {\n\t\t\t\tconst error = new FetchError(`content size at ${data.url} over limit: ${data.size}`, 'max-size');\n\t\t\t\tbody.destroy(error);\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\taccumBytes += chunk.length;\n\t\t\taccum.push(chunk);\n\t\t}\n\t} catch (error) {\n\t\tconst error_ = error instanceof FetchBaseError ? error : new FetchError(`Invalid response body while trying to fetch ${data.url}: ${error.message}`, 'system', error);\n\t\tthrow error_;\n\t}\n\n\tif (body.readableEnded === true || body._readableState.ended === true) {\n\t\ttry {\n\t\t\tif (accum.every(c => typeof c === 'string')) {\n\t\t\t\treturn Buffer.from(accum.join(''));\n\t\t\t}\n\n\t\t\treturn Buffer.concat(accum, accumBytes);\n\t\t} catch (error) {\n\t\t\tthrow new FetchError(`Could not create Buffer from response body for ${data.url}: ${error.message}`, 'system', error);\n\t\t}\n\t} else {\n\t\tthrow new FetchError(`Premature close of server response while trying to fetch ${data.url}`);\n\t}\n}\n\n/**\n * Clone body given Res/Req instance\n *\n * @param   Mixed   instance       Response or Request instance\n * @param   String  highWaterMark  highWaterMark for both PassThrough body streams\n * @return  Mixed\n */\nexport const clone = (instance, highWaterMark) => {\n\tlet p1;\n\tlet p2;\n\tlet {body} = instance[INTERNALS];\n\n\t// Don't allow cloning a used body\n\tif (instance.bodyUsed) {\n\t\tthrow new Error('cannot clone body after it is used');\n\t}\n\n\t// Check that body is a stream and not form-data object\n\t// note: we can't clone the form-data object without having it as a dependency\n\tif ((body instanceof Stream) && (typeof body.getBoundary !== 'function')) {\n\t\t// Tee instance body\n\t\tp1 = new PassThrough({highWaterMark});\n\t\tp2 = new PassThrough({highWaterMark});\n\t\tbody.pipe(p1);\n\t\tbody.pipe(p2);\n\t\t// Set instance body to teed body and return the other teed body\n\t\tinstance[INTERNALS].stream = p1;\n\t\tbody = p2;\n\t}\n\n\treturn body;\n};\n\nconst getNonSpecFormDataBoundary = deprecate(\n\tbody => body.getBoundary(),\n\t'form-data doesn\\'t follow the spec and requires special treatment. Use alternative package',\n\t'https://github.com/node-fetch/node-fetch/issues/1167'\n);\n\n/**\n * Performs the operation \"extract a `Content-Type` value from |object|\" as\n * specified in the specification:\n * https://fetch.spec.whatwg.org/#concept-bodyinit-extract\n *\n * This function assumes that instance.body is present.\n *\n * @param {any} body Any options.body input\n * @returns {string | null}\n */\nexport const extractContentType = (body, request) => {\n\t// Body is null or undefined\n\tif (body === null) {\n\t\treturn null;\n\t}\n\n\t// Body is string\n\tif (typeof body === 'string') {\n\t\treturn 'text/plain;charset=UTF-8';\n\t}\n\n\t// Body is a URLSearchParams\n\tif (isURLSearchParameters(body)) {\n\t\treturn 'application/x-www-form-urlencoded;charset=UTF-8';\n\t}\n\n\t// Body is blob\n\tif (isBlob(body)) {\n\t\treturn body.type || null;\n\t}\n\n\t// Body is a Buffer (Buffer, ArrayBuffer or ArrayBufferView)\n\tif (Buffer.isBuffer(body) || types.isAnyArrayBuffer(body) || ArrayBuffer.isView(body)) {\n\t\treturn null;\n\t}\n\n\tif (body instanceof FormData) {\n\t\treturn `multipart/form-data; boundary=${request[INTERNALS].boundary}`;\n\t}\n\n\t// Detect form data input from form-data module\n\tif (body && typeof body.getBoundary === 'function') {\n\t\treturn `multipart/form-data;boundary=${getNonSpecFormDataBoundary(body)}`;\n\t}\n\n\t// Body is stream - can't really do much about this\n\tif (body instanceof Stream) {\n\t\treturn null;\n\t}\n\n\t// Body constructor defaults other things to string\n\treturn 'text/plain;charset=UTF-8';\n};\n\n/**\n * The Fetch Standard treats this as if \"total bytes\" is a property on the body.\n * For us, we have to explicitly get it with a function.\n *\n * ref: https://fetch.spec.whatwg.org/#concept-body-total-bytes\n *\n * @param {any} obj.body Body object from the Body instance.\n * @returns {number | null}\n */\nexport const getTotalBytes = request => {\n\tconst {body} = request[INTERNALS];\n\n\t// Body is null or undefined\n\tif (body === null) {\n\t\treturn 0;\n\t}\n\n\t// Body is Blob\n\tif (isBlob(body)) {\n\t\treturn body.size;\n\t}\n\n\t// Body is Buffer\n\tif (Buffer.isBuffer(body)) {\n\t\treturn body.length;\n\t}\n\n\t// Detect form data input from form-data module\n\tif (body && typeof body.getLengthSync === 'function') {\n\t\treturn body.hasKnownLength && body.hasKnownLength() ? body.getLengthSync() : null;\n\t}\n\n\t// Body is stream\n\treturn null;\n};\n\n/**\n * Write a Body to a Node.js WritableStream (e.g. http.Request) object.\n *\n * @param {Stream.Writable} dest The stream to write to.\n * @param obj.body Body object from the Body instance.\n * @returns {Promise<void>}\n */\nexport const writeToStream = async (dest, {body}) => {\n\tif (body === null) {\n\t\t// Body is null\n\t\tdest.end();\n\t} else {\n\t\t// Body is stream\n\t\tawait pipeline(body, dest);\n\t}\n};\n","/**\n * Headers.js\n *\n * Headers class offers convenient helpers\n */\n\nimport {types} from 'node:util';\nimport http from 'node:http';\n\n/* c8 ignore next 9 */\nconst validateHeaderName = typeof http.validateHeaderName === 'function' ?\n\thttp.validateHeaderName :\n\tname => {\n\t\tif (!/^[\\^`\\-\\w!#$%&'*+.|~]+$/.test(name)) {\n\t\t\tconst error = new TypeError(`Header name must be a valid HTTP token [${name}]`);\n\t\t\tObject.defineProperty(error, 'code', {value: 'ERR_INVALID_HTTP_TOKEN'});\n\t\t\tthrow error;\n\t\t}\n\t};\n\n/* c8 ignore next 9 */\nconst validateHeaderValue = typeof http.validateHeaderValue === 'function' ?\n\thttp.validateHeaderValue :\n\t(name, value) => {\n\t\tif (/[^\\t\\u0020-\\u007E\\u0080-\\u00FF]/.test(value)) {\n\t\t\tconst error = new TypeError(`Invalid character in header content [\"${name}\"]`);\n\t\t\tObject.defineProperty(error, 'code', {value: 'ERR_INVALID_CHAR'});\n\t\t\tthrow error;\n\t\t}\n\t};\n\n/**\n * @typedef {Headers | Record<string, string> | Iterable<readonly [string, string]> | Iterable<Iterable<string>>} HeadersInit\n */\n\n/**\n * This Fetch API interface allows you to perform various actions on HTTP request and response headers.\n * These actions include retrieving, setting, adding to, and removing.\n * A Headers object has an associated header list, which is initially empty and consists of zero or more name and value pairs.\n * You can add to this using methods like append() (see Examples.)\n * In all methods of this interface, header names are matched by case-insensitive byte sequence.\n *\n */\nexport default class Headers extends URLSearchParams {\n\t/**\n\t * Headers class\n\t *\n\t * @constructor\n\t * @param {HeadersInit} [init] - Response headers\n\t */\n\tconstructor(init) {\n\t\t// Validate and normalize init object in [name, value(s)][]\n\t\t/** @type {string[][]} */\n\t\tlet result = [];\n\t\tif (init instanceof Headers) {\n\t\t\tconst raw = init.raw();\n\t\t\tfor (const [name, values] of Object.entries(raw)) {\n\t\t\t\tresult.push(...values.map(value => [name, value]));\n\t\t\t}\n\t\t} else if (init == null) { // eslint-disable-line no-eq-null, eqeqeq\n\t\t\t// No op\n\t\t} else if (typeof init === 'object' && !types.isBoxedPrimitive(init)) {\n\t\t\tconst method = init[Symbol.iterator];\n\t\t\t// eslint-disable-next-line no-eq-null, eqeqeq\n\t\t\tif (method == null) {\n\t\t\t\t// Record<ByteString, ByteString>\n\t\t\t\tresult.push(...Object.entries(init));\n\t\t\t} else {\n\t\t\t\tif (typeof method !== 'function') {\n\t\t\t\t\tthrow new TypeError('Header pairs must be iterable');\n\t\t\t\t}\n\n\t\t\t\t// Sequence<sequence<ByteString>>\n\t\t\t\t// Note: per spec we have to first exhaust the lists then process them\n\t\t\t\tresult = [...init]\n\t\t\t\t\t.map(pair => {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\ttypeof pair !== 'object' || types.isBoxedPrimitive(pair)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tthrow new TypeError('Each header pair must be an iterable object');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn [...pair];\n\t\t\t\t\t}).map(pair => {\n\t\t\t\t\t\tif (pair.length !== 2) {\n\t\t\t\t\t\t\tthrow new TypeError('Each header pair must be a name/value tuple');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn [...pair];\n\t\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new TypeError('Failed to construct \\'Headers\\': The provided value is not of type \\'(sequence<sequence<ByteString>> or record<ByteString, ByteString>)');\n\t\t}\n\n\t\t// Validate and lowercase\n\t\tresult =\n\t\t\tresult.length > 0 ?\n\t\t\t\tresult.map(([name, value]) => {\n\t\t\t\t\tvalidateHeaderName(name);\n\t\t\t\t\tvalidateHeaderValue(name, String(value));\n\t\t\t\t\treturn [String(name).toLowerCase(), String(value)];\n\t\t\t\t}) :\n\t\t\t\tundefined;\n\n\t\tsuper(result);\n\n\t\t// Returning a Proxy that will lowercase key names, validate parameters and sort keys\n\t\t// eslint-disable-next-line no-constructor-return\n\t\treturn new Proxy(this, {\n\t\t\tget(target, p, receiver) {\n\t\t\t\tswitch (p) {\n\t\t\t\t\tcase 'append':\n\t\t\t\t\tcase 'set':\n\t\t\t\t\t\treturn (name, value) => {\n\t\t\t\t\t\t\tvalidateHeaderName(name);\n\t\t\t\t\t\t\tvalidateHeaderValue(name, String(value));\n\t\t\t\t\t\t\treturn URLSearchParams.prototype[p].call(\n\t\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\t\tString(name).toLowerCase(),\n\t\t\t\t\t\t\t\tString(value)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t};\n\n\t\t\t\t\tcase 'delete':\n\t\t\t\t\tcase 'has':\n\t\t\t\t\tcase 'getAll':\n\t\t\t\t\t\treturn name => {\n\t\t\t\t\t\t\tvalidateHeaderName(name);\n\t\t\t\t\t\t\treturn URLSearchParams.prototype[p].call(\n\t\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\t\tString(name).toLowerCase()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t};\n\n\t\t\t\t\tcase 'keys':\n\t\t\t\t\t\treturn () => {\n\t\t\t\t\t\t\ttarget.sort();\n\t\t\t\t\t\t\treturn new Set(URLSearchParams.prototype.keys.call(target)).keys();\n\t\t\t\t\t\t};\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn Reflect.get(target, p, receiver);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t/* c8 ignore next */\n\t}\n\n\tget [Symbol.toStringTag]() {\n\t\treturn this.constructor.name;\n\t}\n\n\ttoString() {\n\t\treturn Object.prototype.toString.call(this);\n\t}\n\n\tget(name) {\n\t\tconst values = this.getAll(name);\n\t\tif (values.length === 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet value = values.join(', ');\n\t\tif (/^content-encoding$/i.test(name)) {\n\t\t\tvalue = value.toLowerCase();\n\t\t}\n\n\t\treturn value;\n\t}\n\n\tforEach(callback, thisArg = undefined) {\n\t\tfor (const name of this.keys()) {\n\t\t\tReflect.apply(callback, thisArg, [this.get(name), name, this]);\n\t\t}\n\t}\n\n\t* values() {\n\t\tfor (const name of this.keys()) {\n\t\t\tyield this.get(name);\n\t\t}\n\t}\n\n\t/**\n\t * @type {() => IterableIterator<[string, string]>}\n\t */\n\t* entries() {\n\t\tfor (const name of this.keys()) {\n\t\t\tyield [name, this.get(name)];\n\t\t}\n\t}\n\n\t[Symbol.iterator]() {\n\t\treturn this.entries();\n\t}\n\n\t/**\n\t * Node-fetch non-spec method\n\t * returning all headers and their values as array\n\t * @returns {Record<string, string[]>}\n\t */\n\traw() {\n\t\treturn [...this.keys()].reduce((result, key) => {\n\t\t\tresult[key] = this.getAll(key);\n\t\t\treturn result;\n\t\t}, {});\n\t}\n\n\t/**\n\t * For better console.log(headers) and also to convert Headers into Node.js Request compatible format\n\t */\n\t[Symbol.for('nodejs.util.inspect.custom')]() {\n\t\treturn [...this.keys()].reduce((result, key) => {\n\t\t\tconst values = this.getAll(key);\n\t\t\t// Http.request() only supports string as Host header.\n\t\t\t// This hack makes specifying custom Host header possible.\n\t\t\tif (key === 'host') {\n\t\t\t\tresult[key] = values[0];\n\t\t\t} else {\n\t\t\t\tresult[key] = values.length > 1 ? values : values[0];\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}, {});\n\t}\n}\n\n/**\n * Re-shaping object for Web IDL tests\n * Only need to do it for overridden methods\n */\nObject.defineProperties(\n\tHeaders.prototype,\n\t['get', 'entries', 'forEach', 'values'].reduce((result, property) => {\n\t\tresult[property] = {enumerable: true};\n\t\treturn result;\n\t}, {})\n);\n\n/**\n * Create a Headers object from an http.IncomingMessage.rawHeaders, ignoring those that do\n * not conform to HTTP grammar productions.\n * @param {import('http').IncomingMessage['rawHeaders']} headers\n */\nexport function fromRawHeaders(headers = []) {\n\treturn new Headers(\n\t\theaders\n\t\t\t// Split into pairs\n\t\t\t.reduce((result, value, index, array) => {\n\t\t\t\tif (index % 2 === 0) {\n\t\t\t\t\tresult.push(array.slice(index, index + 2));\n\t\t\t\t}\n\n\t\t\t\treturn result;\n\t\t\t}, [])\n\t\t\t.filter(([name, value]) => {\n\t\t\t\ttry {\n\t\t\t\t\tvalidateHeaderName(name);\n\t\t\t\t\tvalidateHeaderValue(name, String(value));\n\t\t\t\t\treturn true;\n\t\t\t\t} catch {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t})\n\n\t);\n}\n","const redirectStatus = new Set([301, 302, 303, 307, 308]);\n\n/**\n * Redirect code matching\n *\n * @param {number} code - Status code\n * @return {boolean}\n */\nexport const isRedirect = code => {\n\treturn redirectStatus.has(code);\n};\n","/**\n * Response.js\n *\n * Response class provides content decoding\n */\n\nimport Headers from './headers.js';\nimport Body, {clone, extractContentType} from './body.js';\nimport {isRedirect} from './utils/is-redirect.js';\n\nconst INTERNALS = Symbol('Response internals');\n\n/**\n * Response class\n *\n * Ref: https://fetch.spec.whatwg.org/#response-class\n *\n * @param   Stream  body  Readable stream\n * @param   Object  opts  Response options\n * @return  Void\n */\nexport default class Response extends Body {\n\tconstructor(body = null, options = {}) {\n\t\tsuper(body, options);\n\n\t\t// eslint-disable-next-line no-eq-null, eqeqeq, no-negated-condition\n\t\tconst status = options.status != null ? options.status : 200;\n\n\t\tconst headers = new Headers(options.headers);\n\n\t\tif (body !== null && !headers.has('Content-Type')) {\n\t\t\tconst contentType = extractContentType(body, this);\n\t\t\tif (contentType) {\n\t\t\t\theaders.append('Content-Type', contentType);\n\t\t\t}\n\t\t}\n\n\t\tthis[INTERNALS] = {\n\t\t\ttype: 'default',\n\t\t\turl: options.url,\n\t\t\tstatus,\n\t\t\tstatusText: options.statusText || '',\n\t\t\theaders,\n\t\t\tcounter: options.counter,\n\t\t\thighWaterMark: options.highWaterMark\n\t\t};\n\t}\n\n\tget type() {\n\t\treturn this[INTERNALS].type;\n\t}\n\n\tget url() {\n\t\treturn this[INTERNALS].url || '';\n\t}\n\n\tget status() {\n\t\treturn this[INTERNALS].status;\n\t}\n\n\t/**\n\t * Convenience property representing if the request ended normally\n\t */\n\tget ok() {\n\t\treturn this[INTERNALS].status >= 200 && this[INTERNALS].status < 300;\n\t}\n\n\tget redirected() {\n\t\treturn this[INTERNALS].counter > 0;\n\t}\n\n\tget statusText() {\n\t\treturn this[INTERNALS].statusText;\n\t}\n\n\tget headers() {\n\t\treturn this[INTERNALS].headers;\n\t}\n\n\tget highWaterMark() {\n\t\treturn this[INTERNALS].highWaterMark;\n\t}\n\n\t/**\n\t * Clone this response\n\t *\n\t * @return  Response\n\t */\n\tclone() {\n\t\treturn new Response(clone(this, this.highWaterMark), {\n\t\t\ttype: this.type,\n\t\t\turl: this.url,\n\t\t\tstatus: this.status,\n\t\t\tstatusText: this.statusText,\n\t\t\theaders: this.headers,\n\t\t\tok: this.ok,\n\t\t\tredirected: this.redirected,\n\t\t\tsize: this.size,\n\t\t\thighWaterMark: this.highWaterMark\n\t\t});\n\t}\n\n\t/**\n\t * @param {string} url    The URL that the new response is to originate from.\n\t * @param {number} status An optional status code for the response (e.g., 302.)\n\t * @returns {Response}    A Response object.\n\t */\n\tstatic redirect(url, status = 302) {\n\t\tif (!isRedirect(status)) {\n\t\t\tthrow new RangeError('Failed to execute \"redirect\" on \"response\": Invalid status code');\n\t\t}\n\n\t\treturn new Response(null, {\n\t\t\theaders: {\n\t\t\t\tlocation: new URL(url).toString()\n\t\t\t},\n\t\t\tstatus\n\t\t});\n\t}\n\n\tstatic error() {\n\t\tconst response = new Response(null, {status: 0, statusText: ''});\n\t\tresponse[INTERNALS].type = 'error';\n\t\treturn response;\n\t}\n\n\tstatic json(data = undefined, init = {}) {\n\t\tconst body = JSON.stringify(data);\n\n\t\tif (body === undefined) {\n\t\t\tthrow new TypeError('data is not JSON serializable');\n\t\t}\n\n\t\tconst headers = new Headers(init && init.headers);\n\n\t\tif (!headers.has('content-type')) {\n\t\t\theaders.set('content-type', 'application/json');\n\t\t}\n\n\t\treturn new Response(body, {\n\t\t\t...init,\n\t\t\theaders\n\t\t});\n\t}\n\n\tget [Symbol.toStringTag]() {\n\t\treturn 'Response';\n\t}\n}\n\nObject.defineProperties(Response.prototype, {\n\ttype: {enumerable: true},\n\turl: {enumerable: true},\n\tstatus: {enumerable: true},\n\tok: {enumerable: true},\n\tredirected: {enumerable: true},\n\tstatusText: {enumerable: true},\n\theaders: {enumerable: true},\n\tclone: {enumerable: true}\n});\n","import {isIP} from 'node:net';\n\n/**\n * @external URL\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/URL|URL}\n */\n\n/**\n * @module utils/referrer\n * @private\n */\n\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#strip-url|Referrer Policy §8.4. Strip url for use as a referrer}\n * @param {string} URL\n * @param {boolean} [originOnly=false]\n */\nexport function stripURLForUseAsAReferrer(url, originOnly = false) {\n\t// 1. If url is null, return no referrer.\n\tif (url == null) { // eslint-disable-line no-eq-null, eqeqeq\n\t\treturn 'no-referrer';\n\t}\n\n\turl = new URL(url);\n\n\t// 2. If url's scheme is a local scheme, then return no referrer.\n\tif (/^(about|blob|data):$/.test(url.protocol)) {\n\t\treturn 'no-referrer';\n\t}\n\n\t// 3. Set url's username to the empty string.\n\turl.username = '';\n\n\t// 4. Set url's password to null.\n\t// Note: `null` appears to be a mistake as this actually results in the password being `\"null\"`.\n\turl.password = '';\n\n\t// 5. Set url's fragment to null.\n\t// Note: `null` appears to be a mistake as this actually results in the fragment being `\"#null\"`.\n\turl.hash = '';\n\n\t// 6. If the origin-only flag is true, then:\n\tif (originOnly) {\n\t\t// 6.1. Set url's path to null.\n\t\t// Note: `null` appears to be a mistake as this actually results in the path being `\"/null\"`.\n\t\turl.pathname = '';\n\n\t\t// 6.2. Set url's query to null.\n\t\t// Note: `null` appears to be a mistake as this actually results in the query being `\"?null\"`.\n\t\turl.search = '';\n\t}\n\n\t// 7. Return url.\n\treturn url;\n}\n\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#enumdef-referrerpolicy|enum ReferrerPolicy}\n */\nexport const ReferrerPolicy = new Set([\n\t'',\n\t'no-referrer',\n\t'no-referrer-when-downgrade',\n\t'same-origin',\n\t'origin',\n\t'strict-origin',\n\t'origin-when-cross-origin',\n\t'strict-origin-when-cross-origin',\n\t'unsafe-url'\n]);\n\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#default-referrer-policy|default referrer policy}\n */\nexport const DEFAULT_REFERRER_POLICY = 'strict-origin-when-cross-origin';\n\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#referrer-policies|Referrer Policy §3. Referrer Policies}\n * @param {string} referrerPolicy\n * @returns {string} referrerPolicy\n */\nexport function validateReferrerPolicy(referrerPolicy) {\n\tif (!ReferrerPolicy.has(referrerPolicy)) {\n\t\tthrow new TypeError(`Invalid referrerPolicy: ${referrerPolicy}`);\n\t}\n\n\treturn referrerPolicy;\n}\n\n/**\n * @see {@link https://w3c.github.io/webappsec-secure-contexts/#is-origin-trustworthy|Referrer Policy §3.2. Is origin potentially trustworthy?}\n * @param {external:URL} url\n * @returns `true`: \"Potentially Trustworthy\", `false`: \"Not Trustworthy\"\n */\nexport function isOriginPotentiallyTrustworthy(url) {\n\t// 1. If origin is an opaque origin, return \"Not Trustworthy\".\n\t// Not applicable\n\n\t// 2. Assert: origin is a tuple origin.\n\t// Not for implementations\n\n\t// 3. If origin's scheme is either \"https\" or \"wss\", return \"Potentially Trustworthy\".\n\tif (/^(http|ws)s:$/.test(url.protocol)) {\n\t\treturn true;\n\t}\n\n\t// 4. If origin's host component matches one of the CIDR notations 127.0.0.0/8 or ::1/128 [RFC4632], return \"Potentially Trustworthy\".\n\tconst hostIp = url.host.replace(/(^\\[)|(]$)/g, '');\n\tconst hostIPVersion = isIP(hostIp);\n\n\tif (hostIPVersion === 4 && /^127\\./.test(hostIp)) {\n\t\treturn true;\n\t}\n\n\tif (hostIPVersion === 6 && /^(((0+:){7})|(::(0+:){0,6}))0*1$/.test(hostIp)) {\n\t\treturn true;\n\t}\n\n\t// 5. If origin's host component is \"localhost\" or falls within \".localhost\", and the user agent conforms to the name resolution rules in [let-localhost-be-localhost], return \"Potentially Trustworthy\".\n\t// We are returning FALSE here because we cannot ensure conformance to\n\t// let-localhost-be-loalhost (https://tools.ietf.org/html/draft-west-let-localhost-be-localhost)\n\tif (url.host === 'localhost' || url.host.endsWith('.localhost')) {\n\t\treturn false;\n\t}\n\n\t// 6. If origin's scheme component is file, return \"Potentially Trustworthy\".\n\tif (url.protocol === 'file:') {\n\t\treturn true;\n\t}\n\n\t// 7. If origin's scheme component is one which the user agent considers to be authenticated, return \"Potentially Trustworthy\".\n\t// Not supported\n\n\t// 8. If origin has been configured as a trustworthy origin, return \"Potentially Trustworthy\".\n\t// Not supported\n\n\t// 9. Return \"Not Trustworthy\".\n\treturn false;\n}\n\n/**\n * @see {@link https://w3c.github.io/webappsec-secure-contexts/#is-url-trustworthy|Referrer Policy §3.3. Is url potentially trustworthy?}\n * @param {external:URL} url\n * @returns `true`: \"Potentially Trustworthy\", `false`: \"Not Trustworthy\"\n */\nexport function isUrlPotentiallyTrustworthy(url) {\n\t// 1. If url is \"about:blank\" or \"about:srcdoc\", return \"Potentially Trustworthy\".\n\tif (/^about:(blank|srcdoc)$/.test(url)) {\n\t\treturn true;\n\t}\n\n\t// 2. If url's scheme is \"data\", return \"Potentially Trustworthy\".\n\tif (url.protocol === 'data:') {\n\t\treturn true;\n\t}\n\n\t// Note: The origin of blob: and filesystem: URLs is the origin of the context in which they were\n\t// created. Therefore, blobs created in a trustworthy origin will themselves be potentially\n\t// trustworthy.\n\tif (/^(blob|filesystem):$/.test(url.protocol)) {\n\t\treturn true;\n\t}\n\n\t// 3. Return the result of executing §3.2 Is origin potentially trustworthy? on url's origin.\n\treturn isOriginPotentiallyTrustworthy(url);\n}\n\n/**\n * Modifies the referrerURL to enforce any extra security policy considerations.\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer|Referrer Policy §8.3. Determine request's Referrer}, step 7\n * @callback module:utils/referrer~referrerURLCallback\n * @param {external:URL} referrerURL\n * @returns {external:URL} modified referrerURL\n */\n\n/**\n * Modifies the referrerOrigin to enforce any extra security policy considerations.\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer|Referrer Policy §8.3. Determine request's Referrer}, step 7\n * @callback module:utils/referrer~referrerOriginCallback\n * @param {external:URL} referrerOrigin\n * @returns {external:URL} modified referrerOrigin\n */\n\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer|Referrer Policy §8.3. Determine request's Referrer}\n * @param {Request} request\n * @param {object} o\n * @param {module:utils/referrer~referrerURLCallback} o.referrerURLCallback\n * @param {module:utils/referrer~referrerOriginCallback} o.referrerOriginCallback\n * @returns {external:URL} Request's referrer\n */\nexport function determineRequestsReferrer(request, {referrerURLCallback, referrerOriginCallback} = {}) {\n\t// There are 2 notes in the specification about invalid pre-conditions.  We return null, here, for\n\t// these cases:\n\t// > Note: If request's referrer is \"no-referrer\", Fetch will not call into this algorithm.\n\t// > Note: If request's referrer policy is the empty string, Fetch will not call into this\n\t// > algorithm.\n\tif (request.referrer === 'no-referrer' || request.referrerPolicy === '') {\n\t\treturn null;\n\t}\n\n\t// 1. Let policy be request's associated referrer policy.\n\tconst policy = request.referrerPolicy;\n\n\t// 2. Let environment be request's client.\n\t// not applicable to node.js\n\n\t// 3. Switch on request's referrer:\n\tif (request.referrer === 'about:client') {\n\t\treturn 'no-referrer';\n\t}\n\n\t// \"a URL\": Let referrerSource be request's referrer.\n\tconst referrerSource = request.referrer;\n\n\t// 4. Let request's referrerURL be the result of stripping referrerSource for use as a referrer.\n\tlet referrerURL = stripURLForUseAsAReferrer(referrerSource);\n\n\t// 5. Let referrerOrigin be the result of stripping referrerSource for use as a referrer, with the\n\t//    origin-only flag set to true.\n\tlet referrerOrigin = stripURLForUseAsAReferrer(referrerSource, true);\n\n\t// 6. If the result of serializing referrerURL is a string whose length is greater than 4096, set\n\t//    referrerURL to referrerOrigin.\n\tif (referrerURL.toString().length > 4096) {\n\t\treferrerURL = referrerOrigin;\n\t}\n\n\t// 7. The user agent MAY alter referrerURL or referrerOrigin at this point to enforce arbitrary\n\t//    policy considerations in the interests of minimizing data leakage. For example, the user\n\t//    agent could strip the URL down to an origin, modify its host, replace it with an empty\n\t//    string, etc.\n\tif (referrerURLCallback) {\n\t\treferrerURL = referrerURLCallback(referrerURL);\n\t}\n\n\tif (referrerOriginCallback) {\n\t\treferrerOrigin = referrerOriginCallback(referrerOrigin);\n\t}\n\n\t// 8.Execute the statements corresponding to the value of policy:\n\tconst currentURL = new URL(request.url);\n\n\tswitch (policy) {\n\t\tcase 'no-referrer':\n\t\t\treturn 'no-referrer';\n\n\t\tcase 'origin':\n\t\t\treturn referrerOrigin;\n\n\t\tcase 'unsafe-url':\n\t\t\treturn referrerURL;\n\n\t\tcase 'strict-origin':\n\t\t\t// 1. If referrerURL is a potentially trustworthy URL and request's current URL is not a\n\t\t\t//    potentially trustworthy URL, then return no referrer.\n\t\t\tif (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {\n\t\t\t\treturn 'no-referrer';\n\t\t\t}\n\n\t\t\t// 2. Return referrerOrigin.\n\t\t\treturn referrerOrigin.toString();\n\n\t\tcase 'strict-origin-when-cross-origin':\n\t\t\t// 1. If the origin of referrerURL and the origin of request's current URL are the same, then\n\t\t\t//    return referrerURL.\n\t\t\tif (referrerURL.origin === currentURL.origin) {\n\t\t\t\treturn referrerURL;\n\t\t\t}\n\n\t\t\t// 2. If referrerURL is a potentially trustworthy URL and request's current URL is not a\n\t\t\t//    potentially trustworthy URL, then return no referrer.\n\t\t\tif (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {\n\t\t\t\treturn 'no-referrer';\n\t\t\t}\n\n\t\t\t// 3. Return referrerOrigin.\n\t\t\treturn referrerOrigin;\n\n\t\tcase 'same-origin':\n\t\t\t// 1. If the origin of referrerURL and the origin of request's current URL are the same, then\n\t\t\t//    return referrerURL.\n\t\t\tif (referrerURL.origin === currentURL.origin) {\n\t\t\t\treturn referrerURL;\n\t\t\t}\n\n\t\t\t// 2. Return no referrer.\n\t\t\treturn 'no-referrer';\n\n\t\tcase 'origin-when-cross-origin':\n\t\t\t// 1. If the origin of referrerURL and the origin of request's current URL are the same, then\n\t\t\t//    return referrerURL.\n\t\t\tif (referrerURL.origin === currentURL.origin) {\n\t\t\t\treturn referrerURL;\n\t\t\t}\n\n\t\t\t// Return referrerOrigin.\n\t\t\treturn referrerOrigin;\n\n\t\tcase 'no-referrer-when-downgrade':\n\t\t\t// 1. If referrerURL is a potentially trustworthy URL and request's current URL is not a\n\t\t\t//    potentially trustworthy URL, then return no referrer.\n\t\t\tif (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {\n\t\t\t\treturn 'no-referrer';\n\t\t\t}\n\n\t\t\t// 2. Return referrerURL.\n\t\t\treturn referrerURL;\n\n\t\tdefault:\n\t\t\tthrow new TypeError(`Invalid referrerPolicy: ${policy}`);\n\t}\n}\n\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#parse-referrer-policy-from-header|Referrer Policy §8.1. Parse a referrer policy from a Referrer-Policy header}\n * @param {Headers} headers Response headers\n * @returns {string} policy\n */\nexport function parseReferrerPolicyFromHeader(headers) {\n\t// 1. Let policy-tokens be the result of extracting header list values given `Referrer-Policy`\n\t//    and response’s header list.\n\tconst policyTokens = (headers.get('referrer-policy') || '').split(/[,\\s]+/);\n\n\t// 2. Let policy be the empty string.\n\tlet policy = '';\n\n\t// 3. For each token in policy-tokens, if token is a referrer policy and token is not the empty\n\t//    string, then set policy to token.\n\t// Note: This algorithm loops over multiple policy values to allow deployment of new policy\n\t// values with fallbacks for older user agents, as described in § 11.1 Unknown Policy Values.\n\tfor (const token of policyTokens) {\n\t\tif (token && ReferrerPolicy.has(token)) {\n\t\t\tpolicy = token;\n\t\t}\n\t}\n\n\t// 4. Return policy.\n\treturn policy;\n}\n","/**\n * Request.js\n *\n * Request class contains server only options\n *\n * All spec algorithm step numbers are based on https://fetch.spec.whatwg.org/commit-snapshots/ae716822cb3a61843226cd090eefc6589446c1d2/.\n */\n\nimport {format as formatUrl} from 'node:url';\nimport {deprecate} from 'node:util';\nimport Headers from './headers.js';\nimport Body, {clone, extractContentType, getTotalBytes} from './body.js';\nimport {isAbortSignal} from './utils/is.js';\nimport {getSearch} from './utils/get-search.js';\nimport {\n\tvalidateReferrerPolicy, determineRequestsReferrer, DEFAULT_REFERRER_POLICY\n} from './utils/referrer.js';\n\nconst INTERNALS = Symbol('Request internals');\n\n/**\n * Check if `obj` is an instance of Request.\n *\n * @param  {*} object\n * @return {boolean}\n */\nconst isRequest = object => {\n\treturn (\n\t\ttypeof object === 'object' &&\n\t\ttypeof object[INTERNALS] === 'object'\n\t);\n};\n\nconst doBadDataWarn = deprecate(() => {},\n\t'.data is not a valid RequestInit property, use .body instead',\n\t'https://github.com/node-fetch/node-fetch/issues/1000 (request)');\n\n/**\n * Request class\n *\n * Ref: https://fetch.spec.whatwg.org/#request-class\n *\n * @param   Mixed   input  Url or Request instance\n * @param   Object  init   Custom options\n * @return  Void\n */\nexport default class Request extends Body {\n\tconstructor(input, init = {}) {\n\t\tlet parsedURL;\n\n\t\t// Normalize input and force URL to be encoded as UTF-8 (https://github.com/node-fetch/node-fetch/issues/245)\n\t\tif (isRequest(input)) {\n\t\t\tparsedURL = new URL(input.url);\n\t\t} else {\n\t\t\tparsedURL = new URL(input);\n\t\t\tinput = {};\n\t\t}\n\n\t\tif (parsedURL.username !== '' || parsedURL.password !== '') {\n\t\t\tthrow new TypeError(`${parsedURL} is an url with embedded credentials.`);\n\t\t}\n\n\t\tlet method = init.method || input.method || 'GET';\n\t\tif (/^(delete|get|head|options|post|put)$/i.test(method)) {\n\t\t\tmethod = method.toUpperCase();\n\t\t}\n\n\t\tif (!isRequest(init) && 'data' in init) {\n\t\t\tdoBadDataWarn();\n\t\t}\n\n\t\t// eslint-disable-next-line no-eq-null, eqeqeq\n\t\tif ((init.body != null || (isRequest(input) && input.body !== null)) &&\n\t\t\t(method === 'GET' || method === 'HEAD')) {\n\t\t\tthrow new TypeError('Request with GET/HEAD method cannot have body');\n\t\t}\n\n\t\tconst inputBody = init.body ?\n\t\t\tinit.body :\n\t\t\t(isRequest(input) && input.body !== null ?\n\t\t\t\tclone(input) :\n\t\t\t\tnull);\n\n\t\tsuper(inputBody, {\n\t\t\tsize: init.size || input.size || 0\n\t\t});\n\n\t\tconst headers = new Headers(init.headers || input.headers || {});\n\n\t\tif (inputBody !== null && !headers.has('Content-Type')) {\n\t\t\tconst contentType = extractContentType(inputBody, this);\n\t\t\tif (contentType) {\n\t\t\t\theaders.set('Content-Type', contentType);\n\t\t\t}\n\t\t}\n\n\t\tlet signal = isRequest(input) ?\n\t\t\tinput.signal :\n\t\t\tnull;\n\t\tif ('signal' in init) {\n\t\t\tsignal = init.signal;\n\t\t}\n\n\t\t// eslint-disable-next-line no-eq-null, eqeqeq\n\t\tif (signal != null && !isAbortSignal(signal)) {\n\t\t\tthrow new TypeError('Expected signal to be an instanceof AbortSignal or EventTarget');\n\t\t}\n\n\t\t// §5.4, Request constructor steps, step 15.1\n\t\t// eslint-disable-next-line no-eq-null, eqeqeq\n\t\tlet referrer = init.referrer == null ? input.referrer : init.referrer;\n\t\tif (referrer === '') {\n\t\t\t// §5.4, Request constructor steps, step 15.2\n\t\t\treferrer = 'no-referrer';\n\t\t} else if (referrer) {\n\t\t\t// §5.4, Request constructor steps, step 15.3.1, 15.3.2\n\t\t\tconst parsedReferrer = new URL(referrer);\n\t\t\t// §5.4, Request constructor steps, step 15.3.3, 15.3.4\n\t\t\treferrer = /^about:(\\/\\/)?client$/.test(parsedReferrer) ? 'client' : parsedReferrer;\n\t\t} else {\n\t\t\treferrer = undefined;\n\t\t}\n\n\t\tthis[INTERNALS] = {\n\t\t\tmethod,\n\t\t\tredirect: init.redirect || input.redirect || 'follow',\n\t\t\theaders,\n\t\t\tparsedURL,\n\t\t\tsignal,\n\t\t\treferrer\n\t\t};\n\n\t\t// Node-fetch-only options\n\t\tthis.follow = init.follow === undefined ? (input.follow === undefined ? 20 : input.follow) : init.follow;\n\t\tthis.compress = init.compress === undefined ? (input.compress === undefined ? true : input.compress) : init.compress;\n\t\tthis.counter = init.counter || input.counter || 0;\n\t\tthis.agent = init.agent || input.agent;\n\t\tthis.highWaterMark = init.highWaterMark || input.highWaterMark || 16384;\n\t\tthis.insecureHTTPParser = init.insecureHTTPParser || input.insecureHTTPParser || false;\n\n\t\t// §5.4, Request constructor steps, step 16.\n\t\t// Default is empty string per https://fetch.spec.whatwg.org/#concept-request-referrer-policy\n\t\tthis.referrerPolicy = init.referrerPolicy || input.referrerPolicy || '';\n\t}\n\n\t/** @returns {string} */\n\tget method() {\n\t\treturn this[INTERNALS].method;\n\t}\n\n\t/** @returns {string} */\n\tget url() {\n\t\treturn formatUrl(this[INTERNALS].parsedURL);\n\t}\n\n\t/** @returns {Headers} */\n\tget headers() {\n\t\treturn this[INTERNALS].headers;\n\t}\n\n\tget redirect() {\n\t\treturn this[INTERNALS].redirect;\n\t}\n\n\t/** @returns {AbortSignal} */\n\tget signal() {\n\t\treturn this[INTERNALS].signal;\n\t}\n\n\t// https://fetch.spec.whatwg.org/#dom-request-referrer\n\tget referrer() {\n\t\tif (this[INTERNALS].referrer === 'no-referrer') {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (this[INTERNALS].referrer === 'client') {\n\t\t\treturn 'about:client';\n\t\t}\n\n\t\tif (this[INTERNALS].referrer) {\n\t\t\treturn this[INTERNALS].referrer.toString();\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tget referrerPolicy() {\n\t\treturn this[INTERNALS].referrerPolicy;\n\t}\n\n\tset referrerPolicy(referrerPolicy) {\n\t\tthis[INTERNALS].referrerPolicy = validateReferrerPolicy(referrerPolicy);\n\t}\n\n\t/**\n\t * Clone this request\n\t *\n\t * @return  Request\n\t */\n\tclone() {\n\t\treturn new Request(this);\n\t}\n\n\tget [Symbol.toStringTag]() {\n\t\treturn 'Request';\n\t}\n}\n\nObject.defineProperties(Request.prototype, {\n\tmethod: {enumerable: true},\n\turl: {enumerable: true},\n\theaders: {enumerable: true},\n\tredirect: {enumerable: true},\n\tclone: {enumerable: true},\n\tsignal: {enumerable: true},\n\treferrer: {enumerable: true},\n\treferrerPolicy: {enumerable: true}\n});\n\n/**\n * Convert a Request to Node.js http request options.\n *\n * @param {Request} request - A Request instance\n * @return The options object to be passed to http.request\n */\nexport const getNodeRequestOptions = request => {\n\tconst {parsedURL} = request[INTERNALS];\n\tconst headers = new Headers(request[INTERNALS].headers);\n\n\t// Fetch step 1.3\n\tif (!headers.has('Accept')) {\n\t\theaders.set('Accept', '*/*');\n\t}\n\n\t// HTTP-network-or-cache fetch steps 2.4-2.7\n\tlet contentLengthValue = null;\n\tif (request.body === null && /^(post|put)$/i.test(request.method)) {\n\t\tcontentLengthValue = '0';\n\t}\n\n\tif (request.body !== null) {\n\t\tconst totalBytes = getTotalBytes(request);\n\t\t// Set Content-Length if totalBytes is a number (that is not NaN)\n\t\tif (typeof totalBytes === 'number' && !Number.isNaN(totalBytes)) {\n\t\t\tcontentLengthValue = String(totalBytes);\n\t\t}\n\t}\n\n\tif (contentLengthValue) {\n\t\theaders.set('Content-Length', contentLengthValue);\n\t}\n\n\t// 4.1. Main fetch, step 2.6\n\t// > If request's referrer policy is the empty string, then set request's referrer policy to the\n\t// > default referrer policy.\n\tif (request.referrerPolicy === '') {\n\t\trequest.referrerPolicy = DEFAULT_REFERRER_POLICY;\n\t}\n\n\t// 4.1. Main fetch, step 2.7\n\t// > If request's referrer is not \"no-referrer\", set request's referrer to the result of invoking\n\t// > determine request's referrer.\n\tif (request.referrer && request.referrer !== 'no-referrer') {\n\t\trequest[INTERNALS].referrer = determineRequestsReferrer(request);\n\t} else {\n\t\trequest[INTERNALS].referrer = 'no-referrer';\n\t}\n\n\t// 4.5. HTTP-network-or-cache fetch, step 6.9\n\t// > If httpRequest's referrer is a URL, then append `Referer`/httpRequest's referrer, serialized\n\t// >  and isomorphic encoded, to httpRequest's header list.\n\tif (request[INTERNALS].referrer instanceof URL) {\n\t\theaders.set('Referer', request.referrer);\n\t}\n\n\t// HTTP-network-or-cache fetch step 2.11\n\tif (!headers.has('User-Agent')) {\n\t\theaders.set('User-Agent', 'node-fetch');\n\t}\n\n\t// HTTP-network-or-cache fetch step 2.15\n\tif (request.compress && !headers.has('Accept-Encoding')) {\n\t\theaders.set('Accept-Encoding', 'gzip, deflate, br');\n\t}\n\n\tlet {agent} = request;\n\tif (typeof agent === 'function') {\n\t\tagent = agent(parsedURL);\n\t}\n\n\t// HTTP-network fetch step 4.2\n\t// chunked encoding is handled by Node.js\n\n\tconst search = getSearch(parsedURL);\n\n\t// Pass the full URL directly to request(), but overwrite the following\n\t// options:\n\tconst options = {\n\t\t// Overwrite search to retain trailing ? (issue #776)\n\t\tpath: parsedURL.pathname + search,\n\t\t// The following options are not expressed in the URL\n\t\tmethod: request.method,\n\t\theaders: headers[Symbol.for('nodejs.util.inspect.custom')](),\n\t\tinsecureHTTPParser: request.insecureHTTPParser,\n\t\tagent\n\t};\n\n\treturn {\n\t\t/** @type {URL} */\n\t\tparsedURL,\n\t\toptions\n\t};\n};\n","export const getSearch = parsedURL => {\n\tif (parsedURL.search) {\n\t\treturn parsedURL.search;\n\t}\n\n\tconst lastOffset = parsedURL.href.length - 1;\n\tconst hash = parsedURL.hash || (parsedURL.href[lastOffset] === '#' ? '#' : '');\n\treturn parsedURL.href[lastOffset - hash.length] === '?' ? '?' : '';\n};\n","import {FetchBaseError} from './base.js';\n\n/**\n * AbortError interface for cancelled requests\n */\nexport class AbortError extends FetchBaseError {\n\tconstructor(message, type = 'aborted') {\n\t\tsuper(message, type);\n\t}\n}\n","/**\n * Index.js\n *\n * a request API compatible with window.fetch\n *\n * All spec algorithm step numbers are based on https://fetch.spec.whatwg.org/commit-snapshots/ae716822cb3a61843226cd090eefc6589446c1d2/.\n */\n\nimport http from 'node:http';\nimport https from 'node:https';\nimport zlib from 'node:zlib';\nimport Stream, {PassThrough, pipeline as pump} from 'node:stream';\nimport {Buffer} from 'node:buffer';\n\nimport dataUriToBuffer from 'data-uri-to-buffer';\n\nimport {writeToStream, clone} from './body.js';\nimport Response from './response.js';\nimport Headers, {fromRawHeaders} from './headers.js';\nimport Request, {getNodeRequestOptions} from './request.js';\nimport {FetchError} from './errors/fetch-error.js';\nimport {AbortError} from './errors/abort-error.js';\nimport {isRedirect} from './utils/is-redirect.js';\nimport {FormData} from 'formdata-polyfill/esm.min.js';\nimport {isDomainOrSubdomain, isSameProtocol} from './utils/is.js';\nimport {parseReferrerPolicyFromHeader} from './utils/referrer.js';\nimport {\n\tBlob,\n\tFile,\n\tfileFromSync,\n\tfileFrom,\n\tblobFromSync,\n\tblobFrom\n} from 'fetch-blob/from.js';\n\nexport {FormData, Headers, Request, Response, FetchError, AbortError, isRedirect};\nexport {Blob, File, fileFromSync, fileFrom, blobFromSync, blobFrom};\n\nconst supportedSchemas = new Set(['data:', 'http:', 'https:']);\n\n/**\n * Fetch function\n *\n * @param   {string | URL | import('./request').default} url - Absolute url or Request instance\n * @param   {*} [options_] - Fetch options\n * @return  {Promise<import('./response').default>}\n */\nexport default async function fetch(url, options_) {\n\treturn new Promise((resolve, reject) => {\n\t\t// Build request object\n\t\tconst request = new Request(url, options_);\n\t\tconst {parsedURL, options} = getNodeRequestOptions(request);\n\t\tif (!supportedSchemas.has(parsedURL.protocol)) {\n\t\t\tthrow new TypeError(`node-fetch cannot load ${url}. URL scheme \"${parsedURL.protocol.replace(/:$/, '')}\" is not supported.`);\n\t\t}\n\n\t\tif (parsedURL.protocol === 'data:') {\n\t\t\tconst data = dataUriToBuffer(request.url);\n\t\t\tconst response = new Response(data, {headers: {'Content-Type': data.typeFull}});\n\t\t\tresolve(response);\n\t\t\treturn;\n\t\t}\n\n\t\t// Wrap http.request into fetch\n\t\tconst send = (parsedURL.protocol === 'https:' ? https : http).request;\n\t\tconst {signal} = request;\n\t\tlet response = null;\n\n\t\tconst abort = () => {\n\t\t\tconst error = new AbortError('The operation was aborted.');\n\t\t\treject(error);\n\t\t\tif (request.body && request.body instanceof Stream.Readable) {\n\t\t\t\trequest.body.destroy(error);\n\t\t\t}\n\n\t\t\tif (!response || !response.body) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tresponse.body.emit('error', error);\n\t\t};\n\n\t\tif (signal && signal.aborted) {\n\t\t\tabort();\n\t\t\treturn;\n\t\t}\n\n\t\tconst abortAndFinalize = () => {\n\t\t\tabort();\n\t\t\tfinalize();\n\t\t};\n\n\t\t// Send request\n\t\tconst request_ = send(parsedURL.toString(), options);\n\n\t\tif (signal) {\n\t\t\tsignal.addEventListener('abort', abortAndFinalize);\n\t\t}\n\n\t\tconst finalize = () => {\n\t\t\trequest_.abort();\n\t\t\tif (signal) {\n\t\t\t\tsignal.removeEventListener('abort', abortAndFinalize);\n\t\t\t}\n\t\t};\n\n\t\trequest_.on('error', error => {\n\t\t\treject(new FetchError(`request to ${request.url} failed, reason: ${error.message}`, 'system', error));\n\t\t\tfinalize();\n\t\t});\n\n\t\tfixResponseChunkedTransferBadEnding(request_, error => {\n\t\t\tif (response && response.body) {\n\t\t\t\tresponse.body.destroy(error);\n\t\t\t}\n\t\t});\n\n\t\t/* c8 ignore next 18 */\n\t\tif (process.version < 'v14') {\n\t\t\t// Before Node.js 14, pipeline() does not fully support async iterators and does not always\n\t\t\t// properly handle when the socket close/end events are out of order.\n\t\t\trequest_.on('socket', s => {\n\t\t\t\tlet endedWithEventsCount;\n\t\t\t\ts.prependListener('end', () => {\n\t\t\t\t\tendedWithEventsCount = s._eventsCount;\n\t\t\t\t});\n\t\t\t\ts.prependListener('close', hadError => {\n\t\t\t\t\t// if end happened before close but the socket didn't emit an error, do it now\n\t\t\t\t\tif (response && endedWithEventsCount < s._eventsCount && !hadError) {\n\t\t\t\t\t\tconst error = new Error('Premature close');\n\t\t\t\t\t\terror.code = 'ERR_STREAM_PREMATURE_CLOSE';\n\t\t\t\t\t\tresponse.body.emit('error', error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\trequest_.on('response', response_ => {\n\t\t\trequest_.setTimeout(0);\n\t\t\tconst headers = fromRawHeaders(response_.rawHeaders);\n\n\t\t\t// HTTP fetch step 5\n\t\t\tif (isRedirect(response_.statusCode)) {\n\t\t\t\t// HTTP fetch step 5.2\n\t\t\t\tconst location = headers.get('Location');\n\n\t\t\t\t// HTTP fetch step 5.3\n\t\t\t\tlet locationURL = null;\n\t\t\t\ttry {\n\t\t\t\t\tlocationURL = location === null ? null : new URL(location, request.url);\n\t\t\t\t} catch {\n\t\t\t\t\t// error here can only be invalid URL in Location: header\n\t\t\t\t\t// do not throw when options.redirect == manual\n\t\t\t\t\t// let the user extract the errorneous redirect URL\n\t\t\t\t\tif (request.redirect !== 'manual') {\n\t\t\t\t\t\treject(new FetchError(`uri requested responds with an invalid redirect URL: ${location}`, 'invalid-redirect'));\n\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// HTTP fetch step 5.5\n\t\t\t\tswitch (request.redirect) {\n\t\t\t\t\tcase 'error':\n\t\t\t\t\t\treject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, 'no-redirect'));\n\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'manual':\n\t\t\t\t\t\t// Nothing to do\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'follow': {\n\t\t\t\t\t\t// HTTP-redirect fetch step 2\n\t\t\t\t\t\tif (locationURL === null) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 5\n\t\t\t\t\t\tif (request.counter >= request.follow) {\n\t\t\t\t\t\t\treject(new FetchError(`maximum redirect reached at: ${request.url}`, 'max-redirect'));\n\t\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 6 (counter increment)\n\t\t\t\t\t\t// Create a new Request object.\n\t\t\t\t\t\tconst requestOptions = {\n\t\t\t\t\t\t\theaders: new Headers(request.headers),\n\t\t\t\t\t\t\tfollow: request.follow,\n\t\t\t\t\t\t\tcounter: request.counter + 1,\n\t\t\t\t\t\t\tagent: request.agent,\n\t\t\t\t\t\t\tcompress: request.compress,\n\t\t\t\t\t\t\tmethod: request.method,\n\t\t\t\t\t\t\tbody: clone(request),\n\t\t\t\t\t\t\tsignal: request.signal,\n\t\t\t\t\t\t\tsize: request.size,\n\t\t\t\t\t\t\treferrer: request.referrer,\n\t\t\t\t\t\t\treferrerPolicy: request.referrerPolicy\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// when forwarding sensitive headers like \"Authorization\",\n\t\t\t\t\t\t// \"WWW-Authenticate\", and \"Cookie\" to untrusted targets,\n\t\t\t\t\t\t// headers will be ignored when following a redirect to a domain\n\t\t\t\t\t\t// that is not a subdomain match or exact match of the initial domain.\n\t\t\t\t\t\t// For example, a redirect from \"foo.com\" to either \"foo.com\" or \"sub.foo.com\"\n\t\t\t\t\t\t// will forward the sensitive headers, but a redirect to \"bar.com\" will not.\n\t\t\t\t\t\t// headers will also be ignored when following a redirect to a domain using\n\t\t\t\t\t\t// a different protocol. For example, a redirect from \"https://foo.com\" to \"http://foo.com\"\n\t\t\t\t\t\t// will not forward the sensitive headers\n\t\t\t\t\t\tif (!isDomainOrSubdomain(request.url, locationURL) || !isSameProtocol(request.url, locationURL)) {\n\t\t\t\t\t\t\tfor (const name of ['authorization', 'www-authenticate', 'cookie', 'cookie2']) {\n\t\t\t\t\t\t\t\trequestOptions.headers.delete(name);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 9\n\t\t\t\t\t\tif (response_.statusCode !== 303 && request.body && options_.body instanceof Stream.Readable) {\n\t\t\t\t\t\t\treject(new FetchError('Cannot follow redirect with body being a readable stream', 'unsupported-redirect'));\n\t\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 11\n\t\t\t\t\t\tif (response_.statusCode === 303 || ((response_.statusCode === 301 || response_.statusCode === 302) && request.method === 'POST')) {\n\t\t\t\t\t\t\trequestOptions.method = 'GET';\n\t\t\t\t\t\t\trequestOptions.body = undefined;\n\t\t\t\t\t\t\trequestOptions.headers.delete('content-length');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 14\n\t\t\t\t\t\tconst responseReferrerPolicy = parseReferrerPolicyFromHeader(headers);\n\t\t\t\t\t\tif (responseReferrerPolicy) {\n\t\t\t\t\t\t\trequestOptions.referrerPolicy = responseReferrerPolicy;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 15\n\t\t\t\t\t\tresolve(fetch(new Request(locationURL, requestOptions)));\n\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn reject(new TypeError(`Redirect option '${request.redirect}' is not a valid value of RequestRedirect`));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Prepare response\n\t\t\tif (signal) {\n\t\t\t\tresponse_.once('end', () => {\n\t\t\t\t\tsignal.removeEventListener('abort', abortAndFinalize);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tlet body = pump(response_, new PassThrough(), error => {\n\t\t\t\tif (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t}\n\t\t\t});\n\t\t\t// see https://github.com/nodejs/node/pull/29376\n\t\t\t/* c8 ignore next 3 */\n\t\t\tif (process.version < 'v12.10') {\n\t\t\t\tresponse_.on('aborted', abortAndFinalize);\n\t\t\t}\n\n\t\t\tconst responseOptions = {\n\t\t\t\turl: request.url,\n\t\t\t\tstatus: response_.statusCode,\n\t\t\t\tstatusText: response_.statusMessage,\n\t\t\t\theaders,\n\t\t\t\tsize: request.size,\n\t\t\t\tcounter: request.counter,\n\t\t\t\thighWaterMark: request.highWaterMark\n\t\t\t};\n\n\t\t\t// HTTP-network fetch step 12.1.1.3\n\t\t\tconst codings = headers.get('Content-Encoding');\n\n\t\t\t// HTTP-network fetch step 12.1.1.4: handle content codings\n\n\t\t\t// in following scenarios we ignore compression support\n\t\t\t// 1. compression support is disabled\n\t\t\t// 2. HEAD request\n\t\t\t// 3. no Content-Encoding header\n\t\t\t// 4. no content response (204)\n\t\t\t// 5. content not modified response (304)\n\t\t\tif (!request.compress || request.method === 'HEAD' || codings === null || response_.statusCode === 204 || response_.statusCode === 304) {\n\t\t\t\tresponse = new Response(body, responseOptions);\n\t\t\t\tresolve(response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// For Node v6+\n\t\t\t// Be less strict when decoding compressed responses, since sometimes\n\t\t\t// servers send slightly invalid responses that are still accepted\n\t\t\t// by common browsers.\n\t\t\t// Always using Z_SYNC_FLUSH is what cURL does.\n\t\t\tconst zlibOptions = {\n\t\t\t\tflush: zlib.Z_SYNC_FLUSH,\n\t\t\t\tfinishFlush: zlib.Z_SYNC_FLUSH\n\t\t\t};\n\n\t\t\t// For gzip\n\t\t\tif (codings === 'gzip' || codings === 'x-gzip') {\n\t\t\t\tbody = pump(body, zlib.createGunzip(zlibOptions), error => {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tresponse = new Response(body, responseOptions);\n\t\t\t\tresolve(response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// For deflate\n\t\t\tif (codings === 'deflate' || codings === 'x-deflate') {\n\t\t\t\t// Handle the infamous raw deflate response from old servers\n\t\t\t\t// a hack for old IIS and Apache servers\n\t\t\t\tconst raw = pump(response_, new PassThrough(), error => {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\traw.once('data', chunk => {\n\t\t\t\t\t// See http://stackoverflow.com/questions/37519828\n\t\t\t\t\tif ((chunk[0] & 0x0F) === 0x08) {\n\t\t\t\t\t\tbody = pump(body, zlib.createInflate(), error => {\n\t\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbody = pump(body, zlib.createInflateRaw(), error => {\n\t\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tresponse = new Response(body, responseOptions);\n\t\t\t\t\tresolve(response);\n\t\t\t\t});\n\t\t\t\traw.once('end', () => {\n\t\t\t\t\t// Some old IIS servers return zero-length OK deflate responses, so\n\t\t\t\t\t// 'data' is never emitted. See https://github.com/node-fetch/node-fetch/pull/903\n\t\t\t\t\tif (!response) {\n\t\t\t\t\t\tresponse = new Response(body, responseOptions);\n\t\t\t\t\t\tresolve(response);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// For br\n\t\t\tif (codings === 'br') {\n\t\t\t\tbody = pump(body, zlib.createBrotliDecompress(), error => {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tresponse = new Response(body, responseOptions);\n\t\t\t\tresolve(response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Otherwise, use response as-is\n\t\t\tresponse = new Response(body, responseOptions);\n\t\t\tresolve(response);\n\t\t});\n\n\t\t// eslint-disable-next-line promise/prefer-await-to-then\n\t\twriteToStream(request_, request).catch(reject);\n\t});\n}\n\nfunction fixResponseChunkedTransferBadEnding(request, errorCallback) {\n\tconst LAST_CHUNK = Buffer.from('0\\r\\n\\r\\n');\n\n\tlet isChunkedTransfer = false;\n\tlet properLastChunkReceived = false;\n\tlet previousChunk;\n\n\trequest.on('response', response => {\n\t\tconst {headers} = response;\n\t\tisChunkedTransfer = headers['transfer-encoding'] === 'chunked' && !headers['content-length'];\n\t});\n\n\trequest.on('socket', socket => {\n\t\tconst onSocketClose = () => {\n\t\t\tif (isChunkedTransfer && !properLastChunkReceived) {\n\t\t\t\tconst error = new Error('Premature close');\n\t\t\t\terror.code = 'ERR_STREAM_PREMATURE_CLOSE';\n\t\t\t\terrorCallback(error);\n\t\t\t}\n\t\t};\n\n\t\tconst onData = buf => {\n\t\t\tproperLastChunkReceived = Buffer.compare(buf.slice(-5), LAST_CHUNK) === 0;\n\n\t\t\t// Sometimes final 0-length chunk and end of message code are in separate packets\n\t\t\tif (!properLastChunkReceived && previousChunk) {\n\t\t\t\tproperLastChunkReceived = (\n\t\t\t\t\tBuffer.compare(previousChunk.slice(-3), LAST_CHUNK.slice(0, 3)) === 0 &&\n\t\t\t\t\tBuffer.compare(buf.slice(-2), LAST_CHUNK.slice(3)) === 0\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tpreviousChunk = buf;\n\t\t};\n\n\t\tsocket.prependListener('close', onSocketClose);\n\t\tsocket.on('data', onData);\n\n\t\trequest.on('close', () => {\n\t\t\tsocket.removeListener('close', onSocketClose);\n\t\t\tsocket.removeListener('data', onData);\n\t\t});\n\t});\n}\n","/*! fetch-blob. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */\n\n// TODO (jimmywarting): in the feature use conditional loading with top level await (requires 14.x)\n// Node has recently added whatwg stream into core\n\nimport './streams.cjs'\n\n// 64 KiB (same size chrome slice theirs blob into Uint8array's)\nconst POOL_SIZE = 65536\n\n/** @param {(Blob | Uint8Array)[]} parts */\nasync function * toIterator (parts, clone = true) {\n  for (const part of parts) {\n    if ('stream' in part) {\n      yield * (/** @type {AsyncIterableIterator<Uint8Array>} */ (part.stream()))\n    } else if (ArrayBuffer.isView(part)) {\n      if (clone) {\n        let position = part.byteOffset\n        const end = part.byteOffset + part.byteLength\n        while (position !== end) {\n          const size = Math.min(end - position, POOL_SIZE)\n          const chunk = part.buffer.slice(position, position + size)\n          position += chunk.byteLength\n          yield new Uint8Array(chunk)\n        }\n      } else {\n        yield part\n      }\n    /* c8 ignore next 10 */\n    } else {\n      // For blobs that have arrayBuffer but no stream method (nodes buffer.Blob)\n      let position = 0, b = (/** @type {Blob} */ (part))\n      while (position !== b.size) {\n        const chunk = b.slice(position, Math.min(b.size, position + POOL_SIZE))\n        const buffer = await chunk.arrayBuffer()\n        position += buffer.byteLength\n        yield new Uint8Array(buffer)\n      }\n    }\n  }\n}\n\nconst _Blob = class Blob {\n  /** @type {Array.<(Blob|Uint8Array)>} */\n  #parts = []\n  #type = ''\n  #size = 0\n  #endings = 'transparent'\n\n  /**\n   * The Blob() constructor returns a new Blob object. The content\n   * of the blob consists of the concatenation of the values given\n   * in the parameter array.\n   *\n   * @param {*} blobParts\n   * @param {{ type?: string, endings?: string }} [options]\n   */\n  constructor (blobParts = [], options = {}) {\n    if (typeof blobParts !== 'object' || blobParts === null) {\n      throw new TypeError('Failed to construct \\'Blob\\': The provided value cannot be converted to a sequence.')\n    }\n\n    if (typeof blobParts[Symbol.iterator] !== 'function') {\n      throw new TypeError('Failed to construct \\'Blob\\': The object must have a callable @@iterator property.')\n    }\n\n    if (typeof options !== 'object' && typeof options !== 'function') {\n      throw new TypeError('Failed to construct \\'Blob\\': parameter 2 cannot convert to dictionary.')\n    }\n\n    if (options === null) options = {}\n\n    const encoder = new TextEncoder()\n    for (const element of blobParts) {\n      let part\n      if (ArrayBuffer.isView(element)) {\n        part = new Uint8Array(element.buffer.slice(element.byteOffset, element.byteOffset + element.byteLength))\n      } else if (element instanceof ArrayBuffer) {\n        part = new Uint8Array(element.slice(0))\n      } else if (element instanceof Blob) {\n        part = element\n      } else {\n        part = encoder.encode(`${element}`)\n      }\n\n      this.#size += ArrayBuffer.isView(part) ? part.byteLength : part.size\n      this.#parts.push(part)\n    }\n\n    this.#endings = `${options.endings === undefined ? 'transparent' : options.endings}`\n    const type = options.type === undefined ? '' : String(options.type)\n    this.#type = /^[\\x20-\\x7E]*$/.test(type) ? type : ''\n  }\n\n  /**\n   * The Blob interface's size property returns the\n   * size of the Blob in bytes.\n   */\n  get size () {\n    return this.#size\n  }\n\n  /**\n   * The type property of a Blob object returns the MIME type of the file.\n   */\n  get type () {\n    return this.#type\n  }\n\n  /**\n   * The text() method in the Blob interface returns a Promise\n   * that resolves with a string containing the contents of\n   * the blob, interpreted as UTF-8.\n   *\n   * @return {Promise<string>}\n   */\n  async text () {\n    // More optimized than using this.arrayBuffer()\n    // that requires twice as much ram\n    const decoder = new TextDecoder()\n    let str = ''\n    for await (const part of toIterator(this.#parts, false)) {\n      str += decoder.decode(part, { stream: true })\n    }\n    // Remaining\n    str += decoder.decode()\n    return str\n  }\n\n  /**\n   * The arrayBuffer() method in the Blob interface returns a\n   * Promise that resolves with the contents of the blob as\n   * binary data contained in an ArrayBuffer.\n   *\n   * @return {Promise<ArrayBuffer>}\n   */\n  async arrayBuffer () {\n    // Easier way... Just a unnecessary overhead\n    // const view = new Uint8Array(this.size);\n    // await this.stream().getReader({mode: 'byob'}).read(view);\n    // return view.buffer;\n\n    const data = new Uint8Array(this.size)\n    let offset = 0\n    for await (const chunk of toIterator(this.#parts, false)) {\n      data.set(chunk, offset)\n      offset += chunk.length\n    }\n\n    return data.buffer\n  }\n\n  stream () {\n    const it = toIterator(this.#parts, true)\n\n    return new globalThis.ReadableStream({\n      // @ts-ignore\n      type: 'bytes',\n      async pull (ctrl) {\n        const chunk = await it.next()\n        chunk.done ? ctrl.close() : ctrl.enqueue(chunk.value)\n      },\n\n      async cancel () {\n        await it.return()\n      }\n    })\n  }\n\n  /**\n   * The Blob interface's slice() method creates and returns a\n   * new Blob object which contains data from a subset of the\n   * blob on which it's called.\n   *\n   * @param {number} [start]\n   * @param {number} [end]\n   * @param {string} [type]\n   */\n  slice (start = 0, end = this.size, type = '') {\n    const { size } = this\n\n    let relativeStart = start < 0 ? Math.max(size + start, 0) : Math.min(start, size)\n    let relativeEnd = end < 0 ? Math.max(size + end, 0) : Math.min(end, size)\n\n    const span = Math.max(relativeEnd - relativeStart, 0)\n    const parts = this.#parts\n    const blobParts = []\n    let added = 0\n\n    for (const part of parts) {\n      // don't add the overflow to new blobParts\n      if (added >= span) {\n        break\n      }\n\n      const size = ArrayBuffer.isView(part) ? part.byteLength : part.size\n      if (relativeStart && size <= relativeStart) {\n        // Skip the beginning and change the relative\n        // start & end position as we skip the unwanted parts\n        relativeStart -= size\n        relativeEnd -= size\n      } else {\n        let chunk\n        if (ArrayBuffer.isView(part)) {\n          chunk = part.subarray(relativeStart, Math.min(size, relativeEnd))\n          added += chunk.byteLength\n        } else {\n          chunk = part.slice(relativeStart, Math.min(size, relativeEnd))\n          added += chunk.size\n        }\n        relativeEnd -= size\n        blobParts.push(chunk)\n        relativeStart = 0 // All next sequential parts should start at 0\n      }\n    }\n\n    const blob = new Blob([], { type: String(type).toLowerCase() })\n    blob.#size = span\n    blob.#parts = blobParts\n\n    return blob\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'Blob'\n  }\n\n  static [Symbol.hasInstance] (object) {\n    return (\n      object &&\n      typeof object === 'object' &&\n      typeof object.constructor === 'function' &&\n      (\n        typeof object.stream === 'function' ||\n        typeof object.arrayBuffer === 'function'\n      ) &&\n      /^(Blob|File)$/.test(object[Symbol.toStringTag])\n    )\n  }\n}\n\nObject.defineProperties(_Blob.prototype, {\n  size: { enumerable: true },\n  type: { enumerable: true },\n  slice: { enumerable: true }\n})\n\n/** @type {typeof globalThis.Blob} */\nexport const Blob = _Blob\nexport default Blob\n","/* c8 ignore start */\n// 64 KiB (same size chrome slice theirs blob into Uint8array's)\nconst POOL_SIZE = 65536\n\nif (!globalThis.ReadableStream) {\n  // `node:stream/web` got introduced in v16.5.0 as experimental\n  // and it's preferred over the polyfilled version. So we also\n  // suppress the warning that gets emitted by NodeJS for using it.\n  try {\n    const process = require('node:process')\n    const { emitWarning } = process\n    try {\n      process.emitWarning = () => {}\n      Object.assign(globalThis, require('node:stream/web'))\n      process.emitWarning = emitWarning\n    } catch (error) {\n      process.emitWarning = emitWarning\n      throw error\n    }\n  } catch (error) {\n    // fallback to polyfill implementation\n    Object.assign(globalThis, require('web-streams-polyfill/dist/ponyfill.es2018.js'))\n  }\n}\n\ntry {\n  // Don't use node: prefix for this, require+node: is not supported until node v14.14\n  // Only `import()` can use prefix in 12.20 and later\n  const { Blob } = require('buffer')\n  if (Blob && !Blob.prototype.stream) {\n    Blob.prototype.stream = function name (params) {\n      let position = 0\n      const blob = this\n\n      return new ReadableStream({\n        type: 'bytes',\n        async pull (ctrl) {\n          const chunk = blob.slice(position, Math.min(blob.size, position + POOL_SIZE))\n          const buffer = await chunk.arrayBuffer()\n          position += buffer.byteLength\n          ctrl.enqueue(new Uint8Array(buffer))\n\n          if (position === blob.size) {\n            ctrl.close()\n          }\n        }\n      })\n    }\n  }\n} catch (error) {}\n/* c8 ignore end */\n","/*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */\n\nimport C from 'fetch-blob'\nimport F from 'fetch-blob/file.js'\n\nvar {toStringTag:t,iterator:i,hasInstance:h}=Symbol,\nr=Math.random,\nm='append,set,get,getAll,delete,keys,values,entries,forEach,constructor'.split(','),\nf=(a,b,c)=>(a+='',/^(Blob|File)$/.test(b && b[t])?[(c=c!==void 0?c+'':b[t]=='File'?b.name:'blob',a),b.name!==c||b[t]=='blob'?new F([b],c,b):b]:[a,b+'']),\ne=(c,f)=>(f?c:c.replace(/\\r?\\n|\\r/g,'\\r\\n')).replace(/\\n/g,'%0A').replace(/\\r/g,'%0D').replace(/\"/g,'%22'),\nx=(n, a, e)=>{if(a.length<e){throw new TypeError(`Failed to execute '${n}' on 'FormData': ${e} arguments required, but only ${a.length} present.`)}}\n\nexport const File = F\n\n/** @type {typeof globalThis.FormData} */\nexport const FormData = class FormData {\n#d=[];\nconstructor(...a){if(a.length)throw new TypeError(`Failed to construct 'FormData': parameter 1 is not of type 'HTMLFormElement'.`)}\nget [t]() {return 'FormData'}\n[i](){return this.entries()}\nstatic [h](o) {return o&&typeof o==='object'&&o[t]==='FormData'&&!m.some(m=>typeof o[m]!='function')}\nappend(...a){x('append',arguments,2);this.#d.push(f(...a))}\ndelete(a){x('delete',arguments,1);a+='';this.#d=this.#d.filter(([b])=>b!==a)}\nget(a){x('get',arguments,1);a+='';for(var b=this.#d,l=b.length,c=0;c<l;c++)if(b[c][0]===a)return b[c][1];return null}\ngetAll(a,b){x('getAll',arguments,1);b=[];a+='';this.#d.forEach(c=>c[0]===a&&b.push(c[1]));return b}\nhas(a){x('has',arguments,1);a+='';return this.#d.some(b=>b[0]===a)}\nforEach(a,b){x('forEach',arguments,1);for(var [c,d]of this)a.call(b,d,c,this)}\nset(...a){x('set',arguments,2);var b=[],c=!0;a=f(...a);this.#d.forEach(d=>{d[0]===a[0]?c&&(c=!b.push(a)):b.push(d)});c&&b.push(a);this.#d=b}\n*entries(){yield*this.#d}\n*keys(){for(var[a]of this)yield a}\n*values(){for(var[,a]of this)yield a}}\n\n/** @param {FormData} F */\nexport function formDataToBlob (F,B=C){\nvar b=`${r()}${r()}`.replace(/\\./g, '').slice(-28).padStart(32, '-'),c=[],p=`--${b}\\r\\nContent-Disposition: form-data; name=\"`\nF.forEach((v,n)=>typeof v=='string'\n?c.push(p+e(n)+`\"\\r\\n\\r\\n${v.replace(/\\r(?!\\n)|(?<!\\r)\\n/g, '\\r\\n')}\\r\\n`)\n:c.push(p+e(n)+`\"; filename=\"${e(v.name, 1)}\"\\r\\nContent-Type: ${v.type||\"application/octet-stream\"}\\r\\n\\r\\n`, v, '\\r\\n'))\nc.push(`--${b}--`)\nreturn new B(c,{type:\"multipart/form-data; boundary=\"+b})}\n"],"names":["stat","blobFromSync","path","type","fromBlob","statSync","blobFrom","then","fileFrom","fromFile","fileFromSync","BlobDataItem","size","lastModified","mtimeMs","start","basename","constructor","options","this","slice","end","stream","createReadStream","Symbol","toStringTag","factory","exports","noop","typeIsObject","x","rethrowAssertionErrorRejection","setFunctionName","fn","name","Object","defineProperty","value","configurable","_a","originalPromise","Promise","originalPromiseThen","prototype","originalPromiseReject","reject","bind","newPromise","executor","promiseResolvedWith","resolve","promiseRejectedWith","reason","PerformPromiseThen","promise","onFulfilled","onRejected","call","uponPromise","undefined","uponFulfillment","uponRejection","transformPromiseWith","fulfillmentHandler","rejectionHandler","setPromiseIsHandledToTrue","_queueMicrotask","callback","queueMicrotask","resolvedPromise","cb","reflectCall","F","V","args","TypeError","Function","apply","promiseCall","SimpleQueue","_cursor","_size","_front","_elements","_next","_back","length","push","element","oldBack","newBack","QUEUE_MAX_ARRAY_SIZE","shift","oldFront","newFront","oldCursor","newCursor","elements","forEach","i","node","peek","front","cursor","AbortSteps","ErrorSteps","CancelSteps","PullSteps","ReleaseSteps","ReadableStreamReaderGenericInitialize","reader","_ownerReadableStream","_reader","_state","defaultReaderClosedPromiseInitialize","defaultReaderClosedPromiseResolve","defaultReaderClosedPromiseInitializeAsResolved","defaultReaderClosedPromiseInitializeAsRejected","_storedError","ReadableStreamReaderGenericCancel","ReadableStreamCancel","ReadableStreamReaderGenericRelease","defaultReaderClosedPromiseReject","defaultReaderClosedPromiseResetToRejected","_readableStreamController","readerLockException","_closedPromise","_closedPromise_resolve","_closedPromise_reject","NumberIsFinite","Number","isFinite","MathTrunc","Math","trunc","v","ceil","floor","assertDictionary","obj","context","assertFunction","assertObject","isObject","assertRequiredArgument","position","assertRequiredField","field","convertUnrestrictedDouble","censorNegativeZero","convertUnsignedLongLongWithEnforceRange","upperBound","MAX_SAFE_INTEGER","integerPart","assertReadableStream","IsReadableStream","AcquireReadableStreamDefaultReader","ReadableStreamDefaultReader","ReadableStreamAddReadRequest","readRequest","_readRequests","ReadableStreamFulfillReadRequest","chunk","done","_closeSteps","_chunkSteps","ReadableStreamGetNumReadRequests","ReadableStreamHasDefaultReader","IsReadableStreamDefaultReader","IsReadableStreamLocked","closed","defaultReaderBrandCheckException","cancel","read","resolvePromise","rejectPromise","ReadableStreamDefaultReaderRead","_errorSteps","e","releaseLock","ReadableStreamDefaultReaderErrorReadRequests","ReadableStreamDefaultReaderRelease","hasOwnProperty","_disturbed","readRequests","defineProperties","enumerable","AsyncIteratorPrototype","getPrototypeOf","async","ReadableStreamAsyncIteratorImpl","preventCancel","_ongoingPromise","_isFinished","_preventCancel","next","nextSteps","_nextSteps","returnSteps","_returnSteps","result","ReadableStreamAsyncIteratorPrototype","IsReadableStreamAsyncIterator","_asyncIteratorImpl","streamAsyncIteratorBrandCheckException","return","setPrototypeOf","NumberIsNaN","isNaN","_b","_c","CreateArrayFromList","CopyDataBlockBytes","dest","destOffset","src","srcOffset","n","Uint8Array","set","TransferArrayBuffer","O","transfer","buffer","structuredClone","IsDetachedBuffer","detached","byteLength","ArrayBufferSlice","begin","ArrayBuffer","GetMethod","receiver","prop","func","String","SymbolAsyncIterator","asyncIterator","for","GetIterator","hint","method","syncIteratorRecord","syncIterable","iterator","nextMethod","CreateAsyncFromSyncIterator","CloneAsUint8Array","byteOffset","DequeueValue","container","pair","_queue","_queueTotalSize","EnqueueValueWithSize","Infinity","RangeError","ResetQueue","isDataViewConstructor","ctor","DataView","ReadableStreamBYOBRequest","view","IsReadableStreamBYOBRequest","byobRequestBrandCheckException","_view","respond","bytesWritten","_associatedReadableByteStreamController","ReadableByteStreamControllerRespond","respondWithNewView","isView","ReadableByteStreamControllerRespondWithNewView","ReadableByteStreamController","byobRequest","IsReadableByteStreamController","byteStreamControllerBrandCheckException","ReadableByteStreamControllerGetBYOBRequest","desiredSize","ReadableByteStreamControllerGetDesiredSize","close","_closeRequested","state","_controlledReadableByteStream","ReadableByteStreamControllerClose","enqueue","ReadableByteStreamControllerEnqueue","error","ReadableByteStreamControllerError","ReadableByteStreamControllerClearPendingPullIntos","_cancelAlgorithm","ReadableByteStreamControllerClearAlgorithms","ReadableByteStreamControllerFillReadRequestFromQueue","autoAllocateChunkSize","_autoAllocateChunkSize","bufferE","pullIntoDescriptor","bufferByteLength","bytesFilled","minimumFill","elementSize","viewConstructor","readerType","_pendingPullIntos","ReadableByteStreamControllerCallPullIfNeeded","firstPullInto","controller","shouldPull","_started","ReadableStreamHasBYOBReader","ReadableStreamGetNumReadIntoRequests","ReadableByteStreamControllerShouldCallPull","_pulling","_pullAgain","_pullAlgorithm","ReadableByteStreamControllerInvalidateBYOBRequest","ReadableByteStreamControllerCommitPullIntoDescriptor","filledView","ReadableByteStreamControllerConvertPullIntoDescriptor","readIntoRequest","_readIntoRequests","ReadableStreamFulfillReadIntoRequest","ReadableByteStreamControllerEnqueueChunkToQueue","ReadableByteStreamControllerEnqueueClonedChunkToQueue","clonedChunk","cloneE","ReadableByteStreamControllerEnqueueDetachedPullIntoToQueue","firstDescriptor","ReadableByteStreamControllerShiftPendingPullInto","ReadableByteStreamControllerFillPullIntoDescriptorFromQueue","maxBytesToCopy","min","maxBytesFilled","totalBytesToCopyRemaining","ready","maxAlignedBytes","queue","headOfQueue","bytesToCopy","destStart","ReadableByteStreamControllerFillHeadPullIntoDescriptor","ReadableByteStreamControllerHandleQueueDrain","ReadableStreamClose","_byobRequest","ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue","ReadableByteStreamControllerRespondInternal","ReadableByteStreamControllerRespondInClosedState","remainderSize","ReadableByteStreamControllerRespondInReadableState","firstPendingPullInto","transferredBuffer","ReadableByteStreamControllerProcessReadRequestsUsingQueue","ReadableStreamError","entry","create","request","SetUpReadableStreamBYOBRequest","_strategyHWM","viewByteLength","SetUpReadableByteStreamController","startAlgorithm","pullAlgorithm","cancelAlgorithm","highWaterMark","r","convertReadableStreamReaderMode","mode","AcquireReadableStreamBYOBReader","ReadableStreamBYOBReader","ReadableStreamAddReadIntoRequest","IsReadableStreamBYOBReader","byobReaderBrandCheckException","rawOptions","convertByobReadOptions","isDataView","ReadableStreamBYOBReaderRead","ReadableStreamBYOBReaderErrorReadIntoRequests","ReadableStreamBYOBReaderRelease","BYTES_PER_ELEMENT","arrayBufferViewElementSize","emptyView","ReadableByteStreamControllerPullInto","readIntoRequests","ExtractHighWaterMark","strategy","defaultHWM","ExtractSizeAlgorithm","convertQueuingStrategy","init","convertQueuingStrategySize","convertUnderlyingSinkAbortCallback","original","convertUnderlyingSinkCloseCallback","convertUnderlyingSinkStartCallback","convertUnderlyingSinkWriteCallback","assertWritableStream","IsWritableStream","supportsAbortController","AbortController","WritableStream","rawUnderlyingSink","rawStrategy","underlyingSink","abort","write","convertUnderlyingSink","InitializeWritableStream","sizeAlgorithm","WritableStreamDefaultController","writeAlgorithm","closeAlgorithm","abortAlgorithm","SetUpWritableStreamDefaultController","SetUpWritableStreamDefaultControllerFromUnderlyingSink","locked","streamBrandCheckException$2","IsWritableStreamLocked","WritableStreamAbort","WritableStreamCloseQueuedOrInFlight","WritableStreamClose","getWriter","AcquireWritableStreamDefaultWriter","WritableStreamDefaultWriter","_writer","_writableStreamController","_writeRequests","_inFlightWriteRequest","_closeRequest","_inFlightCloseRequest","_pendingAbortRequest","_backpressure","_abortReason","_abortController","_promise","wasAlreadyErroring","_resolve","_reject","_reason","_wasAlreadyErroring","WritableStreamStartErroring","closeRequest","writer","defaultWriterReadyPromiseResolve","closeSentinel","WritableStreamDefaultControllerAdvanceQueueIfNeeded","WritableStreamDealWithRejection","WritableStreamFinishErroring","WritableStreamDefaultWriterEnsureReadyPromiseRejected","WritableStreamHasOperationMarkedInFlight","storedError","writeRequest","WritableStreamRejectCloseAndClosedPromiseIfNeeded","abortRequest","defaultWriterClosedPromiseReject","WritableStreamUpdateBackpressure","backpressure","defaultWriterReadyPromiseInitialize","defaultWriterReadyPromiseReset","_ownerWritableStream","defaultWriterReadyPromiseInitializeAsResolved","defaultWriterClosedPromiseInitialize","defaultWriterReadyPromiseInitializeAsRejected","defaultWriterClosedPromiseResolve","defaultWriterClosedPromiseInitializeAsRejected","IsWritableStreamDefaultWriter","defaultWriterBrandCheckException","defaultWriterLockException","WritableStreamDefaultControllerGetDesiredSize","WritableStreamDefaultWriterGetDesiredSize","_readyPromise","WritableStreamDefaultWriterAbort","WritableStreamDefaultWriterClose","WritableStreamDefaultWriterRelease","WritableStreamDefaultWriterWrite","_readyPromiseState","defaultWriterReadyPromiseReject","defaultWriterReadyPromiseResetToRejected","releasedError","_closedPromiseState","defaultWriterClosedPromiseResetToRejected","WritableStreamDefaultWriterEnsureClosedPromiseRejected","chunkSize","_strategySizeAlgorithm","chunkSizeE","WritableStreamDefaultControllerErrorIfNeeded","WritableStreamDefaultControllerGetChunkSize","WritableStreamAddWriteRequest","enqueueE","_controlledWritableStream","WritableStreamDefaultControllerGetBackpressure","WritableStreamDefaultControllerWrite","abortReason","IsWritableStreamDefaultController","defaultControllerBrandCheckException$2","signal","WritableStreamDefaultControllerError","_abortAlgorithm","WritableStreamDefaultControllerClearAlgorithms","createAbortController","_writeAlgorithm","_closeAlgorithm","WritableStreamMarkCloseRequestInFlight","sinkClosePromise","WritableStreamFinishInFlightClose","WritableStreamFinishInFlightCloseWithError","WritableStreamDefaultControllerProcessClose","WritableStreamMarkFirstWriteRequestInFlight","WritableStreamFinishInFlightWrite","WritableStreamFinishInFlightWriteWithError","WritableStreamDefaultControllerProcessWrite","_readyPromise_resolve","_readyPromise_reject","globals","globalThis","self","global","DOMException","isDOMExceptionConstructor","getFromGlobal","message","Error","captureStackTrace","writable","createPolyfill","ReadableStreamPipeTo","source","preventClose","preventAbort","shuttingDown","currentWrite","actions","shutdownWithAction","all","map","action","aborted","addEventListener","isOrBecomesErrored","shutdown","WritableStreamDefaultWriterCloseWithErrorPropagation","destClosed","waitForWritesToFinish","oldCurrentWrite","originalIsError","originalError","doTheRest","finalize","newError","isError","removeEventListener","resolveLoop","rejectLoop","resolveRead","rejectRead","ReadableStreamDefaultController","IsReadableStreamDefaultController","defaultControllerBrandCheckException$1","ReadableStreamDefaultControllerGetDesiredSize","ReadableStreamDefaultControllerCanCloseOrEnqueue","ReadableStreamDefaultControllerClose","ReadableStreamDefaultControllerEnqueue","ReadableStreamDefaultControllerError","ReadableStreamDefaultControllerClearAlgorithms","_controlledReadableStream","ReadableStreamDefaultControllerCallPullIfNeeded","ReadableStreamDefaultControllerShouldCallPull","SetUpReadableStreamDefaultController","ReadableStreamFrom","getReader","CreateReadableStream","readPromise","readResult","ReadableStreamFromDefaultReader","asyncIterable","iteratorRecord","nextResult","IteratorNext","iterResult","Boolean","IteratorComplete","IteratorValue","returnMethod","returnResult","ReadableStreamFromIterable","convertUnderlyingSourceCancelCallback","convertUnderlyingSourcePullCallback","convertUnderlyingSourceStartCallback","convertReadableStreamType","convertPipeOptions","isAbortSignal","assertAbortSignal","ReadableStream","rawUnderlyingSource","underlyingSource","pull","convertUnderlyingDefaultOrByteSource","InitializeReadableStream","underlyingByteSource","SetUpReadableByteStreamControllerFromUnderlyingSource","SetUpReadableStreamDefaultControllerFromUnderlyingSource","streamBrandCheckException$1","convertReaderOptions","pipeThrough","rawTransform","transform","readable","convertReadableWritablePair","pipeTo","destination","tee","reason1","reason2","branch1","branch2","resolveCancelPromise","reading","readAgainForBranch1","readAgainForBranch2","canceled1","canceled2","cancelPromise","forwardReaderError","thisReader","pullWithDefaultReader","chunk1","chunk2","pull1Algorithm","pull2Algorithm","pullWithBYOBReader","forBranch2","byobBranch","otherBranch","byobCanceled","otherCanceled","CreateReadableByteStream","compositeReason","cancelResult","ReadableByteStreamTee","readAgain","ReadableStreamDefaultTee","values","impl","AcquireReadableStreamAsyncIterator","convertIteratorOptions","from","convertQueuingStrategyInit","byteLengthSizeFunction","ByteLengthQueuingStrategy","_byteLengthQueuingStrategyHighWaterMark","IsByteLengthQueuingStrategy","byteLengthBrandCheckException","countSizeFunction","CountQueuingStrategy","_countQueuingStrategyHighWaterMark","IsCountQueuingStrategy","countBrandCheckException","convertTransformerFlushCallback","convertTransformerStartCallback","convertTransformerTransformCallback","convertTransformerCancelCallback","TransformStream","rawTransformer","rawWritableStrategy","rawReadableStrategy","writableStrategy","readableStrategy","transformer","flush","readableType","writableType","convertTransformer","readableHighWaterMark","readableSizeAlgorithm","writableHighWaterMark","writableSizeAlgorithm","startPromise_resolve","startPromise","_writable","CreateWritableStream","_transformStreamController","_backpressureChangePromise","TransformStreamDefaultControllerPerformTransform","TransformStreamDefaultSinkWriteAlgorithm","_finishPromise","_readable","_finishPromise_resolve","_finishPromise_reject","flushPromise","_flushAlgorithm","TransformStreamDefaultControllerClearAlgorithms","defaultControllerFinishPromiseReject","defaultControllerFinishPromiseResolve","TransformStreamDefaultSinkCloseAlgorithm","TransformStreamDefaultSinkAbortAlgorithm","TransformStreamSetBackpressure","TransformStreamDefaultSourcePullAlgorithm","TransformStreamUnblockWrite","TransformStreamDefaultSourceCancelAlgorithm","_backpressureChangePromise_resolve","InitializeTransformStream","TransformStreamDefaultController","transformAlgorithm","flushAlgorithm","TransformStreamDefaultControllerEnqueue","transformResultE","_controlledTransformStream","_transformAlgorithm","SetUpTransformStreamDefaultController","SetUpTransformStreamDefaultControllerFromTransformer","IsTransformStream","streamBrandCheckException","TransformStreamError","TransformStreamErrorWritableAndUnblockWrite","IsTransformStreamDefaultController","defaultControllerBrandCheckException","terminate","TransformStreamDefaultControllerTerminate","readableController","ReadableStreamDefaultControllerHasBackpressure","MessageChannel","port","port1","ab","postMessage","err","module","fileBits","fileName","arguments","super","Date","now","hasInstance","object","test","uri","firstComma","replace","indexOf","meta","substring","split","charset","base64","typeFull","encoding","data","unescape","Buffer","FetchBaseError","FetchError","systemError","code","errno","erroredSysCall","syscall","NAME","isURLSearchParameters","append","delete","get","getAll","has","sort","isBlob","arrayBuffer","isDomainOrSubdomain","orig","URL","hostname","endsWith","isSameProtocol","protocol","pipeline","promisify","INTERNALS","Body","body","boundary","toString","isBuffer","types","isAnyArrayBuffer","disturbed","on","error_","url","bodyUsed","consumeBody","formData","ct","headers","startsWith","parameters","URLSearchParams","text","toFormData","blob","buf","json","JSON","parse","TextDecoder","decode","alloc","accum","accumBytes","destroy","readableEnded","_readableState","ended","every","c","join","concat","deprecate","clone","instance","p1","p2","getBoundary","PassThrough","pipe","getNonSpecFormDataBoundary","extractContentType","writeToStream","validateHeaderName","validateHeaderValue","Headers","raw","entries","isBoxedPrimitive","toLowerCase","Proxy","target","p","Set","keys","Reflect","thisArg","reduce","key","property","redirectStatus","isRedirect","Response","status","contentType","statusText","counter","ok","redirected","redirect","location","response","stringify","stripURLForUseAsAReferrer","originOnly","username","password","hash","pathname","search","ReferrerPolicy","isUrlPotentiallyTrustworthy","hostIp","host","hostIPVersion","isIP","isOriginPotentiallyTrustworthy","isRequest","doBadDataWarn","Request","input","parsedURL","toUpperCase","inputBody","referrer","parsedReferrer","follow","compress","agent","insecureHTTPParser","referrerPolicy","format","validateReferrerPolicy","getNodeRequestOptions","contentLengthValue","totalBytes","getLengthSync","hasKnownLength","getTotalBytes","referrerURLCallback","referrerOriginCallback","policy","referrerSource","referrerURL","referrerOrigin","currentURL","origin","determineRequestsReferrer","lastOffset","href","getSearch","AbortError","supportedSchemas","fetch","options_","send","emit","abortAndFinalize","request_","LAST_CHUNK","previousChunk","isChunkedTransfer","properLastChunkReceived","socket","onSocketClose","errorCallback","onData","compare","prependListener","removeListener","fixResponseChunkedTransferBadEnding","process","version","s","endedWithEventsCount","_eventsCount","hadError","response_","setTimeout","index","array","filter","fromRawHeaders","rawHeaders","statusCode","locationURL","requestOptions","responseReferrerPolicy","policyTokens","token","parseReferrerPolicyFromHeader","once","responseOptions","statusMessage","codings","zlibOptions","finishFlush","catch","toIterator","parts","part","b","_Blob","Blob","blobParts","encoder","TextEncoder","encode","endings","decoder","str","offset","it","ctrl","relativeStart","max","relativeEnd","span","added","subarray","emitWarning","assign","params","t","h","random","m","f","a","FormData","o","some","l","d","formDataToBlob","B","padStart"],"sourceRoot":""}